
P2_2_TKHTNhung_BTL_20243.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc18  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800dd28  0800dd28  0000ed28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3d8  0800e3d8  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3d8  0800e3d8  0000f3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3e0  0800e3e0  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3e0  0800e3e0  0000f3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3e4  0800e3e4  0000f3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e3e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b0  200001d8  0800e5c0  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002388  0800e5c0  00010388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c816  00000000  00000000  00010201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f39  00000000  00000000  0002ca17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001342  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000067d5  00000000  00000000  0003353a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022cc3  00000000  00000000  00039d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f09  00000000  00000000  0005c9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f68db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e10  00000000  00000000  000f6920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000fe730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dd10 	.word	0x0800dd10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800dd10 	.word	0x0800dd10

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char * ptr, int len) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <_write+0x28>)
 80010a8:	f003 fdfc 	bl	8004ca4 <HAL_UART_Transmit>
  return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002d8 	.word	0x200002d8

080010bc <HAL_UART_RxCpltCallback>:
uint8_t data_rx;
char uart_buff[100];
uint8_t uart_index = 0;
uint8_t uart_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	if (data_rx == '\n'){
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d109      	bne.n	80010e0 <HAL_UART_RxCpltCallback+0x24>
		uart_buff[uart_index] = '\0';
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_RxCpltCallback+0x74>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	5499      	strb	r1, [r3, r2]
		uart_flag = 1;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e00a      	b.n	80010f6 <HAL_UART_RxCpltCallback+0x3a>
	}else{
		uart_buff[uart_index++] = data_rx;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	b2d1      	uxtb	r1, r2
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 80010ea:	7011      	strb	r1, [r2, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 80010f0:	7819      	ldrb	r1, [r3, #0]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_UART_RxCpltCallback+0x74>)
 80010f4:	5499      	strb	r1, [r3, r2]
	}

	if (uart_flag == 1){
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10a      	bne.n	8001114 <HAL_UART_RxCpltCallback+0x58>
	  uart_flag = 0;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_UART_RxCpltCallback+0x78>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
	  uart_index = 0;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_UART_RxCpltCallback+0x70>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	  osSemaphoreRelease(Sem1_CMDHandle);
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_UART_RxCpltCallback+0x7c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fffc 	bl	800610c <osSemaphoreRelease>
	}
	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4904      	ldr	r1, [pc, #16]	@ (8001128 <HAL_UART_RxCpltCallback+0x6c>)
 8001118:	4808      	ldr	r0, [pc, #32]	@ (800113c <HAL_UART_RxCpltCallback+0x80>)
 800111a:	f003 fe4e 	bl	8004dba <HAL_UART_Receive_IT>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000340 	.word	0x20000340
 800112c:	200003a8 	.word	0x200003a8
 8001130:	20000344 	.word	0x20000344
 8001134:	200003a9 	.word	0x200003a9
 8001138:	20000330 	.word	0x20000330
 800113c:	200002d8 	.word	0x200002d8

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 ff36 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f888 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f000 f9ea 	bl	8001524 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001150:	f000 f9be 	bl	80014d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001154:	f000 f8c8 	bl	80012e8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001158:	f000 f8f4 	bl	8001344 <MX_TIM1_Init>
  MX_TIM4_Init();
 800115c:	f000 f942 	bl	80013e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8001160:	2201      	movs	r2, #1
 8001162:	4927      	ldr	r1, [pc, #156]	@ (8001200 <main+0xc0>)
 8001164:	4827      	ldr	r0, [pc, #156]	@ (8001204 <main+0xc4>)
 8001166:	f003 fe28 	bl	8004dba <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800116a:	210c      	movs	r1, #12
 800116c:	4826      	ldr	r0, [pc, #152]	@ (8001208 <main+0xc8>)
 800116e:	f002 fee9 	bl	8003f44 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001172:	f004 fdb9 	bl	8005ce8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem1_CMD */
  Sem1_CMDHandle = osSemaphoreNew(1, 0, &Sem1_CMD_attributes);
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <main+0xcc>)
 8001178:	2100      	movs	r1, #0
 800117a:	2001      	movs	r0, #1
 800117c:	f004 feeb 	bl	8005f56 <osSemaphoreNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <main+0xd0>)
 8001184:	6013      	str	r3, [r2, #0]

  /* creation of Sem2_UART */
  Sem2_UARTHandle = osSemaphoreNew(1, 1, &Sem2_UART_attributes);
 8001186:	4a23      	ldr	r2, [pc, #140]	@ (8001214 <main+0xd4>)
 8001188:	2101      	movs	r1, #1
 800118a:	2001      	movs	r0, #1
 800118c:	f004 fee3 	bl	8005f56 <osSemaphoreNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <main+0xd8>)
 8001194:	6013      	str	r3, [r2, #0]

  /* creation of Sem_Task1 */
  Sem_Task1Handle = osSemaphoreNew(1, 0, &Sem_Task1_attributes);
 8001196:	4a21      	ldr	r2, [pc, #132]	@ (800121c <main+0xdc>)
 8001198:	2100      	movs	r1, #0
 800119a:	2001      	movs	r0, #1
 800119c:	f004 fedb 	bl	8005f56 <osSemaphoreNew>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <main+0xe0>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* creation of Sem_Task2 */
  Sem_Task2Handle = osSemaphoreNew(1, 0, &Sem_Task2_attributes);
 80011a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <main+0xe4>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	2001      	movs	r0, #1
 80011ac:	f004 fed3 	bl	8005f56 <osSemaphoreNew>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001228 <main+0xe8>)
 80011b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_MPU9250 */
  Task1_MPU9250Handle = osThreadNew(S_Task1_MPU9250, NULL, &Task1_MPU9250_attributes);
 80011b6:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <main+0xec>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	481d      	ldr	r0, [pc, #116]	@ (8001230 <main+0xf0>)
 80011bc:	f004 fdf1 	bl	8005da2 <osThreadNew>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <main+0xf4>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* creation of Task2_HCSR04 */
  Task2_HCSR04Handle = osThreadNew(S_Task2_HCSR04, NULL, &Task2_HCSR04_attributes);
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <main+0xf8>)
 80011c8:	2100      	movs	r1, #0
 80011ca:	481c      	ldr	r0, [pc, #112]	@ (800123c <main+0xfc>)
 80011cc:	f004 fde9 	bl	8005da2 <osThreadNew>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <main+0x100>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* creation of Task3_UARTCMD */
  Task3_UARTCMDHandle = osThreadNew(S_Task3_UARTCMD, NULL, &Task3_UARTCMD_attributes);
 80011d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <main+0x104>)
 80011d8:	2100      	movs	r1, #0
 80011da:	481b      	ldr	r0, [pc, #108]	@ (8001248 <main+0x108>)
 80011dc:	f004 fde1 	bl	8005da2 <osThreadNew>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a1a      	ldr	r2, [pc, #104]	@ (800124c <main+0x10c>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* creation of Task4_TimeContr */
  Task4_TimeContrHandle = osThreadNew(S_Task4_TimeControl, NULL, &Task4_TimeContr_attributes);
 80011e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001250 <main+0x110>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	481a      	ldr	r0, [pc, #104]	@ (8001254 <main+0x114>)
 80011ec:	f004 fdd9 	bl	8005da2 <osThreadNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <main+0x118>)
 80011f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011f6:	f004 fd99 	bl	8005d2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011fa:	bf00      	nop
 80011fc:	e7fd      	b.n	80011fa <main+0xba>
 80011fe:	bf00      	nop
 8001200:	20000340 	.word	0x20000340
 8001204:	200002d8 	.word	0x200002d8
 8001208:	20000290 	.word	0x20000290
 800120c:	0800df3c 	.word	0x0800df3c
 8001210:	20000330 	.word	0x20000330
 8001214:	0800df4c 	.word	0x0800df4c
 8001218:	20000334 	.word	0x20000334
 800121c:	0800df5c 	.word	0x0800df5c
 8001220:	20000338 	.word	0x20000338
 8001224:	0800df6c 	.word	0x0800df6c
 8001228:	2000033c 	.word	0x2000033c
 800122c:	0800deac 	.word	0x0800deac
 8001230:	08001641 	.word	0x08001641
 8001234:	20000320 	.word	0x20000320
 8001238:	0800ded0 	.word	0x0800ded0
 800123c:	08001745 	.word	0x08001745
 8001240:	20000324 	.word	0x20000324
 8001244:	0800def4 	.word	0x0800def4
 8001248:	08001795 	.word	0x08001795
 800124c:	20000328 	.word	0x20000328
 8001250:	0800df18 	.word	0x0800df18
 8001254:	08001919 	.word	0x08001919
 8001258:	2000032c 	.word	0x2000032c

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	@ 0x40
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	2228      	movs	r2, #40	@ 0x28
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f009 fa3e 	bl	800a6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001290:	2302      	movs	r3, #2
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001294:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800129a:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 f8a3 	bl	80033f0 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012b0:	f000 fbb3 	bl	8001a1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2102      	movs	r1, #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fb10 	bl	80038f4 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012da:	f000 fb9e 	bl	8001a1a <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3740      	adds	r7, #64	@ 0x40
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012ee:	4a13      	ldr	r2, [pc, #76]	@ (800133c <MX_I2C1_Init+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x58>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001326:	f001 f9d5 	bl	80026d4 <HAL_I2C_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001330:	f000 fb73 	bl	8001a1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200001f4 	.word	0x200001f4
 800133c:	40005400 	.word	0x40005400
 8001340:	000186a0 	.word	0x000186a0

08001344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <MX_TIM1_Init+0x9c>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001368:	223f      	movs	r2, #63	@ 0x3f
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_TIM1_Init+0x98>)
 800138e:	f002 fc6f 	bl	8003c70 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001398:	f000 fb3f 	bl	8001a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013aa:	f003 f81f 	bl	80043ec <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b4:	f000 fb31 	bl	8001a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013c6:	f003 fbad 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013d0:	f000 fb23 	bl	8001a1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000248 	.word	0x20000248
 80013e0:	40012c00 	.word	0x40012c00

080013e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	@ 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001414:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001416:	4a2d      	ldr	r2, [pc, #180]	@ (80014cc <MX_TIM4_Init+0xe8>)
 8001418:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 800141a:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 800141c:	223f      	movs	r2, #63	@ 0x3f
 800141e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001428:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800142c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800143a:	4823      	ldr	r0, [pc, #140]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 800143c:	f002 fc18 	bl	8003c70 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001446:	f000 fae8 	bl	8001a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	481c      	ldr	r0, [pc, #112]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001458:	f002 ffc8 	bl	80043ec <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001462:	f000 fada 	bl	8001a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001466:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001468:	f002 fd14 	bl	8003e94 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001472:	f000 fad2 	bl	8001a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	4810      	ldr	r0, [pc, #64]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 8001486:	f003 fb4d 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001490:	f000 fac3 	bl	8001a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	@ 0x60
 8001496:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	220c      	movs	r2, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 80014ac:	f002 fedc 	bl	8004268 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014b6:	f000 fab0 	bl	8001a1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ba:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <MX_TIM4_Init+0xe4>)
 80014bc:	f000 fb64 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 80014c0:	bf00      	nop
 80014c2:	3738      	adds	r7, #56	@ 0x38
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000290 	.word	0x20000290
 80014cc:	40000800 	.word	0x40000800

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_USART1_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001508:	f003 fb7c 	bl	8004c04 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 fa82 	bl	8001a1a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002d8 	.word	0x200002d8
 8001520:	40013800 	.word	0x40013800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a27      	ldr	r2, [pc, #156]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800153e:	f043 0320 	orr.w	r3, r3, #32
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a1b      	ldr	r2, [pc, #108]	@ (80015dc <MX_GPIO_Init+0xb8>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_GPIO_Init+0xb8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001586:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <MX_GPIO_Init+0xbc>)
 8001588:	f001 f873 	bl	8002672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800158c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_GPIO_Init+0xc0>)
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4619      	mov	r1, r3
 80015a0:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <MX_GPIO_Init+0xc4>)
 80015a2:	f000 fecb 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	4619      	mov	r1, r3
 80015be:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <MX_GPIO_Init+0xbc>)
 80015c0:	f000 febc 	bl	800233c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2105      	movs	r1, #5
 80015c8:	2028      	movs	r0, #40	@ 0x28
 80015ca:	f000 fdda 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ce:	2028      	movs	r0, #40	@ 0x28
 80015d0:	f000 fdf3 	bl	80021ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010800 	.word	0x40010800
 80015e4:	10310000 	.word	0x10310000
 80015e8:	40010c00 	.word	0x40010c00

080015ec <EDF_Init>:

#define NUM_EDF_TASKS 2

EDF_TaskControlBlock edf_tasks[NUM_EDF_TASKS];

void EDF_Init(void) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    edf_tasks[0].sem = &Sem_Task1Handle;
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <EDF_Init+0x48>)
 80015f2:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <EDF_Init+0x4c>)
 80015f4:	601a      	str	r2, [r3, #0]
    edf_tasks[0].exec_time_ms = 12;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <EDF_Init+0x48>)
 80015f8:	220c      	movs	r2, #12
 80015fa:	605a      	str	r2, [r3, #4]
    edf_tasks[0].deadline_ms = osKernelGetTickCount() + 1000;
 80015fc:	f004 fbbc 	bl	8005d78 <osKernelGetTickCount>
 8001600:	4603      	mov	r3, r0
 8001602:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001606:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <EDF_Init+0x48>)
 8001608:	6093      	str	r3, [r2, #8]
    edf_tasks[0].ready = false;
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <EDF_Init+0x48>)
 800160c:	2200      	movs	r2, #0
 800160e:	731a      	strb	r2, [r3, #12]

    edf_tasks[1].sem = &Sem_Task2Handle;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <EDF_Init+0x48>)
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <EDF_Init+0x50>)
 8001614:	611a      	str	r2, [r3, #16]
    edf_tasks[1].exec_time_ms = 15;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <EDF_Init+0x48>)
 8001618:	220f      	movs	r2, #15
 800161a:	615a      	str	r2, [r3, #20]
    edf_tasks[1].deadline_ms = osKernelGetTickCount() + 1500;
 800161c:	f004 fbac 	bl	8005d78 <osKernelGetTickCount>
 8001620:	4603      	mov	r3, r0
 8001622:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001626:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <EDF_Init+0x48>)
 8001628:	6193      	str	r3, [r2, #24]
    edf_tasks[1].ready = false;
 800162a:	4b02      	ldr	r3, [pc, #8]	@ (8001634 <EDF_Init+0x48>)
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200003ac 	.word	0x200003ac
 8001638:	20000338 	.word	0x20000338
 800163c:	2000033c 	.word	0x2000033c

08001640 <S_Task1_MPU9250>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_S_Task1_MPU9250 */
void S_Task1_MPU9250(void *argument)
{
 8001640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af04      	add	r7, sp, #16
 8001648:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Sem_Task1Handle, osWaitForever);
 800164a:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <S_Task1_MPU9250+0xd8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fd08 	bl	8006068 <osSemaphoreAcquire>
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001658:	4b30      	ldr	r3, [pc, #192]	@ (800171c <S_Task1_MPU9250+0xdc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fd01 	bl	8006068 <osSemaphoreAcquire>

	printf("\nTask 1 in: %lu\n", HAL_GetTick());
 8001666:	f000 fccd 	bl	8002004 <HAL_GetTick>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	482c      	ldr	r0, [pc, #176]	@ (8001720 <S_Task1_MPU9250+0xe0>)
 8001670:	f008 fed4 	bl	800a41c <iprintf>

	osSemaphoreRelease(Sem2_UARTHandle);
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <S_Task1_MPU9250+0xdc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f004 fd47 	bl	800610c <osSemaphoreRelease>

	MPU9250_Getdata();
 800167e:	f004 fadf 	bl	8005c40 <MPU9250_Getdata>

	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <S_Task1_MPU9250+0xdc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f04f 31ff 	mov.w	r1, #4294967295
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fcec 	bl	8006068 <osSemaphoreAcquire>

	printf("Data MPU: ax: %.2f  ay: %.2f  az: %.2f\n", ax, ay, az);
 8001690:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <S_Task1_MPU9250+0xe4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fec7 	bl	8000428 <__aeabi_f2d>
 800169a:	4680      	mov	r8, r0
 800169c:	4689      	mov	r9, r1
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <S_Task1_MPU9250+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fec0 	bl	8000428 <__aeabi_f2d>
 80016a8:	4604      	mov	r4, r0
 80016aa:	460d      	mov	r5, r1
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <S_Task1_MPU9250+0xec>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe feb9 	bl	8000428 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016be:	e9cd 4500 	strd	r4, r5, [sp]
 80016c2:	4642      	mov	r2, r8
 80016c4:	464b      	mov	r3, r9
 80016c6:	481a      	ldr	r0, [pc, #104]	@ (8001730 <S_Task1_MPU9250+0xf0>)
 80016c8:	f008 fea8 	bl	800a41c <iprintf>
	printf("gx: %.2f  gy: %.2f  gz: %.2f\n", gx, gy, gz);
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <S_Task1_MPU9250+0xf4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fea9 	bl	8000428 <__aeabi_f2d>
 80016d6:	4680      	mov	r8, r0
 80016d8:	4689      	mov	r9, r1
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <S_Task1_MPU9250+0xf8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fea2 	bl	8000428 <__aeabi_f2d>
 80016e4:	4604      	mov	r4, r0
 80016e6:	460d      	mov	r5, r1
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <S_Task1_MPU9250+0xfc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fe9b 	bl	8000428 <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016fa:	e9cd 4500 	strd	r4, r5, [sp]
 80016fe:	4642      	mov	r2, r8
 8001700:	464b      	mov	r3, r9
 8001702:	480f      	ldr	r0, [pc, #60]	@ (8001740 <S_Task1_MPU9250+0x100>)
 8001704:	f008 fe8a 	bl	800a41c <iprintf>

	osSemaphoreRelease(Sem2_UARTHandle);
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <S_Task1_MPU9250+0xdc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f004 fcfd 	bl	800610c <osSemaphoreRelease>
	osSemaphoreAcquire(Sem_Task1Handle, osWaitForever);
 8001712:	bf00      	nop
 8001714:	e799      	b.n	800164a <S_Task1_MPU9250+0xa>
 8001716:	bf00      	nop
 8001718:	20000338 	.word	0x20000338
 800171c:	20000334 	.word	0x20000334
 8001720:	0800dd98 	.word	0x0800dd98
 8001724:	2000042c 	.word	0x2000042c
 8001728:	20000430 	.word	0x20000430
 800172c:	20000434 	.word	0x20000434
 8001730:	0800ddac 	.word	0x0800ddac
 8001734:	20000438 	.word	0x20000438
 8001738:	2000043c 	.word	0x2000043c
 800173c:	20000440 	.word	0x20000440
 8001740:	0800ddd4 	.word	0x0800ddd4

08001744 <S_Task2_HCSR04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task2_HCSR04 */
void S_Task2_HCSR04(void *argument)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task2_HCSR04 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Sem_Task2Handle, osWaitForever);
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <S_Task2_HCSR04+0x44>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fc87 	bl	8006068 <osSemaphoreAcquire>
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <S_Task2_HCSR04+0x48>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f04f 31ff 	mov.w	r1, #4294967295
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fc80 	bl	8006068 <osSemaphoreAcquire>

	printf("\nTask 2 in: %lu\n", HAL_GetTick());
 8001768:	f000 fc4c 	bl	8002004 <HAL_GetTick>
 800176c:	4603      	mov	r3, r0
 800176e:	4619      	mov	r1, r3
 8001770:	4807      	ldr	r0, [pc, #28]	@ (8001790 <S_Task2_HCSR04+0x4c>)
 8001772:	f008 fe53 	bl	800a41c <iprintf>

	osSemaphoreRelease(Sem2_UARTHandle);
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <S_Task2_HCSR04+0x48>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fcc6 	bl	800610c <osSemaphoreRelease>

    HCSR04_Start();
 8001780:	f004 f8e0 	bl	8005944 <HCSR04_Start>
	osSemaphoreAcquire(Sem_Task2Handle, osWaitForever);
 8001784:	bf00      	nop
 8001786:	e7e1      	b.n	800174c <S_Task2_HCSR04+0x8>
 8001788:	2000033c 	.word	0x2000033c
 800178c:	20000334 	.word	0x20000334
 8001790:	0800ddf4 	.word	0x0800ddf4

08001794 <S_Task3_UARTCMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_S_Task3_UARTCMD */
void S_Task3_UARTCMD(void *argument)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task3_UARTCMD */
    int servo_angle = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Sem1_CMDHandle, osWaitForever);
 80017a0:	4b4f      	ldr	r3, [pc, #316]	@ (80018e0 <S_Task3_UARTCMD+0x14c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 fc5d 	bl	8006068 <osSemaphoreAcquire>

	  if (strncmp(uart_buff, ">Servo", 6) == 0) {
 80017ae:	2206      	movs	r2, #6
 80017b0:	494c      	ldr	r1, [pc, #304]	@ (80018e4 <S_Task3_UARTCMD+0x150>)
 80017b2:	484d      	ldr	r0, [pc, #308]	@ (80018e8 <S_Task3_UARTCMD+0x154>)
 80017b4:	f008 ffa2 	bl	800a6fc <strncmp>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d125      	bne.n	800180a <S_Task3_UARTCMD+0x76>
	         char *ptr = uart_buff + 6;
 80017be:	4b4b      	ldr	r3, [pc, #300]	@ (80018ec <S_Task3_UARTCMD+0x158>)
 80017c0:	617b      	str	r3, [r7, #20]
	         while (*ptr == ' ') ptr++;
 80017c2:	e002      	b.n	80017ca <S_Task3_UARTCMD+0x36>
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d0f8      	beq.n	80017c4 <S_Task3_UARTCMD+0x30>
	         servo_angle = atoi(ptr);
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f007 fe6a 	bl	80094ac <atoi>
 80017d8:	60b8      	str	r0, [r7, #8]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80017da:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fc40 	bl	8006068 <osSemaphoreAcquire>
	         printf("Control Servo angel: %d\n", servo_angle);
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	4842      	ldr	r0, [pc, #264]	@ (80018f4 <S_Task3_UARTCMD+0x160>)
 80017ec:	f008 fe16 	bl	800a41c <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 80017f0:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fc89 	bl	800610c <osSemaphoreRelease>
	         Servo_Write(&htim4, TIM_CHANNEL_4, servo_angle);
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	210c      	movs	r1, #12
 8001802:	483d      	ldr	r0, [pc, #244]	@ (80018f8 <S_Task3_UARTCMD+0x164>)
 8001804:	f007 fe04 	bl	8009410 <Servo_Write>
 8001808:	e7ca      	b.n	80017a0 <S_Task3_UARTCMD+0xc>
	     } else if(strncmp(uart_buff, ">T1", 3) == 0){
 800180a:	2203      	movs	r2, #3
 800180c:	493b      	ldr	r1, [pc, #236]	@ (80018fc <S_Task3_UARTCMD+0x168>)
 800180e:	4836      	ldr	r0, [pc, #216]	@ (80018e8 <S_Task3_UARTCMD+0x154>)
 8001810:	f008 ff74 	bl	800a6fc <strncmp>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d125      	bne.n	8001866 <S_Task3_UARTCMD+0xd2>
	         char *ptr = uart_buff + 3;
 800181a:	4b39      	ldr	r3, [pc, #228]	@ (8001900 <S_Task3_UARTCMD+0x16c>)
 800181c:	613b      	str	r3, [r7, #16]
	         while (*ptr == ' ') ptr++;
 800181e:	e002      	b.n	8001826 <S_Task3_UARTCMD+0x92>
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	3301      	adds	r3, #1
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b20      	cmp	r3, #32
 800182c:	d0f8      	beq.n	8001820 <S_Task3_UARTCMD+0x8c>
	         edf_tasks[0].deadline_ms = edf_tasks[0].deadline_ms + atoi(ptr);
 800182e:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <S_Task3_UARTCMD+0x170>)
 8001830:	689c      	ldr	r4, [r3, #8]
 8001832:	6938      	ldr	r0, [r7, #16]
 8001834:	f007 fe3a 	bl	80094ac <atoi>
 8001838:	4603      	mov	r3, r0
 800183a:	4423      	add	r3, r4
 800183c:	4a31      	ldr	r2, [pc, #196]	@ (8001904 <S_Task3_UARTCMD+0x170>)
 800183e:	6093      	str	r3, [r2, #8]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fc0d 	bl	8006068 <osSemaphoreAcquire>
	         printf("Change Deadline Task 1 to: %lu\n", edf_tasks[0].deadline_ms);
 800184e:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <S_Task3_UARTCMD+0x170>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4619      	mov	r1, r3
 8001854:	482c      	ldr	r0, [pc, #176]	@ (8001908 <S_Task3_UARTCMD+0x174>)
 8001856:	f008 fde1 	bl	800a41c <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 800185a:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fc54 	bl	800610c <osSemaphoreRelease>
 8001864:	e79c      	b.n	80017a0 <S_Task3_UARTCMD+0xc>
	     }else if(strncmp(uart_buff, ">T2", 3) == 0){
 8001866:	2203      	movs	r2, #3
 8001868:	4928      	ldr	r1, [pc, #160]	@ (800190c <S_Task3_UARTCMD+0x178>)
 800186a:	481f      	ldr	r0, [pc, #124]	@ (80018e8 <S_Task3_UARTCMD+0x154>)
 800186c:	f008 ff46 	bl	800a6fc <strncmp>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d123      	bne.n	80018be <S_Task3_UARTCMD+0x12a>
	         char *ptr = uart_buff + 3;
 8001876:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <S_Task3_UARTCMD+0x16c>)
 8001878:	60fb      	str	r3, [r7, #12]
	         while (*ptr == ' ') ptr++;
 800187a:	e002      	b.n	8001882 <S_Task3_UARTCMD+0xee>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3301      	adds	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b20      	cmp	r3, #32
 8001888:	d0f8      	beq.n	800187c <S_Task3_UARTCMD+0xe8>
	         edf_tasks[1].deadline_ms = atoi(ptr);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f007 fe0e 	bl	80094ac <atoi>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <S_Task3_UARTCMD+0x170>)
 8001896:	619a      	str	r2, [r3, #24]
	         osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fbe1 	bl	8006068 <osSemaphoreAcquire>
	         printf("Change Deadline Task 2 to: %lu\n", edf_tasks[1].deadline_ms);
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <S_Task3_UARTCMD+0x170>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4818      	ldr	r0, [pc, #96]	@ (8001910 <S_Task3_UARTCMD+0x17c>)
 80018ae:	f008 fdb5 	bl	800a41c <iprintf>
	         osSemaphoreRelease(Sem2_UARTHandle);
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f004 fc28 	bl	800610c <osSemaphoreRelease>
 80018bc:	e770      	b.n	80017a0 <S_Task3_UARTCMD+0xc>
	     }else {
	    	 osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f04f 31ff 	mov.w	r1, #4294967295
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 fbce 	bl	8006068 <osSemaphoreAcquire>
	         printf("Wrong message!\n");
 80018cc:	4811      	ldr	r0, [pc, #68]	@ (8001914 <S_Task3_UARTCMD+0x180>)
 80018ce:	f008 fe0d 	bl	800a4ec <puts>
	         osSemaphoreRelease(Sem2_UARTHandle);
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <S_Task3_UARTCMD+0x15c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f004 fc18 	bl	800610c <osSemaphoreRelease>
	  osSemaphoreAcquire(Sem1_CMDHandle, osWaitForever);
 80018dc:	e760      	b.n	80017a0 <S_Task3_UARTCMD+0xc>
 80018de:	bf00      	nop
 80018e0:	20000330 	.word	0x20000330
 80018e4:	0800de08 	.word	0x0800de08
 80018e8:	20000344 	.word	0x20000344
 80018ec:	2000034a 	.word	0x2000034a
 80018f0:	20000334 	.word	0x20000334
 80018f4:	0800de10 	.word	0x0800de10
 80018f8:	20000290 	.word	0x20000290
 80018fc:	0800de2c 	.word	0x0800de2c
 8001900:	20000347 	.word	0x20000347
 8001904:	200003ac 	.word	0x200003ac
 8001908:	0800de30 	.word	0x0800de30
 800190c:	0800de50 	.word	0x0800de50
 8001910:	0800de54 	.word	0x0800de54
 8001914:	0800de74 	.word	0x0800de74

08001918 <S_Task4_TimeControl>:
* @retval None
*/
/* USER CODE END Header_S_Task4_TimeControl */
uint32_t now;
void S_Task4_TimeControl(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN S_Task4_TimeControl */
	uint32_t next_wake_time = osKernelGetTickCount();
 8001920:	f004 fa2a 	bl	8005d78 <osKernelGetTickCount>
 8001924:	6178      	str	r0, [r7, #20]
	EDF_Init();
 8001926:	f7ff fe61 	bl	80015ec <EDF_Init>
  /* Infinite loop */
  for(;;)
  {
	now = osKernelGetTickCount();
 800192a:	f004 fa25 	bl	8005d78 <osKernelGetTickCount>
 800192e:	4603      	mov	r3, r0
 8001930:	4a2e      	ldr	r2, [pc, #184]	@ (80019ec <S_Task4_TimeControl+0xd4>)
 8001932:	6013      	str	r3, [r2, #0]
	int min_idx = -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	613b      	str	r3, [r7, #16]
	uint32_t min_deadline = 0xFFFFFFFF;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < NUM_EDF_TASKS; i++) {
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	e01e      	b.n	8001984 <S_Task4_TimeControl+0x6c>
		// Nếu đã đến hạn hoặc quá hạn
		if (edf_tasks[i].deadline_ms <= now) {
 8001946:	4a2a      	ldr	r2, [pc, #168]	@ (80019f0 <S_Task4_TimeControl+0xd8>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	3308      	adds	r3, #8
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <S_Task4_TimeControl+0xd4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d811      	bhi.n	800197e <S_Task4_TimeControl+0x66>
			if (edf_tasks[i].deadline_ms < min_deadline) {
 800195a:	4a25      	ldr	r2, [pc, #148]	@ (80019f0 <S_Task4_TimeControl+0xd8>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4413      	add	r3, r2
 8001962:	3308      	adds	r3, #8
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d908      	bls.n	800197e <S_Task4_TimeControl+0x66>
				min_deadline = edf_tasks[i].deadline_ms;
 800196c:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <S_Task4_TimeControl+0xd8>)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4413      	add	r3, r2
 8001974:	3308      	adds	r3, #8
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
				min_idx = i;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < NUM_EDF_TASKS; i++) {
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3301      	adds	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b01      	cmp	r3, #1
 8001988:	dddd      	ble.n	8001946 <S_Task4_TimeControl+0x2e>
			}
		}
	}

	// Nếu có task đến hạn, release semaphore cho task đó
	if (min_idx >= 0) {
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db23      	blt.n	80019d8 <S_Task4_TimeControl+0xc0>
        switch (min_idx) {
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <S_Task4_TimeControl+0x86>
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d006      	beq.n	80019aa <S_Task4_TimeControl+0x92>
				break;
			case 1:
				osSemaphoreRelease(Sem_Task2Handle);
				break;
			default:
				break;
 800199c:	e00b      	b.n	80019b6 <S_Task4_TimeControl+0x9e>
				osSemaphoreRelease(Sem_Task1Handle);
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <S_Task4_TimeControl+0xdc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 fbb2 	bl	800610c <osSemaphoreRelease>
				break;
 80019a8:	e005      	b.n	80019b6 <S_Task4_TimeControl+0x9e>
				osSemaphoreRelease(Sem_Task2Handle);
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <S_Task4_TimeControl+0xe0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 fbac 	bl	800610c <osSemaphoreRelease>
				break;
 80019b4:	bf00      	nop
		}
		// Đặt deadline tiếp theo cho task này (ví dụ: định kỳ)
		edf_tasks[min_idx].deadline_ms = now + (min_idx == 0 ? 1000 : 1500);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <S_Task4_TimeControl+0xaa>
 80019bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c0:	e001      	b.n	80019c6 <S_Task4_TimeControl+0xae>
 80019c2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <S_Task4_TimeControl+0xd4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	441a      	add	r2, r3
 80019cc:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <S_Task4_TimeControl+0xd8>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	440b      	add	r3, r1
 80019d4:	3308      	adds	r3, #8
 80019d6:	601a      	str	r2, [r3, #0]
	}

	osDelay(1); // Kiểm tra mỗi 1ms
 80019d8:	2001      	movs	r0, #1
 80019da:	f004 fa74 	bl	8005ec6 <osDelay>
	next_wake_time += 100;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3364      	adds	r3, #100	@ 0x64
 80019e2:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_wake_time);
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f004 fa89 	bl	8005efc <osDelayUntil>
  {
 80019ea:	e79e      	b.n	800192a <S_Task4_TimeControl+0x12>
 80019ec:	200003cc 	.word	0x200003cc
 80019f0:	200003ac 	.word	0x200003ac
 80019f4:	20000338 	.word	0x20000338
 80019f8:	2000033c 	.word	0x2000033c

080019fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a0e:	f000 fae7 	bl	8001fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1e:	b672      	cpsid	i
}
 8001a20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a22:	bf00      	nop
 8001a24:	e7fd      	b.n	8001a22 <Error_Handler+0x8>
	...

08001a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a2e:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_MspInit+0x68>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a17      	ldr	r2, [pc, #92]	@ (8001a90 <HAL_MspInit+0x68>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_MspInit+0x68>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_MspInit+0x68>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_MspInit+0x68>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_MspInit+0x68>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	210f      	movs	r1, #15
 8001a62:	f06f 0001 	mvn.w	r0, #1
 8001a66:	f000 fb8c 	bl	8002182 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_MspInit+0x6c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_MspInit+0x6c>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a15      	ldr	r2, [pc, #84]	@ (8001b08 <HAL_I2C_MspInit+0x70>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d123      	bne.n	8001b00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_I2C_MspInit+0x74>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a13      	ldr	r2, [pc, #76]	@ (8001b0c <HAL_I2C_MspInit+0x74>)
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_I2C_MspInit+0x74>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad0:	23c0      	movs	r3, #192	@ 0xc0
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad4:	2312      	movs	r3, #18
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480b      	ldr	r0, [pc, #44]	@ (8001b10 <HAL_I2C_MspInit+0x78>)
 8001ae4:	f000 fc2a 	bl	800233c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_I2C_MspInit+0x74>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <HAL_I2C_MspInit+0x74>)
 8001aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af2:	61d3      	str	r3, [r2, #28]
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_I2C_MspInit+0x74>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010c00 	.word	0x40010c00

08001b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d114      	bne.n	8001b50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a15      	ldr	r2, [pc, #84]	@ (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b30:	6193      	str	r3, [r2, #24]
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2105      	movs	r1, #5
 8001b42:	2019      	movs	r0, #25
 8001b44:	f000 fb1d 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b48:	2019      	movs	r0, #25
 8001b4a:	f000 fb36 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b4e:	e010      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <HAL_TIM_Base_MspInit+0x70>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40000800 	.word	0x40000800

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_TIM_MspPostInit+0x5c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d118      	bne.n	8001bda <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <HAL_TIM_MspPostInit+0x60>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <HAL_TIM_MspPostInit+0x60>)
 8001bae:	f043 0308 	orr.w	r3, r3, #8
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_TIM_MspPostInit+0x60>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <HAL_TIM_MspPostInit+0x64>)
 8001bd6:	f000 fbb1 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010c00 	.word	0x40010c00

08001bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a20      	ldr	r2, [pc, #128]	@ (8001c8c <HAL_UART_MspInit+0x9c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d139      	bne.n	8001c84 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c10:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <HAL_UART_MspInit+0xa0>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_UART_MspInit+0xa0>)
 8001c16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <HAL_UART_MspInit+0xa0>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_UART_MspInit+0xa0>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a18      	ldr	r2, [pc, #96]	@ (8001c90 <HAL_UART_MspInit+0xa0>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_UART_MspInit+0xa0>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4619      	mov	r1, r3
 8001c54:	480f      	ldr	r0, [pc, #60]	@ (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c56:	f000 fb71 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4809      	ldr	r0, [pc, #36]	@ (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c70:	f000 fb64 	bl	800233c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2106      	movs	r1, #6
 8001c78:	2025      	movs	r0, #37	@ 0x25
 8001c7a:	f000 fa82 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c7e:	2025      	movs	r0, #37	@ 0x25
 8001c80:	f000 fa9b 	bl	80021ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010800 	.word	0x40010800

08001c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08e      	sub	sp, #56	@ 0x38
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_InitTick+0xe8>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a33      	ldr	r2, [pc, #204]	@ (8001d80 <HAL_InitTick+0xe8>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <HAL_InitTick+0xe8>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cc6:	f107 0210 	add.w	r2, r7, #16
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 ff7f 	bl	8003bd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d103      	bne.n	8001ce8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ce0:	f001 ff50 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8001ce4:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ce6:	e004      	b.n	8001cf2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ce8:	f001 ff4c 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8001cec:	4603      	mov	r3, r0
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <HAL_InitTick+0xec>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9b      	lsrs	r3, r3, #18
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d00:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d10:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001d28:	4817      	ldr	r0, [pc, #92]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d2a:	f001 ffa1 	bl	8003c70 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11b      	bne.n	8001d74 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001d3c:	4812      	ldr	r0, [pc, #72]	@ (8001d88 <HAL_InitTick+0xf0>)
 8001d3e:	f002 f857 	bl	8003df0 <HAL_TIM_Base_Start_IT>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d111      	bne.n	8001d74 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d50:	201c      	movs	r0, #28
 8001d52:	f000 fa32 	bl	80021ba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d808      	bhi.n	8001d6e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	201c      	movs	r0, #28
 8001d62:	f000 fa0e 	bl	8002182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d66:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <HAL_InitTick+0xf4>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e002      	b.n	8001d74 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3738      	adds	r7, #56	@ 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	200003d0 	.word	0x200003d0
 8001d8c:	20000004 	.word	0x20000004

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <NMI_Handler+0x4>

08001d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <MemManage_Handler+0x4>

08001da8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <TIM1_UP_IRQHandler+0x10>)
 8001dca:	f002 f95d 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000248 	.word	0x20000248

08001dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <TIM2_IRQHandler+0x10>)
 8001dde:	f002 f953 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200003d0 	.word	0x200003d0

08001dec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <USART1_IRQHandler+0x10>)
 8001df2:	f003 f807 	bl	8004e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200002d8 	.word	0x200002d8

08001e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e08:	f000 fc4c 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <_kill>:

int _kill(int pid, int sig)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e28:	f008 fd1a 	bl	800a860 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2216      	movs	r2, #22
 8001e30:	601a      	str	r2, [r3, #0]
  return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_exit>:

void _exit (int status)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e46:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffe7 	bl	8001e1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <_exit+0x12>

08001e54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e00a      	b.n	8001e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e66:	f3af 8000 	nop.w
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	60ba      	str	r2, [r7, #8]
 8001e72:	b2ca      	uxtb	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf0      	blt.n	8001e66 <_read+0x12>
  }

  return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <_isatty>:

int _isatty(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f008 fc9e 	bl	800a860 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20005000 	.word	0x20005000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	20000418 	.word	0x20000418
 8001f58:	20002388 	.word	0x20002388

08001f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f68:	f7ff fff8 	bl	8001f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f6c:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f6e:	490c      	ldr	r1, [pc, #48]	@ (8001fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f70:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f84:	4c09      	ldr	r4, [pc, #36]	@ (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f92:	f008 fc6b 	bl	800a86c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f96:	f7ff f8d3 	bl	8001140 <main>
  bx lr
 8001f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fa4:	0800e3e8 	.word	0x0800e3e8
  ldr r2, =_sbss
 8001fa8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001fac:	20002388 	.word	0x20002388

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_Init+0x28>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_Init+0x28>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f8d1 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f7ff fe64 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fd2a 	bl	8001a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_IncTick+0x1c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_IncTick+0x20>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a03      	ldr	r2, [pc, #12]	@ (8002000 <HAL_IncTick+0x20>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000008 	.word	0x20000008
 8002000:	2000041c 	.word	0x2000041c

08002004 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b02      	ldr	r3, [pc, #8]	@ (8002014 <HAL_GetTick+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	2000041c 	.word	0x2000041c

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4906      	ldr	r1, [pc, #24]	@ (80020b0 <__NVIC_EnableIRQ+0x34>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff4f 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff64 	bl	8002060 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ffb2 	bl	8002108 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff81 	bl	80020b4 <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff57 	bl	800207c <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d008      	beq.n	8002200 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e020      	b.n	8002242 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020e 	bic.w	r2, r2, #14
 800220e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d005      	beq.n	8002270 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2204      	movs	r2, #4
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e051      	b.n	8002314 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 020e 	bic.w	r2, r2, #14
 800227e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a22      	ldr	r2, [pc, #136]	@ (8002320 <HAL_DMA_Abort_IT+0xd4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d029      	beq.n	80022ee <HAL_DMA_Abort_IT+0xa2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a21      	ldr	r2, [pc, #132]	@ (8002324 <HAL_DMA_Abort_IT+0xd8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <HAL_DMA_Abort_IT+0x9e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002328 <HAL_DMA_Abort_IT+0xdc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01a      	beq.n	80022e4 <HAL_DMA_Abort_IT+0x98>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1e      	ldr	r2, [pc, #120]	@ (800232c <HAL_DMA_Abort_IT+0xe0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d012      	beq.n	80022de <HAL_DMA_Abort_IT+0x92>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002330 <HAL_DMA_Abort_IT+0xe4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00a      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x8c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002334 <HAL_DMA_Abort_IT+0xe8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d102      	bne.n	80022d2 <HAL_DMA_Abort_IT+0x86>
 80022cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80022d0:	e00e      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d6:	e00b      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022dc:	e008      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e2:	e005      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022e8:	e002      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022ea:	2310      	movs	r3, #16
 80022ec:	e000      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022ee:	2301      	movs	r3, #1
 80022f0:	4a11      	ldr	r2, [pc, #68]	@ (8002338 <HAL_DMA_Abort_IT+0xec>)
 80022f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
    } 
  }
  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40020008 	.word	0x40020008
 8002324:	4002001c 	.word	0x4002001c
 8002328:	40020030 	.word	0x40020030
 800232c:	40020044 	.word	0x40020044
 8002330:	40020058 	.word	0x40020058
 8002334:	4002006c 	.word	0x4002006c
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b08b      	sub	sp, #44	@ 0x2c
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234e:	e169      	b.n	8002624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002350:	2201      	movs	r2, #1
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8158 	bne.w	800261e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a9a      	ldr	r2, [pc, #616]	@ (80025dc <HAL_GPIO_Init+0x2a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d05e      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002378:	4a98      	ldr	r2, [pc, #608]	@ (80025dc <HAL_GPIO_Init+0x2a0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d875      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800237e:	4a98      	ldr	r2, [pc, #608]	@ (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d058      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002384:	4a96      	ldr	r2, [pc, #600]	@ (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d86f      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800238a:	4a96      	ldr	r2, [pc, #600]	@ (80025e4 <HAL_GPIO_Init+0x2a8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d052      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002390:	4a94      	ldr	r2, [pc, #592]	@ (80025e4 <HAL_GPIO_Init+0x2a8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d869      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 8002396:	4a94      	ldr	r2, [pc, #592]	@ (80025e8 <HAL_GPIO_Init+0x2ac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04c      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 800239c:	4a92      	ldr	r2, [pc, #584]	@ (80025e8 <HAL_GPIO_Init+0x2ac>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d863      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023a2:	4a92      	ldr	r2, [pc, #584]	@ (80025ec <HAL_GPIO_Init+0x2b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d046      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 80023a8:	4a90      	ldr	r2, [pc, #576]	@ (80025ec <HAL_GPIO_Init+0x2b0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d85d      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d82a      	bhi.n	8002408 <HAL_GPIO_Init+0xcc>
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d859      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023b6:	a201      	add	r2, pc, #4	@ (adr r2, 80023bc <HAL_GPIO_Init+0x80>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002411 	.word	0x08002411
 80023c4:	08002423 	.word	0x08002423
 80023c8:	08002465 	.word	0x08002465
 80023cc:	0800246b 	.word	0x0800246b
 80023d0:	0800246b 	.word	0x0800246b
 80023d4:	0800246b 	.word	0x0800246b
 80023d8:	0800246b 	.word	0x0800246b
 80023dc:	0800246b 	.word	0x0800246b
 80023e0:	0800246b 	.word	0x0800246b
 80023e4:	0800246b 	.word	0x0800246b
 80023e8:	0800246b 	.word	0x0800246b
 80023ec:	0800246b 	.word	0x0800246b
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	0800246b 	.word	0x0800246b
 80023f8:	0800246b 	.word	0x0800246b
 80023fc:	0800246b 	.word	0x0800246b
 8002400:	08002419 	.word	0x08002419
 8002404:	0800242d 	.word	0x0800242d
 8002408:	4a79      	ldr	r2, [pc, #484]	@ (80025f0 <HAL_GPIO_Init+0x2b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800240e:	e02c      	b.n	800246a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e029      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e024      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3308      	adds	r3, #8
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e01f      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	330c      	adds	r3, #12
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e01a      	b.n	800246c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243e:	2304      	movs	r3, #4
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e013      	b.n	800246c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800244c:	2308      	movs	r3, #8
 800244e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	611a      	str	r2, [r3, #16]
          break;
 8002456:	e009      	b.n	800246c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	615a      	str	r2, [r3, #20]
          break;
 8002462:	e003      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x130>
          break;
 800246a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	@ 0xff
 8002470:	d801      	bhi.n	8002476 <HAL_GPIO_Init+0x13a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	e001      	b.n	800247a <HAL_GPIO_Init+0x13e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2bff      	cmp	r3, #255	@ 0xff
 8002480:	d802      	bhi.n	8002488 <HAL_GPIO_Init+0x14c>
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x152>
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	3b08      	subs	r3, #8
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	210f      	movs	r1, #15
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80b1 	beq.w	800261e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024bc:	4b4d      	ldr	r3, [pc, #308]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a4c      	ldr	r2, [pc, #304]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b4a      	ldr	r3, [pc, #296]	@ (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d4:	4a48      	ldr	r2, [pc, #288]	@ (80025f8 <HAL_GPIO_Init+0x2bc>)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a40      	ldr	r2, [pc, #256]	@ (80025fc <HAL_GPIO_Init+0x2c0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3f      	ldr	r2, [pc, #252]	@ (8002600 <HAL_GPIO_Init+0x2c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3e      	ldr	r2, [pc, #248]	@ (8002604 <HAL_GPIO_Init+0x2c8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3d      	ldr	r2, [pc, #244]	@ (8002608 <HAL_GPIO_Init+0x2cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1e0>
 8002518:	2303      	movs	r3, #3
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 800251c:	2304      	movs	r3, #4
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002528:	2300      	movs	r3, #0
 800252a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800253a:	492f      	ldr	r1, [pc, #188]	@ (80025f8 <HAL_GPIO_Init+0x2bc>)
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002554:	4b2d      	ldr	r3, [pc, #180]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	492c      	ldr	r1, [pc, #176]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002562:	4b2a      	ldr	r3, [pc, #168]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4928      	ldr	r1, [pc, #160]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 800256c:	4013      	ands	r3, r2
 800256e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800257c:	4b23      	ldr	r3, [pc, #140]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4922      	ldr	r1, [pc, #136]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	491e      	ldr	r1, [pc, #120]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4918      	ldr	r1, [pc, #96]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025b2:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4914      	ldr	r1, [pc, #80]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d021      	beq.n	8002610 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025cc:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	490e      	ldr	r1, [pc, #56]	@ (800260c <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	e021      	b.n	800261e <HAL_GPIO_Init+0x2e2>
 80025da:	bf00      	nop
 80025dc:	10320000 	.word	0x10320000
 80025e0:	10310000 	.word	0x10310000
 80025e4:	10220000 	.word	0x10220000
 80025e8:	10210000 	.word	0x10210000
 80025ec:	10120000 	.word	0x10120000
 80025f0:	10110000 	.word	0x10110000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40010800 	.word	0x40010800
 8002600:	40010c00 	.word	0x40010c00
 8002604:	40011000 	.word	0x40011000
 8002608:	40011400 	.word	0x40011400
 800260c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_GPIO_Init+0x304>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	43db      	mvns	r3, r3
 8002618:	4909      	ldr	r1, [pc, #36]	@ (8002640 <HAL_GPIO_Init+0x304>)
 800261a:	4013      	ands	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	f47f ae8e 	bne.w	8002350 <HAL_GPIO_Init+0x14>
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	372c      	adds	r7, #44	@ 0x2c
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
 800267e:	4613      	mov	r3, r2
 8002680:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002682:	787b      	ldrb	r3, [r7, #1]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800268e:	e003      	b.n	8002698 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ba:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 f952 	bl	800596c <HAL_GPIO_EXTI_Callback>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e12b      	b.n	800293e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff f9cc 	bl	8001a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	@ 0x24
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002738:	f001 fa24 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 800273c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a81      	ldr	r2, [pc, #516]	@ (8002948 <HAL_I2C_Init+0x274>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d807      	bhi.n	8002758 <HAL_I2C_Init+0x84>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a80      	ldr	r2, [pc, #512]	@ (800294c <HAL_I2C_Init+0x278>)
 800274c:	4293      	cmp	r3, r2
 800274e:	bf94      	ite	ls
 8002750:	2301      	movls	r3, #1
 8002752:	2300      	movhi	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e006      	b.n	8002766 <HAL_I2C_Init+0x92>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a7d      	ldr	r2, [pc, #500]	@ (8002950 <HAL_I2C_Init+0x27c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	bf94      	ite	ls
 8002760:	2301      	movls	r3, #1
 8002762:	2300      	movhi	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0e7      	b.n	800293e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a78      	ldr	r2, [pc, #480]	@ (8002954 <HAL_I2C_Init+0x280>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9b      	lsrs	r3, r3, #18
 8002778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a6a      	ldr	r2, [pc, #424]	@ (8002948 <HAL_I2C_Init+0x274>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d802      	bhi.n	80027a8 <HAL_I2C_Init+0xd4>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	e009      	b.n	80027bc <HAL_I2C_Init+0xe8>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	4a69      	ldr	r2, [pc, #420]	@ (8002958 <HAL_I2C_Init+0x284>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	3301      	adds	r3, #1
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	495c      	ldr	r1, [pc, #368]	@ (8002948 <HAL_I2C_Init+0x274>)
 80027d8:	428b      	cmp	r3, r1
 80027da:	d819      	bhi.n	8002810 <HAL_I2C_Init+0x13c>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1e59      	subs	r1, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ea:	1c59      	adds	r1, r3, #1
 80027ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027f0:	400b      	ands	r3, r1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_I2C_Init+0x138>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1e59      	subs	r1, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fbb1 f3f3 	udiv	r3, r1, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	e051      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 800280c:	2304      	movs	r3, #4
 800280e:	e04f      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <HAL_I2C_Init+0x168>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e012      	b.n	8002862 <HAL_I2C_Init+0x18e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	0099      	lsls	r1, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Init+0x196>
 8002866:	2301      	movs	r3, #1
 8002868:	e022      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10e      	bne.n	8002890 <HAL_I2C_Init+0x1bc>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e58      	subs	r0, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	440b      	add	r3, r1
 8002880:	fbb0 f3f3 	udiv	r3, r0, r3
 8002884:	3301      	adds	r3, #1
 8002886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800288e:	e00f      	b.n	80028b0 <HAL_I2C_Init+0x1dc>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	0099      	lsls	r1, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	6809      	ldr	r1, [r1, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6911      	ldr	r1, [r2, #16]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68d2      	ldr	r2, [r2, #12]
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	000186a0 	.word	0x000186a0
 800294c:	001e847f 	.word	0x001e847f
 8002950:	003d08ff 	.word	0x003d08ff
 8002954:	431bde83 	.word	0x431bde83
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	@ 0x30
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800297a:	f7ff fb43 	bl	8002004 <HAL_GetTick>
 800297e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b20      	cmp	r3, #32
 800298a:	f040 8250 	bne.w	8002e2e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2319      	movs	r3, #25
 8002994:	2201      	movs	r2, #1
 8002996:	4982      	ldr	r1, [pc, #520]	@ (8002ba0 <HAL_I2C_Mem_Read+0x244>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fb3b 	bl	8003014 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	e243      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_I2C_Mem_Read+0x5a>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e23c      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d007      	beq.n	80029dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2222      	movs	r2, #34	@ 0x22
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4a62      	ldr	r2, [pc, #392]	@ (8002ba4 <HAL_I2C_Mem_Read+0x248>)
 8002a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a1e:	88f8      	ldrh	r0, [r7, #6]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	8979      	ldrh	r1, [r7, #10]
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fa08 	bl	8002e44 <I2C_RequestMemoryRead>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1f8      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e1cc      	b.n	8002e08 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d11e      	bne.n	8002ab4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a86:	b672      	cpsid	i
}
 8002a88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab0:	b662      	cpsie	i
}
 8002ab2:	e035      	b.n	8002b20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11e      	bne.n	8002afa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002acc:	b672      	cpsid	i
}
 8002ace:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002af6:	b662      	cpsie	i
}
 8002af8:	e012      	b.n	8002b20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b20:	e172      	b.n	8002e08 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f200 811f 	bhi.w	8002d6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d123      	bne.n	8002b7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fbcd 	bl	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e173      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b7a:	e145      	b.n	8002e08 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d152      	bne.n	8002c2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4906      	ldr	r1, [pc, #24]	@ (8002ba8 <HAL_I2C_Mem_Read+0x24c>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fa40 	bl	8003014 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e148      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
 8002b9e:	bf00      	nop
 8002ba0:	00100002 	.word	0x00100002
 8002ba4:	ffff0000 	.word	0xffff0000
 8002ba8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf2:	b662      	cpsie	i
}
 8002bf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c28:	e0ee      	b.n	8002e08 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c30:	2200      	movs	r2, #0
 8002c32:	4981      	ldr	r1, [pc, #516]	@ (8002e38 <HAL_I2C_Mem_Read+0x4dc>)
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f9ed 	bl	8003014 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0f5      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e3c <HAL_I2C_Mem_Read+0x4e0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	08db      	lsrs	r3, r3, #3
 8002c90:	4a6b      	ldr	r2, [pc, #428]	@ (8002e40 <HAL_I2C_Mem_Read+0x4e4>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0a1a      	lsrs	r2, r3, #8
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00da      	lsls	r2, r3, #3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d118      	bne.n	8002ce2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd2:	b662      	cpsie	i
}
 8002cd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0a6      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d1d9      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d32:	b662      	cpsie	i
}
 8002d34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d68:	e04e      	b.n	8002e08 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fab2 	bl	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e058      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d124      	bne.n	8002e08 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f47f ae88 	bne.w	8002b22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3728      	adds	r7, #40	@ 0x28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00010004 	.word	0x00010004
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	14f8b589 	.word	0x14f8b589

08002e44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	817b      	strh	r3, [r7, #10]
 8002e56:	460b      	mov	r3, r1
 8002e58:	813b      	strh	r3, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f8c2 	bl	8003014 <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea4:	d103      	bne.n	8002eae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e0aa      	b.n	8003008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ec0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	4952      	ldr	r1, [pc, #328]	@ (8003010 <I2C_RequestMemoryRead+0x1cc>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f91d 	bl	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e097      	b.n	8003008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9a8 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d107      	bne.n	8002f16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e076      	b.n	8003008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f20:	893b      	ldrh	r3, [r7, #8]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]
 8002f2a:	e021      	b.n	8002f70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f2c:	893b      	ldrh	r3, [r7, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	6a39      	ldr	r1, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f982 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d107      	bne.n	8002f62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e050      	b.n	8003008 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f66:	893b      	ldrh	r3, [r7, #8]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f72:	6a39      	ldr	r1, [r7, #32]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f967 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d107      	bne.n	8002f98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e035      	b.n	8003008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002faa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f82b 	bl	8003014 <I2C_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd2:	d103      	bne.n	8002fdc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e013      	b.n	8003008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fe0:	897b      	ldrh	r3, [r7, #10]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	6a3a      	ldr	r2, [r7, #32]
 8002ff4:	4906      	ldr	r1, [pc, #24]	@ (8003010 <I2C_RequestMemoryRead+0x1cc>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f886 	bl	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	00010002 	.word	0x00010002

08003014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003024:	e048      	b.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d044      	beq.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe ffe9 	bl	8002004 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d139      	bne.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10d      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0x56>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	e00c      	b.n	8003084 <I2C_WaitOnFlagUntilTimeout+0x70>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d116      	bne.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e023      	b.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d10d      	bne.n	80030de <I2C_WaitOnFlagUntilTimeout+0xca>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	43da      	mvns	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	e00c      	b.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d093      	beq.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003116:	e071      	b.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003126:	d123      	bne.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003136:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e067      	b.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d041      	beq.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	f7fe ff44 	bl	8002004 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	d302      	bcc.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d136      	bne.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10c      	bne.n	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	43da      	mvns	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	e00b      	b.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e021      	b.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10c      	bne.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	43da      	mvns	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e00b      	b.n	8003238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f af6d 	bne.w	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003254:	e034      	b.n	80032c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f89b 	bl	8003392 <I2C_IsAcknowledgeFailed>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e034      	b.n	80032d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d028      	beq.n	80032c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fe fec9 	bl	8002004 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11d      	bne.n	80032c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b80      	cmp	r3, #128	@ 0x80
 8003290:	d016      	beq.n	80032c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ca:	2b80      	cmp	r3, #128	@ 0x80
 80032cc:	d1c3      	bne.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e4:	e049      	b.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d119      	bne.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0210 	mvn.w	r2, #16
 80032fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e030      	b.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe fe6c 	bl	8002004 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11d      	bne.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003348:	2b40      	cmp	r3, #64	@ 0x40
 800334a:	d016      	beq.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d1ae      	bne.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a8:	d11b      	bne.n	80033e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e272      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8087 	beq.w	800351e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003410:	4b92      	ldr	r3, [pc, #584]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b04      	cmp	r3, #4
 800341a:	d00c      	beq.n	8003436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800341c:	4b8f      	ldr	r3, [pc, #572]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d112      	bne.n	800344e <HAL_RCC_OscConfig+0x5e>
 8003428:	4b8c      	ldr	r3, [pc, #560]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003434:	d10b      	bne.n	800344e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003436:	4b89      	ldr	r3, [pc, #548]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06c      	beq.n	800351c <HAL_RCC_OscConfig+0x12c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d168      	bne.n	800351c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e24c      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x76>
 8003458:	4b80      	ldr	r3, [pc, #512]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a7f      	ldr	r2, [pc, #508]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800345e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e02e      	b.n	80034c4 <HAL_RCC_OscConfig+0xd4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x98>
 800346e:	4b7b      	ldr	r3, [pc, #492]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7a      	ldr	r2, [pc, #488]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b78      	ldr	r3, [pc, #480]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a77      	ldr	r2, [pc, #476]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e01d      	b.n	80034c4 <HAL_RCC_OscConfig+0xd4>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0xbc>
 8003492:	4b72      	ldr	r3, [pc, #456]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a71      	ldr	r2, [pc, #452]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b6f      	ldr	r3, [pc, #444]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6e      	ldr	r2, [pc, #440]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0xd4>
 80034ac:	4b6b      	ldr	r3, [pc, #428]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6a      	ldr	r2, [pc, #424]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b68      	ldr	r3, [pc, #416]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a67      	ldr	r2, [pc, #412]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fd9a 	bl	8002004 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fd96 	bl	8002004 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e200      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b5d      	ldr	r3, [pc, #372]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe4>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fd86 	bl	8002004 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe fd82 	bl	8002004 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	@ 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1ec      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	4b53      	ldr	r3, [pc, #332]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x10c>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d063      	beq.n	80035f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800352a:	4b4c      	ldr	r3, [pc, #304]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003536:	4b49      	ldr	r3, [pc, #292]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b08      	cmp	r3, #8
 8003540:	d11c      	bne.n	800357c <HAL_RCC_OscConfig+0x18c>
 8003542:	4b46      	ldr	r3, [pc, #280]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d116      	bne.n	800357c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	4b43      	ldr	r3, [pc, #268]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_RCC_OscConfig+0x176>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e1c0      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003566:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4939      	ldr	r1, [pc, #228]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	e03a      	b.n	80035f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003584:	4b36      	ldr	r3, [pc, #216]	@ (8003660 <HAL_RCC_OscConfig+0x270>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fe fd3b 	bl	8002004 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003592:	f7fe fd37 	bl	8002004 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e1a1      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	4b2d      	ldr	r3, [pc, #180]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4927      	ldr	r1, [pc, #156]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]
 80035c4:	e015      	b.n	80035f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c6:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <HAL_RCC_OscConfig+0x270>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fd1a 	bl	8002004 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d4:	f7fe fd16 	bl	8002004 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e180      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d03a      	beq.n	8003674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d019      	beq.n	800363a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003606:	4b17      	ldr	r3, [pc, #92]	@ (8003664 <HAL_RCC_OscConfig+0x274>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360c:	f7fe fcfa 	bl	8002004 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003614:	f7fe fcf6 	bl	8002004 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e160      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <HAL_RCC_OscConfig+0x26c>)
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003632:	2001      	movs	r0, #1
 8003634:	f000 fafe 	bl	8003c34 <RCC_Delay>
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_RCC_OscConfig+0x274>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7fe fce0 	bl	8002004 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003646:	e00f      	b.n	8003668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003648:	f7fe fcdc 	bl	8002004 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d908      	bls.n	8003668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e146      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	42420000 	.word	0x42420000
 8003664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e9      	bne.n	8003648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a6 	beq.w	80037ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b8b      	ldr	r3, [pc, #556]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b88      	ldr	r3, [pc, #544]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4a87      	ldr	r2, [pc, #540]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369c:	61d3      	str	r3, [r2, #28]
 800369e:	4b85      	ldr	r3, [pc, #532]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b82      	ldr	r3, [pc, #520]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d118      	bne.n	80036ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ba:	4b7f      	ldr	r3, [pc, #508]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7e      	ldr	r2, [pc, #504]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fc9d 	bl	8002004 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fe fc99 	bl	8002004 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b64      	cmp	r3, #100	@ 0x64
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e103      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	4b75      	ldr	r3, [pc, #468]	@ (80038b8 <HAL_RCC_OscConfig+0x4c8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x312>
 80036f4:	4b6f      	ldr	r3, [pc, #444]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a6e      	ldr	r2, [pc, #440]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	e02d      	b.n	800375e <HAL_RCC_OscConfig+0x36e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x334>
 800370a:	4b6a      	ldr	r3, [pc, #424]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a69      	ldr	r2, [pc, #420]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6213      	str	r3, [r2, #32]
 8003716:	4b67      	ldr	r3, [pc, #412]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a66      	ldr	r2, [pc, #408]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6213      	str	r3, [r2, #32]
 8003722:	e01c      	b.n	800375e <HAL_RCC_OscConfig+0x36e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x356>
 800372c:	4b61      	ldr	r3, [pc, #388]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4a60      	ldr	r2, [pc, #384]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6213      	str	r3, [r2, #32]
 8003738:	4b5e      	ldr	r3, [pc, #376]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4a5d      	ldr	r2, [pc, #372]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6213      	str	r3, [r2, #32]
 8003744:	e00b      	b.n	800375e <HAL_RCC_OscConfig+0x36e>
 8003746:	4b5b      	ldr	r3, [pc, #364]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	4a5a      	ldr	r2, [pc, #360]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6213      	str	r3, [r2, #32]
 8003752:	4b58      	ldr	r3, [pc, #352]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a57      	ldr	r2, [pc, #348]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe fc4d 	bl	8002004 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe fc49 	bl	8002004 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0b1      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCC_OscConfig+0x37e>
 8003790:	e014      	b.n	80037bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7fe fc37 	bl	8002004 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe fc33 	bl	8002004 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e09b      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b3c      	ldr	r3, [pc, #240]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4a3b      	ldr	r2, [pc, #236]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8087 	beq.w	80038e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d8:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d061      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d146      	bne.n	800387a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b33      	ldr	r3, [pc, #204]	@ (80038bc <HAL_RCC_OscConfig+0x4cc>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fe fc07 	bl	8002004 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fe fc03 	bl	8002004 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e06d      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380c:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003820:	d108      	bne.n	8003834 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003822:	4b24      	ldr	r3, [pc, #144]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4921      	ldr	r1, [pc, #132]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003834:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a19      	ldr	r1, [r3, #32]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	430b      	orrs	r3, r1
 8003846:	491b      	ldr	r1, [pc, #108]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x4cc>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fbd7 	bl	8002004 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fbd3 	bl	8002004 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e03d      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800386c:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x46a>
 8003878:	e035      	b.n	80038e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <HAL_RCC_OscConfig+0x4cc>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fbc0 	bl	8002004 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fbbc 	bl	8002004 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e026      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x498>
 80038a6:	e01e      	b.n	80038e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e019      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
 80038bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_OscConfig+0x500>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0d0      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d910      	bls.n	8003938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b67      	ldr	r3, [pc, #412]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	4965      	ldr	r1, [pc, #404]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b63      	ldr	r3, [pc, #396]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0b8      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003950:	4b59      	ldr	r3, [pc, #356]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a58      	ldr	r2, [pc, #352]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800395a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003968:	4b53      	ldr	r3, [pc, #332]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a52      	ldr	r2, [pc, #328]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	494d      	ldr	r1, [pc, #308]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d040      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d115      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e07f      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b41      	ldr	r3, [pc, #260]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e073      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e06b      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4936      	ldr	r1, [pc, #216]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fe fb0e 	bl	8002004 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fe fb0a 	bl	8002004 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e053      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d210      	bcs.n	8003a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4922      	ldr	r1, [pc, #136]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e032      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a50:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4916      	ldr	r1, [pc, #88]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	490e      	ldr	r1, [pc, #56]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a82:	f000 f821 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	490a      	ldr	r1, [pc, #40]	@ (8003abc <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	5ccb      	ldrb	r3, [r1, r3]
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8003a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe f8f8 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	0800df7c 	.word	0x0800df7c
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	20000004 	.word	0x20000004

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x30>
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x36>
 8003af6:	e027      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003afa:	613b      	str	r3, [r7, #16]
      break;
 8003afc:	e027      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	0c9b      	lsrs	r3, r3, #18
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d010      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b16:	4b11      	ldr	r3, [pc, #68]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	0c5b      	lsrs	r3, r3, #17
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	4a11      	ldr	r2, [pc, #68]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a0d      	ldr	r2, [pc, #52]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b2a:	fb03 f202 	mul.w	r2, r3, r2
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e004      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	613b      	str	r3, [r7, #16]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b4a:	613b      	str	r3, [r7, #16]
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	693b      	ldr	r3, [r7, #16]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	007a1200 	.word	0x007a1200
 8003b64:	0800df94 	.word	0x0800df94
 8003b68:	0800dfa4 	.word	0x0800dfa4
 8003b6c:	003d0900 	.word	0x003d0900

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b02      	ldr	r3, [pc, #8]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000000 	.word	0x20000000

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff2 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	0800df8c 	.word	0x0800df8c

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb0:	f7ff ffde 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0adb      	lsrs	r3, r3, #11
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	0800df8c 	.word	0x0800df8c

08003bd4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	220f      	movs	r2, #15
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be4:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c08:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_GetClockConfig+0x5c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40022000 	.word	0x40022000

08003c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <RCC_Delay+0x34>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <RCC_Delay+0x38>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a5b      	lsrs	r3, r3, #9
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c50:	bf00      	nop
  }
  while (Delay --);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	60fa      	str	r2, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <RCC_Delay+0x1c>
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e041      	b.n	8003d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd ff3c 	bl	8001b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f000 fc88 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d001      	beq.n	8003d28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e032      	b.n	8003d8e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a18      	ldr	r2, [pc, #96]	@ (8003d98 <HAL_TIM_Base_Start+0x88>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00e      	beq.n	8003d58 <HAL_TIM_Base_Start+0x48>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d42:	d009      	beq.n	8003d58 <HAL_TIM_Base_Start+0x48>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a14      	ldr	r2, [pc, #80]	@ (8003d9c <HAL_TIM_Base_Start+0x8c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <HAL_TIM_Base_Start+0x48>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a13      	ldr	r2, [pc, #76]	@ (8003da0 <HAL_TIM_Base_Start+0x90>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d111      	bne.n	8003d7c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d010      	beq.n	8003d8c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7a:	e007      	b.n	8003d8c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800

08003da4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10f      	bne.n	8003ddc <HAL_TIM_Base_Stop+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_Base_Stop+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d001      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e03a      	b.n	8003e7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <HAL_TIM_Base_Start_IT+0x98>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x58>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e32:	d009      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x58>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a14      	ldr	r2, [pc, #80]	@ (8003e8c <HAL_TIM_Base_Start_IT+0x9c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x58>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a13      	ldr	r2, [pc, #76]	@ (8003e90 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d010      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6a:	e007      	b.n	8003e7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800

08003e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e041      	b.n	8003f2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f839 	bl	8003f32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 fb76 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start+0x24>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e022      	b.n	8003fae <HAL_TIM_PWM_Start+0x6a>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d109      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x3e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e015      	b.n	8003fae <HAL_TIM_PWM_Start+0x6a>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d109      	bne.n	8003f9c <HAL_TIM_PWM_Start+0x58>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e008      	b.n	8003fae <HAL_TIM_PWM_Start+0x6a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e05e      	b.n	8004074 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0x82>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc4:	e013      	b.n	8003fee <HAL_TIM_PWM_Start+0xaa>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x92>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd4:	e00b      	b.n	8003fee <HAL_TIM_PWM_Start+0xaa>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d104      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0xa2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe4:	e003      	b.n	8003fee <HAL_TIM_PWM_Start+0xaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd70 	bl	8004adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <HAL_TIM_PWM_Start+0x138>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d107      	bne.n	8004016 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a18      	ldr	r2, [pc, #96]	@ (800407c <HAL_TIM_PWM_Start+0x138>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_TIM_PWM_Start+0xfa>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004028:	d009      	beq.n	800403e <HAL_TIM_PWM_Start+0xfa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <HAL_TIM_PWM_Start+0x13c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIM_PWM_Start+0xfa>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a12      	ldr	r2, [pc, #72]	@ (8004084 <HAL_TIM_PWM_Start+0x140>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b06      	cmp	r3, #6
 800404e:	d010      	beq.n	8004072 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	e007      	b.n	8004072 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800

08004088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d020      	beq.n	80040ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0202 	mvn.w	r2, #2
 80040bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa5a 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa4d 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fa5c 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01b      	beq.n	8004138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0204 	mvn.w	r2, #4
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa34 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa27 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fa36 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d020      	beq.n	8004184 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa0e 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa01 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fa10 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2208      	movs	r2, #8
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9e8 	bl	800458c <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f9db 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f9ea 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0201 	mvn.w	r2, #1
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd fc04 	bl	80019fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fced 	bl	8004bf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f9ba 	bl	80045b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0220 	mvn.w	r2, #32
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fcc0 	bl	8004be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004282:	2302      	movs	r3, #2
 8004284:	e0ae      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f200 809f 	bhi.w	80043d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004296:	a201      	add	r2, pc, #4	@ (adr r2, 800429c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080043d5 	.word	0x080043d5
 80042a4:	080043d5 	.word	0x080043d5
 80042a8:	080043d5 	.word	0x080043d5
 80042ac:	08004311 	.word	0x08004311
 80042b0:	080043d5 	.word	0x080043d5
 80042b4:	080043d5 	.word	0x080043d5
 80042b8:	080043d5 	.word	0x080043d5
 80042bc:	08004353 	.word	0x08004353
 80042c0:	080043d5 	.word	0x080043d5
 80042c4:	080043d5 	.word	0x080043d5
 80042c8:	080043d5 	.word	0x080043d5
 80042cc:	08004393 	.word	0x08004393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f9e2 	bl	80046a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0208 	orr.w	r2, r2, #8
 80042ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0204 	bic.w	r2, r2, #4
 80042fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	619a      	str	r2, [r3, #24]
      break;
 800430e:	e064      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fa28 	bl	800476c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800432a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6999      	ldr	r1, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	021a      	lsls	r2, r3, #8
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	619a      	str	r2, [r3, #24]
      break;
 8004350:	e043      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fa71 	bl	8004840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0208 	orr.w	r2, r2, #8
 800436c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0204 	bic.w	r2, r2, #4
 800437c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69d9      	ldr	r1, [r3, #28]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	61da      	str	r2, [r3, #28]
      break;
 8004390:	e023      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fabb 	bl	8004914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69d9      	ldr	r1, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	021a      	lsls	r2, r3, #8
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	61da      	str	r2, [r3, #28]
      break;
 80043d2:	e002      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
      break;
 80043d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIM_ConfigClockSource+0x1c>
 8004404:	2302      	movs	r3, #2
 8004406:	e0b4      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x186>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800442e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004440:	d03e      	beq.n	80044c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004446:	f200 8087 	bhi.w	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444e:	f000 8086 	beq.w	800455e <HAL_TIM_ConfigClockSource+0x172>
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004456:	d87f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b70      	cmp	r3, #112	@ 0x70
 800445a:	d01a      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0xa6>
 800445c:	2b70      	cmp	r3, #112	@ 0x70
 800445e:	d87b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b60      	cmp	r3, #96	@ 0x60
 8004462:	d050      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x11a>
 8004464:	2b60      	cmp	r3, #96	@ 0x60
 8004466:	d877      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b50      	cmp	r3, #80	@ 0x50
 800446a:	d03c      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0xfa>
 800446c:	2b50      	cmp	r3, #80	@ 0x50
 800446e:	d873      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d058      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x13a>
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d86f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004478:	2b30      	cmp	r3, #48	@ 0x30
 800447a:	d064      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 800447c:	2b30      	cmp	r3, #48	@ 0x30
 800447e:	d86b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d060      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 8004484:	2b20      	cmp	r3, #32
 8004486:	d867      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05c      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 800448c:	2b10      	cmp	r3, #16
 800448e:	d05a      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x15a>
 8004490:	e062      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a2:	f000 fafc 	bl	8004a9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	609a      	str	r2, [r3, #8]
      break;
 80044be:	e04f      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044d0:	f000 fae5 	bl	8004a9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044e2:	609a      	str	r2, [r3, #8]
      break;
 80044e4:	e03c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f2:	461a      	mov	r2, r3
 80044f4:	f000 fa5c 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2150      	movs	r1, #80	@ 0x50
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fab3 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004504:	e02c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004512:	461a      	mov	r2, r3
 8004514:	f000 fa7a 	bl	8004a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2160      	movs	r1, #96	@ 0x60
 800451e:	4618      	mov	r0, r3
 8004520:	f000 faa3 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004524:	e01c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004532:	461a      	mov	r2, r3
 8004534:	f000 fa3c 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2140      	movs	r1, #64	@ 0x40
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa93 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004544:	e00c      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f000 fa8a 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004556:	e003      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      break;
 800455c:	e000      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800455e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
	...

080045c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004694 <TIM_Base_SetConfig+0xd0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004698 <TIM_Base_SetConfig+0xd4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a2b      	ldr	r2, [pc, #172]	@ (800469c <TIM_Base_SetConfig+0xd8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a22      	ldr	r2, [pc, #136]	@ (8004694 <TIM_Base_SetConfig+0xd0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1f      	ldr	r2, [pc, #124]	@ (8004698 <TIM_Base_SetConfig+0xd4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1e      	ldr	r2, [pc, #120]	@ (800469c <TIM_Base_SetConfig+0xd8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a0d      	ldr	r2, [pc, #52]	@ (8004694 <TIM_Base_SetConfig+0xd0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f023 0201 	bic.w	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	611a      	str	r2, [r3, #16]
  }
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800

080046a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f023 0201 	bic.w	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f023 0302 	bic.w	r3, r3, #2
 80046e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004768 <TIM_OC1_SetConfig+0xc8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10c      	bne.n	8004716 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0308 	bic.w	r3, r3, #8
 8004702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a13      	ldr	r2, [pc, #76]	@ (8004768 <TIM_OC1_SetConfig+0xc8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d111      	bne.n	8004742 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00

0800476c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f023 0210 	bic.w	r2, r3, #16
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800479a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0320 	bic.w	r3, r3, #32
 80047b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1d      	ldr	r2, [pc, #116]	@ (800483c <TIM_OC2_SetConfig+0xd0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10d      	bne.n	80047e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a14      	ldr	r2, [pc, #80]	@ (800483c <TIM_OC2_SetConfig+0xd0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d113      	bne.n	8004818 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr
 800483c:	40012c00 	.word	0x40012c00

08004840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <TIM_OC3_SetConfig+0xd0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10d      	bne.n	80048ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <TIM_OC3_SetConfig+0xd0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d113      	bne.n	80048ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40012c00 	.word	0x40012c00

08004914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800495e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	031b      	lsls	r3, r3, #12
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0f      	ldr	r2, [pc, #60]	@ (80049ac <TIM_OC4_SetConfig+0x98>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d109      	bne.n	8004988 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800497a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	019b      	lsls	r3, r3, #6
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0210 	bic.w	r2, r3, #16
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	031b      	lsls	r3, r3, #12
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f043 0307 	orr.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	021a      	lsls	r2, r3, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	609a      	str	r2, [r3, #8]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	2201      	movs	r2, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1a      	ldr	r2, [r3, #32]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	401a      	ands	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1a      	ldr	r2, [r3, #32]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	431a      	orrs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e046      	b.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	@ (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b88:	d009      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a12      	ldr	r2, [pc, #72]	@ (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a10      	ldr	r2, [pc, #64]	@ (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800

08004be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e042      	b.n	8004c9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc ffe0 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2224      	movs	r2, #36	@ 0x24
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fdb7 	bl	80057bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	@ 0x28
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d175      	bne.n	8004db0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_UART_Transmit+0x2c>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e06e      	b.n	8004db2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2221      	movs	r2, #33	@ 0x21
 8004cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fd f98f 	bl	8002004 <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfc:	d108      	bne.n	8004d10 <HAL_UART_Transmit+0x6c>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e003      	b.n	8004d18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d18:	e02e      	b.n	8004d78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2180      	movs	r1, #128	@ 0x80
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fb1c 	bl	8005362 <UART_WaitOnFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e03a      	b.n	8004db2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	3302      	adds	r3, #2
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e007      	b.n	8004d6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3301      	adds	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1cb      	bne.n	8004d1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2140      	movs	r1, #64	@ 0x40
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fae8 	bl	8005362 <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d112      	bne.n	8004dfa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Receive_IT+0x26>
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e00b      	b.n	8004dfc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	461a      	mov	r2, r3
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fb0f 	bl	8005414 <UART_Start_Receive_IT>
 8004df6:	4603      	mov	r3, r0
 8004df8:	e000      	b.n	8004dfc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b0ba      	sub	sp, #232	@ 0xe8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10f      	bne.n	8004e6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_UART_IRQHandler+0x66>
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fbec 	bl	8005640 <UART_Receive_IT>
      return;
 8004e68:	e25b      	b.n	8005322 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80de 	beq.w	8005030 <HAL_UART_IRQHandler+0x22c>
 8004e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80d1 	beq.w	8005030 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xae>
 8004e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_UART_IRQHandler+0xd2>
 8004ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ece:	f043 0202 	orr.w	r2, r3, #2
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_UART_IRQHandler+0xf6>
 8004ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	f043 0204 	orr.w	r2, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d011      	beq.n	8004f2a <HAL_UART_IRQHandler+0x126>
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d105      	bne.n	8004f1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	f043 0208 	orr.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 81f2 	beq.w	8005318 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_UART_IRQHandler+0x14e>
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb77 	bl	8005640 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <HAL_UART_IRQHandler+0x17a>
 8004f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d04f      	beq.n	800501e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa81 	bl	8005486 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d041      	beq.n	8005016 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3314      	adds	r3, #20
 8004f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3314      	adds	r3, #20
 8004fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1d9      	bne.n	8004f92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d013      	beq.n	800500e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fea:	4a7e      	ldr	r2, [pc, #504]	@ (80051e4 <HAL_UART_IRQHandler+0x3e0>)
 8004fec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd f92a 	bl	800224c <HAL_DMA_Abort_IT>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005008:	4610      	mov	r0, r2
 800500a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	e00e      	b.n	800502c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f993 	bl	800533a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e00a      	b.n	800502c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f98f 	bl	800533a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e006      	b.n	800502c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f98b 	bl	800533a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800502a:	e175      	b.n	8005318 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	bf00      	nop
    return;
 800502e:	e173      	b.n	8005318 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 814f 	bne.w	80052d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8148 	beq.w	80052d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8141 	beq.w	80052d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005056:	2300      	movs	r3, #0
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80b6 	beq.w	80051e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8145 	beq.w	800531c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800509a:	429a      	cmp	r2, r3
 800509c:	f080 813e 	bcs.w	800531c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	f000 8088 	beq.w	80051c4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050e0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1d9      	bne.n	80050b4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005110:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3314      	adds	r3, #20
 8005120:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005124:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005128:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800512c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005136:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e1      	bne.n	8005100 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3314      	adds	r3, #20
 8005142:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800514c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800514e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005160:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005162:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005166:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800516e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e3      	bne.n	800513c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005194:	f023 0310 	bic.w	r3, r3, #16
 8005198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e3      	bne.n	8005182 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fd f809 	bl	80021d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8b6 	bl	800534c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051e0:	e09c      	b.n	800531c <HAL_UART_IRQHandler+0x518>
 80051e2:	bf00      	nop
 80051e4:	0800554b 	.word	0x0800554b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 808e 	beq.w	8005320 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8089 	beq.w	8005320 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800521e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005224:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	330c      	adds	r3, #12
 800522e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005232:	647a      	str	r2, [r7, #68]	@ 0x44
 8005234:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e3      	bne.n	800520e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3314      	adds	r3, #20
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	623b      	str	r3, [r7, #32]
   return(result);
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800526a:	633a      	str	r2, [r7, #48]	@ 0x30
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e3      	bne.n	8005246 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60fb      	str	r3, [r7, #12]
   return(result);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0310 	bic.w	r3, r3, #16
 80052a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	69b9      	ldr	r1, [r7, #24]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	617b      	str	r3, [r7, #20]
   return(result);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e3      	bne.n	800528c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f83b 	bl	800534c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052d6:	e023      	b.n	8005320 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d009      	beq.n	80052f8 <HAL_UART_IRQHandler+0x4f4>
 80052e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f93e 	bl	8005572 <UART_Transmit_IT>
    return;
 80052f6:	e014      	b.n	8005322 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <HAL_UART_IRQHandler+0x51e>
 8005304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f97d 	bl	8005610 <UART_EndTransmit_IT>
    return;
 8005316:	e004      	b.n	8005322 <HAL_UART_IRQHandler+0x51e>
    return;
 8005318:	bf00      	nop
 800531a:	e002      	b.n	8005322 <HAL_UART_IRQHandler+0x51e>
      return;
 800531c:	bf00      	nop
 800531e:	e000      	b.n	8005322 <HAL_UART_IRQHandler+0x51e>
      return;
 8005320:	bf00      	nop
  }
}
 8005322:	37e8      	adds	r7, #232	@ 0xe8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr

0800533a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005372:	e03b      	b.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d037      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537c:	f7fc fe42 	bl	8002004 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	429a      	cmp	r2, r3
 800538a:	d302      	bcc.n	8005392 <UART_WaitOnFlagUntilTimeout+0x30>
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e03a      	b.n	800540c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d023      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d020      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d01d      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d116      	bne.n	80053ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f856 	bl	8005486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2208      	movs	r2, #8
 80053de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e00f      	b.n	800540c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	429a      	cmp	r2, r3
 8005408:	d0b4      	beq.n	8005374 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	88fa      	ldrh	r2, [r7, #6]
 8005432:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2222      	movs	r2, #34	@ 0x22
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005458:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695a      	ldr	r2, [r3, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0220 	orr.w	r2, r2, #32
 8005478:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005486:	b480      	push	{r7}
 8005488:	b095      	sub	sp, #84	@ 0x54
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80054b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3314      	adds	r3, #20
 80054c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3314      	adds	r3, #20
 80054e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d119      	bne.n	8005532 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	60bb      	str	r3, [r7, #8]
   return(result);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f023 0310 	bic.w	r3, r3, #16
 8005514:	647b      	str	r3, [r7, #68]	@ 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800551e:	61ba      	str	r2, [r7, #24]
 8005520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6979      	ldr	r1, [r7, #20]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	613b      	str	r3, [r7, #16]
   return(result);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005540:	bf00      	nop
 8005542:	3754      	adds	r7, #84	@ 0x54
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff fee8 	bl	800533a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b21      	cmp	r3, #33	@ 0x21
 8005584:	d13e      	bne.n	8005604 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558e:	d114      	bne.n	80055ba <UART_Transmit_IT+0x48>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d110      	bne.n	80055ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]
 80055b8:	e008      	b.n	80055cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	1c59      	adds	r1, r3, #1
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6211      	str	r1, [r2, #32]
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4619      	mov	r1, r3
 80055da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10f      	bne.n	8005600 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005626:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fe79 	bl	8005328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08c      	sub	sp, #48	@ 0x30
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b22      	cmp	r3, #34	@ 0x22
 8005652:	f040 80ae 	bne.w	80057b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565e:	d117      	bne.n	8005690 <UART_Receive_IT+0x50>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d113      	bne.n	8005690 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	b29a      	uxth	r2, r3
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	629a      	str	r2, [r3, #40]	@ 0x28
 800568e:	e026      	b.n	80056de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a2:	d007      	beq.n	80056b4 <UART_Receive_IT+0x74>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <UART_Receive_IT+0x82>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e008      	b.n	80056d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4619      	mov	r1, r3
 80056ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d15d      	bne.n	80057ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0220 	bic.w	r2, r2, #32
 8005700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005710:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	d135      	bne.n	80057a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575e:	623a      	str	r2, [r7, #32]
 8005760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	69f9      	ldr	r1, [r7, #28]
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	61bb      	str	r3, [r7, #24]
   return(result);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d10a      	bne.n	8005796 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fdd5 	bl	800534c <HAL_UARTEx_RxEventCallback>
 80057a2:	e002      	b.n	80057aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fb fc89 	bl	80010bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e002      	b.n	80057b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3730      	adds	r7, #48	@ 0x30
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80057f6:	f023 030c 	bic.w	r3, r3, #12
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	430b      	orrs	r3, r1
 8005802:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2c      	ldr	r2, [pc, #176]	@ (80058d0 <UART_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d103      	bne.n	800582c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fe f9c2 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	e002      	b.n	8005832 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fe f9aa 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8005830:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009a      	lsls	r2, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <UART_SetConfig+0x118>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	0119      	lsls	r1, r3, #4
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009a      	lsls	r2, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	fbb2 f2f3 	udiv	r2, r2, r3
 8005868:	4b1a      	ldr	r3, [pc, #104]	@ (80058d4 <UART_SetConfig+0x118>)
 800586a:	fba3 0302 	umull	r0, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2064      	movs	r0, #100	@ 0x64
 8005872:	fb00 f303 	mul.w	r3, r0, r3
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	3332      	adds	r3, #50	@ 0x32
 800587c:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <UART_SetConfig+0x118>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005888:	4419      	add	r1, r3
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009a      	lsls	r2, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	fbb2 f2f3 	udiv	r2, r2, r3
 80058a0:	4b0c      	ldr	r3, [pc, #48]	@ (80058d4 <UART_SetConfig+0x118>)
 80058a2:	fba3 0302 	umull	r0, r3, r3, r2
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	2064      	movs	r0, #100	@ 0x64
 80058aa:	fb00 f303 	mul.w	r3, r0, r3
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	3332      	adds	r3, #50	@ 0x32
 80058b4:	4a07      	ldr	r2, [pc, #28]	@ (80058d4 <UART_SetConfig+0x118>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	440a      	add	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40013800 	.word	0x40013800
 80058d4:	51eb851f 	.word	0x51eb851f

080058d8 <Delay_us>:

HCSR04_State hc04_state = HCSR04_IDLE_STATE;

float Distance;

void Delay_us(uint16_t us){
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	80fb      	strh	r3, [r7, #6]
	htim1.Instance -> CNT = 0;
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <Delay_us+0x34>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	625a      	str	r2, [r3, #36]	@ 0x24
	//TIM2 -> CNT = 0; (Cach 2)
	HAL_TIM_Base_Start(&htim1);
 80058ea:	4808      	ldr	r0, [pc, #32]	@ (800590c <Delay_us+0x34>)
 80058ec:	f7fe fa10 	bl	8003d10 <HAL_TIM_Base_Start>
	while (htim1.Instance -> CNT < us);
 80058f0:	bf00      	nop
 80058f2:	4b06      	ldr	r3, [pc, #24]	@ (800590c <Delay_us+0x34>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3f9      	bcc.n	80058f2 <Delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim1);
 80058fe:	4803      	ldr	r0, [pc, #12]	@ (800590c <Delay_us+0x34>)
 8005900:	f7fe fa50 	bl	8003da4 <HAL_TIM_Base_Stop>
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000248 	.word	0x20000248

08005910 <pulseGPIO>:
	for (int i = 0;i<ms;i++){
		Delay_us(1000);
	}
}

void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 800591c:	887b      	ldrh	r3, [r7, #2]
 800591e:	2201      	movs	r2, #1
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc fea5 	bl	8002672 <HAL_GPIO_WritePin>
	Delay_us(20);
 8005928:	2014      	movs	r0, #20
 800592a:	f7ff ffd5 	bl	80058d8 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	2200      	movs	r2, #0
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7fc fe9c 	bl	8002672 <HAL_GPIO_WritePin>
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <HCSR04_Start>:

void HCSR04_Start(){
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	if (hc04_state == HCSR04_IDLE_STATE){
 8005948:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HCSR04_Start+0x20>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HCSR04_Start+0x1c>
	pulseGPIO(GPIOA, GPIO_PIN_8);
 8005950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005954:	4804      	ldr	r0, [pc, #16]	@ (8005968 <HCSR04_Start+0x24>)
 8005956:	f7ff ffdb 	bl	8005910 <pulseGPIO>
	hc04_state = HCSR04_WAIT_RISING_STATE;
 800595a:	4b02      	ldr	r3, [pc, #8]	@ (8005964 <HCSR04_Start+0x20>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
	}
}
 8005960:	bf00      	nop
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000424 	.word	0x20000424
 8005968:	40010800 	.word	0x40010800

0800596c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	80fb      	strh	r3, [r7, #6]
	switch (hc04_state) {
 8005976:	4b1e      	ldr	r3, [pc, #120]	@ (80059f0 <HAL_GPIO_EXTI_Callback+0x84>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d002      	beq.n	8005984 <HAL_GPIO_EXTI_Callback+0x18>
 800597e:	2b02      	cmp	r3, #2
 8005980:	d017      	beq.n	80059b2 <HAL_GPIO_EXTI_Callback+0x46>
			}else {
				hc04_state = HCSR04_IDLE_STATE;
			}
			break;
		default:
			break;
 8005982:	e02b      	b.n	80059dc <HAL_GPIO_EXTI_Callback+0x70>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 8005984:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005988:	481a      	ldr	r0, [pc, #104]	@ (80059f4 <HAL_GPIO_EXTI_Callback+0x88>)
 800598a:	f7fc fe5b 	bl	8002644 <HAL_GPIO_ReadPin>
 800598e:	4603      	mov	r3, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10a      	bne.n	80059aa <HAL_GPIO_EXTI_Callback+0x3e>
			htim1.Instance -> CNT = 0;
 8005994:	4b18      	ldr	r3, [pc, #96]	@ (80059f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	625a      	str	r2, [r3, #36]	@ 0x24
			hc04_state = HCSRO4_WAIT_FALLING_STATE;
 800599c:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <HAL_GPIO_EXTI_Callback+0x84>)
 800599e:	2202      	movs	r2, #2
 80059a0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim1);
 80059a2:	4815      	ldr	r0, [pc, #84]	@ (80059f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80059a4:	f7fe f9b4 	bl	8003d10 <HAL_TIM_Base_Start>
			break;
 80059a8:	e018      	b.n	80059dc <HAL_GPIO_EXTI_Callback+0x70>
				hc04_state = HCSR04_IDLE_STATE;
 80059aa:	4b11      	ldr	r3, [pc, #68]	@ (80059f0 <HAL_GPIO_EXTI_Callback+0x84>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
			break;
 80059b0:	e014      	b.n	80059dc <HAL_GPIO_EXTI_Callback+0x70>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){
 80059b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80059b6:	480f      	ldr	r0, [pc, #60]	@ (80059f4 <HAL_GPIO_EXTI_Callback+0x88>)
 80059b8:	f7fc fe44 	bl	8002644 <HAL_GPIO_ReadPin>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <HAL_GPIO_EXTI_Callback+0x68>
			HAL_TIM_Base_Stop(&htim1);
 80059c2:	480d      	ldr	r0, [pc, #52]	@ (80059f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80059c4:	f7fe f9ee 	bl	8003da4 <HAL_TIM_Base_Stop>
			hc04_state = HCSR04_COMPLETE_STATE;
 80059c8:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <HAL_GPIO_EXTI_Callback+0x84>)
 80059ca:	2203      	movs	r2, #3
 80059cc:	701a      	strb	r2, [r3, #0]
			HC04_Handle();
 80059ce:	f000 f83f 	bl	8005a50 <HC04_Handle>
			break;
 80059d2:	e002      	b.n	80059da <HAL_GPIO_EXTI_Callback+0x6e>
				hc04_state = HCSR04_IDLE_STATE;
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <HAL_GPIO_EXTI_Callback+0x84>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
			break;
 80059da:	bf00      	nop
	}
		count1 ++;
 80059dc:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <HAL_GPIO_EXTI_Callback+0x90>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a06      	ldr	r2, [pc, #24]	@ (80059fc <HAL_GPIO_EXTI_Callback+0x90>)
 80059e4:	6013      	str	r3, [r2, #0]
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000424 	.word	0x20000424
 80059f4:	40010c00 	.word	0x40010c00
 80059f8:	20000248 	.word	0x20000248
 80059fc:	20000420 	.word	0x20000420

08005a00 <HC04_Complete_Callback>:

void HC04_Complete_Callback(float Distance){
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	//Dieu khien dong co.
	//Hien thi len LCD.
	osSemaphoreAcquire(Sem2_UARTHandle, osWaitForever);
 8005a08:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <HC04_Complete_Callback+0x40>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fb29 	bl	8006068 <osSemaphoreAcquire>
	printf("Distance: %f\n", Distance);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fa fd06 	bl	8000428 <__aeabi_f2d>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4808      	ldr	r0, [pc, #32]	@ (8005a44 <HC04_Complete_Callback+0x44>)
 8005a22:	f004 fcfb 	bl	800a41c <iprintf>
	osSemaphoreRelease(Sem2_UARTHandle);
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <HC04_Complete_Callback+0x40>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb6e 	bl	800610c <osSemaphoreRelease>
	hc04_state = HCSR04_IDLE_STATE;
 8005a30:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <HC04_Complete_Callback+0x48>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000334 	.word	0x20000334
 8005a44:	0800de84 	.word	0x0800de84
 8005a48:	20000424 	.word	0x20000424
 8005a4c:	00000000 	.word	0x00000000

08005a50 <HC04_Handle>:

void HC04_Handle(){
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
	if (hc04_state == HCSR04_COMPLETE_STATE){
 8005a54:	4b12      	ldr	r3, [pc, #72]	@ (8005aa0 <HC04_Handle+0x50>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d118      	bne.n	8005a8e <HC04_Handle+0x3e>
		//Tinh toan khoang cach
		Distance = 0.017 * htim1.Instance->CNT;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	@ (8005aa4 <HC04_Handle+0x54>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fa fcbe 	bl	80003e4 <__aeabi_ui2d>
 8005a68:	a30b      	add	r3, pc, #44	@ (adr r3, 8005a98 <HC04_Handle+0x48>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fd33 	bl	80004d8 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4610      	mov	r0, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7fb f825 	bl	8000ac8 <__aeabi_d2f>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4a09      	ldr	r2, [pc, #36]	@ (8005aa8 <HC04_Handle+0x58>)
 8005a82:	6013      	str	r3, [r2, #0]
		HC04_Complete_Callback(Distance);
 8005a84:	4b08      	ldr	r3, [pc, #32]	@ (8005aa8 <HC04_Handle+0x58>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ffb9 	bl	8005a00 <HC04_Complete_Callback>
	}
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	f3af 8000 	nop.w
 8005a98:	b020c49c 	.word	0xb020c49c
 8005a9c:	3f916872 	.word	0x3f916872
 8005aa0:	20000424 	.word	0x20000424
 8005aa4:	20000248 	.word	0x20000248
 8005aa8:	20000428 	.word	0x20000428

08005aac <MPU9250_Read_Accel_Gyro>:
	MPU_Write_Register(ACCEL_CONFIG, 0x00);
	MPU_Write_Register(GYRO_CONFIG,  0x00);
}

//Đọc dữ liệu
void MPU9250_Read_Accel_Gyro(int16_t *accel, int16_t *gyro) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	@ 0x28
 8005ab0:	af04      	add	r7, sp, #16
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H, 1, data, 14, 100);
 8005ab6:	2364      	movs	r3, #100	@ 0x64
 8005ab8:	9302      	str	r3, [sp, #8]
 8005aba:	230e      	movs	r3, #14
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	f107 0308 	add.w	r3, r7, #8
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	223b      	movs	r2, #59	@ 0x3b
 8005ac8:	21d0      	movs	r1, #208	@ 0xd0
 8005aca:	4820      	ldr	r0, [pc, #128]	@ (8005b4c <MPU9250_Read_Accel_Gyro+0xa0>)
 8005acc:	f7fc ff46 	bl	800295c <HAL_I2C_Mem_Read>

	// Gia tốc
	accel[0] = (int16_t) (data[0] << 8 | data[1]);
 8005ad0:	7a3b      	ldrb	r3, [r7, #8]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	b21a      	sxth	r2, r3
 8005ad6:	7a7b      	ldrb	r3, [r7, #9]
 8005ad8:	b21b      	sxth	r3, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b21a      	sxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	801a      	strh	r2, [r3, #0]
	accel[1] = (int16_t) (data[2] << 8 | data[3]);
 8005ae2:	7abb      	ldrb	r3, [r7, #10]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	b219      	sxth	r1, r3
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	b21a      	sxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3302      	adds	r3, #2
 8005af0:	430a      	orrs	r2, r1
 8005af2:	b212      	sxth	r2, r2
 8005af4:	801a      	strh	r2, [r3, #0]
	accel[2] = (int16_t) (data[4] << 8 | data[5]);
 8005af6:	7b3b      	ldrb	r3, [r7, #12]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	b219      	sxth	r1, r3
 8005afc:	7b7b      	ldrb	r3, [r7, #13]
 8005afe:	b21a      	sxth	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	430a      	orrs	r2, r1
 8005b06:	b212      	sxth	r2, r2
 8005b08:	801a      	strh	r2, [r3, #0]

	// Con quay
	gyro[0] = (int16_t) (data[8] << 8 | data[9]);
 8005b0a:	7c3b      	ldrb	r3, [r7, #16]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	b21a      	sxth	r2, r3
 8005b10:	7c7b      	ldrb	r3, [r7, #17]
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b21a      	sxth	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t) (data[10] << 8 | data[11]);
 8005b1c:	7cbb      	ldrb	r3, [r7, #18]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	b219      	sxth	r1, r3
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
 8005b24:	b21a      	sxth	r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	3302      	adds	r3, #2
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	b212      	sxth	r2, r2
 8005b2e:	801a      	strh	r2, [r3, #0]
	gyro[2] = (int16_t) (data[12] << 8 | data[13]);
 8005b30:	7d3b      	ldrb	r3, [r7, #20]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	b219      	sxth	r1, r3
 8005b36:	7d7b      	ldrb	r3, [r7, #21]
 8005b38:	b21a      	sxth	r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	b212      	sxth	r2, r2
 8005b42:	801a      	strh	r2, [r3, #0]
}
 8005b44:	bf00      	nop
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200001f4 	.word	0x200001f4

08005b50 <Send_Sensor_Data>:

void Send_Sensor_Data(int16_t *accel, int16_t *gyro) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
	    // Chuyển về đơn vị vật lý
	    ax = accel[0] / 16384.0f;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fb f8bb 	bl	8000cdc <__aeabi_i2f>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fb f9bd 	bl	8000eec <__aeabi_fdiv>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	4b2b      	ldr	r3, [pc, #172]	@ (8005c24 <Send_Sensor_Data+0xd4>)
 8005b78:	601a      	str	r2, [r3, #0]
	    ay = accel[1] / 16384.0f;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fb f8aa 	bl	8000cdc <__aeabi_i2f>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fb f9ac 	bl	8000eec <__aeabi_fdiv>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b23      	ldr	r3, [pc, #140]	@ (8005c28 <Send_Sensor_Data+0xd8>)
 8005b9a:	601a      	str	r2, [r3, #0]
	    az = accel[2] / 16384.0f;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fb f899 	bl	8000cdc <__aeabi_i2f>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fb f99b 	bl	8000eec <__aeabi_fdiv>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4b1c      	ldr	r3, [pc, #112]	@ (8005c2c <Send_Sensor_Data+0xdc>)
 8005bbc:	601a      	str	r2, [r3, #0]

	    gx = gyro[0] / 131.0f;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fb f889 	bl	8000cdc <__aeabi_i2f>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4918      	ldr	r1, [pc, #96]	@ (8005c30 <Send_Sensor_Data+0xe0>)
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fb f98c 	bl	8000eec <__aeabi_fdiv>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4b16      	ldr	r3, [pc, #88]	@ (8005c34 <Send_Sensor_Data+0xe4>)
 8005bda:	601a      	str	r2, [r3, #0]
	    gy = gyro[1] / 131.0f;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	3302      	adds	r3, #2
 8005be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fb f879 	bl	8000cdc <__aeabi_i2f>
 8005bea:	4603      	mov	r3, r0
 8005bec:	4910      	ldr	r1, [pc, #64]	@ (8005c30 <Send_Sensor_Data+0xe0>)
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fb f97c 	bl	8000eec <__aeabi_fdiv>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c38 <Send_Sensor_Data+0xe8>)
 8005bfa:	601a      	str	r2, [r3, #0]
	    gz = gyro[2] / 131.0f;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fb f869 	bl	8000cdc <__aeabi_i2f>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4908      	ldr	r1, [pc, #32]	@ (8005c30 <Send_Sensor_Data+0xe0>)
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fb f96c 	bl	8000eec <__aeabi_fdiv>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	4b08      	ldr	r3, [pc, #32]	@ (8005c3c <Send_Sensor_Data+0xec>)
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000042c 	.word	0x2000042c
 8005c28:	20000430 	.word	0x20000430
 8005c2c:	20000434 	.word	0x20000434
 8005c30:	43030000 	.word	0x43030000
 8005c34:	20000438 	.word	0x20000438
 8005c38:	2000043c 	.word	0x2000043c
 8005c3c:	20000440 	.word	0x20000440

08005c40 <MPU9250_Getdata>:

void MPU9250_Getdata(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
	MPU9250_Read_Accel_Gyro(accel, gyro);
 8005c44:	4904      	ldr	r1, [pc, #16]	@ (8005c58 <MPU9250_Getdata+0x18>)
 8005c46:	4805      	ldr	r0, [pc, #20]	@ (8005c5c <MPU9250_Getdata+0x1c>)
 8005c48:	f7ff ff30 	bl	8005aac <MPU9250_Read_Accel_Gyro>
	Send_Sensor_Data(accel, gyro);
 8005c4c:	4902      	ldr	r1, [pc, #8]	@ (8005c58 <MPU9250_Getdata+0x18>)
 8005c4e:	4803      	ldr	r0, [pc, #12]	@ (8005c5c <MPU9250_Getdata+0x1c>)
 8005c50:	f7ff ff7e 	bl	8005b50 <Send_Sensor_Data>
}
 8005c54:	bf00      	nop
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	2000044c 	.word	0x2000044c
 8005c5c:	20000444 	.word	0x20000444

08005c60 <__NVIC_SetPriority>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	6039      	str	r1, [r7, #0]
 8005c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	db0a      	blt.n	8005c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	490c      	ldr	r1, [pc, #48]	@ (8005cac <__NVIC_SetPriority+0x4c>)
 8005c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7e:	0112      	lsls	r2, r2, #4
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	440b      	add	r3, r1
 8005c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005c88:	e00a      	b.n	8005ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	4908      	ldr	r1, [pc, #32]	@ (8005cb0 <__NVIC_SetPriority+0x50>)
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	3b04      	subs	r3, #4
 8005c98:	0112      	lsls	r2, r2, #4
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	761a      	strb	r2, [r3, #24]
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	e000e100 	.word	0xe000e100
 8005cb0:	e000ed00 	.word	0xe000ed00

08005cb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005cb8:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <SysTick_Handler+0x1c>)
 8005cba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005cbc:	f002 fa5c 	bl	8008178 <xTaskGetSchedulerState>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d001      	beq.n	8005cca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005cc6:	f003 f917 	bl	8008ef8 <xPortSysTickHandler>
  }
}
 8005cca:	bf00      	nop
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	e000e010 	.word	0xe000e010

08005cd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005cd8:	2100      	movs	r1, #0
 8005cda:	f06f 0004 	mvn.w	r0, #4
 8005cde:	f7ff ffbf 	bl	8005c60 <__NVIC_SetPriority>
#endif
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cee:	f3ef 8305 	mrs	r3, IPSR
 8005cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8005cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005cfa:	f06f 0305 	mvn.w	r3, #5
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	e00c      	b.n	8005d1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d02:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <osKernelInitialize+0x40>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d0a:	4b07      	ldr	r3, [pc, #28]	@ (8005d28 <osKernelInitialize+0x40>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	e002      	b.n	8005d1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d1c:	687b      	ldr	r3, [r7, #4]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr
 8005d28:	20000454 	.word	0x20000454

08005d2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d32:	f3ef 8305 	mrs	r3, IPSR
 8005d36:	603b      	str	r3, [r7, #0]
  return(result);
 8005d38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d3e:	f06f 0305 	mvn.w	r3, #5
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	e010      	b.n	8005d68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d46:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <osKernelStart+0x48>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d109      	bne.n	8005d62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d4e:	f7ff ffc1 	bl	8005cd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d52:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <osKernelStart+0x48>)
 8005d54:	2202      	movs	r2, #2
 8005d56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d58:	f001 fd9c 	bl	8007894 <vTaskStartScheduler>
      stat = osOK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	e002      	b.n	8005d68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d68:	687b      	ldr	r3, [r7, #4]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000454 	.word	0x20000454

08005d78 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7e:	f3ef 8305 	mrs	r3, IPSR
 8005d82:	603b      	str	r3, [r7, #0]
  return(result);
 8005d84:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005d8a:	f001 fead 	bl	8007ae8 <xTaskGetTickCountFromISR>
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	e002      	b.n	8005d98 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005d92:	f001 fe9b 	bl	8007acc <xTaskGetTickCount>
 8005d96:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005d98:	687b      	ldr	r3, [r7, #4]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b08e      	sub	sp, #56	@ 0x38
 8005da6:	af04      	add	r7, sp, #16
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db2:	f3ef 8305 	mrs	r3, IPSR
 8005db6:	617b      	str	r3, [r7, #20]
  return(result);
 8005db8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d17e      	bne.n	8005ebc <osThreadNew+0x11a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d07b      	beq.n	8005ebc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005dc4:	2380      	movs	r3, #128	@ 0x80
 8005dc6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005dc8:	2318      	movs	r3, #24
 8005dca:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d045      	beq.n	8005e68 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <osThreadNew+0x48>
        name = attr->name;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <osThreadNew+0x6e>
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b38      	cmp	r3, #56	@ 0x38
 8005e02:	d805      	bhi.n	8005e10 <osThreadNew+0x6e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <osThreadNew+0x72>
        return (NULL);
 8005e10:	2300      	movs	r3, #0
 8005e12:	e054      	b.n	8005ebe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00e      	beq.n	8005e4a <osThreadNew+0xa8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	2ba7      	cmp	r3, #167	@ 0xa7
 8005e32:	d90a      	bls.n	8005e4a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <osThreadNew+0xa8>
        mem = 1;
 8005e44:	2301      	movs	r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	e010      	b.n	8005e6c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10c      	bne.n	8005e6c <osThreadNew+0xca>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d108      	bne.n	8005e6c <osThreadNew+0xca>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <osThreadNew+0xca>
          mem = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e001      	b.n	8005e6c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d110      	bne.n	8005e94 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e7a:	9202      	str	r2, [sp, #8]
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f001 fa8f 	bl	80073ac <xTaskCreateStatic>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e013      	b.n	8005ebc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d110      	bne.n	8005ebc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	f107 0310 	add.w	r3, r7, #16
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f001 fadd 	bl	800746c <xTaskCreate>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d001      	beq.n	8005ebc <osThreadNew+0x11a>
            hTask = NULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ebc:	693b      	ldr	r3, [r7, #16]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3728      	adds	r7, #40	@ 0x28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ece:	f3ef 8305 	mrs	r3, IPSR
 8005ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <osDelay+0x1c>
    stat = osErrorISR;
 8005eda:	f06f 0305 	mvn.w	r3, #5
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e007      	b.n	8005ef2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fc9b 	bl	8007828 <vTaskDelay>
    }
  }

  return (stat);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f04:	f3ef 8305 	mrs	r3, IPSR
 8005f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8005f10:	f06f 0305 	mvn.w	r3, #5
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e019      	b.n	8005f4c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8005f1c:	f001 fdd6 	bl	8007acc <xTaskGetTickCount>
 8005f20:	4603      	mov	r3, r0
 8005f22:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <osDelayUntil+0x4a>
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	db06      	blt.n	8005f46 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8005f38:	f107 0308 	add.w	r3, r7, #8
 8005f3c:	6939      	ldr	r1, [r7, #16]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fbf2 	bl	8007728 <vTaskDelayUntil>
 8005f44:	e002      	b.n	8005f4c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005f46:	f06f 0303 	mvn.w	r3, #3
 8005f4a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005f4c:	697b      	ldr	r3, [r7, #20]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b08a      	sub	sp, #40	@ 0x28
 8005f5a:	af02      	add	r7, sp, #8
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f66:	f3ef 8305 	mrs	r3, IPSR
 8005f6a:	613b      	str	r3, [r7, #16]
  return(result);
 8005f6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d175      	bne.n	800605e <osSemaphoreNew+0x108>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d072      	beq.n	800605e <osSemaphoreNew+0x108>
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d86e      	bhi.n	800605e <osSemaphoreNew+0x108>
    mem = -1;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d006      	beq.n	8005fa2 <osSemaphoreNew+0x4c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b4f      	cmp	r3, #79	@ 0x4f
 8005f9a:	d902      	bls.n	8005fa2 <osSemaphoreNew+0x4c>
        mem = 1;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	e00c      	b.n	8005fbc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d108      	bne.n	8005fbc <osSemaphoreNew+0x66>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d104      	bne.n	8005fbc <osSemaphoreNew+0x66>
          mem = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e001      	b.n	8005fbc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc2:	d04c      	beq.n	800605e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d128      	bne.n	800601c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d10a      	bne.n	8005fe6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	9200      	str	r2, [sp, #0]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	2001      	movs	r0, #1
 8005fde:	f000 fa25 	bl	800642c <xQueueGenericCreateStatic>
 8005fe2:	61f8      	str	r0, [r7, #28]
 8005fe4:	e005      	b.n	8005ff2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	2100      	movs	r1, #0
 8005fea:	2001      	movs	r0, #1
 8005fec:	f000 fa9b 	bl	8006526 <xQueueGenericCreate>
 8005ff0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d022      	beq.n	800603e <osSemaphoreNew+0xe8>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01f      	beq.n	800603e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ffe:	2300      	movs	r3, #0
 8006000:	2200      	movs	r2, #0
 8006002:	2100      	movs	r1, #0
 8006004:	69f8      	ldr	r0, [r7, #28]
 8006006:	f000 fb5b 	bl	80066c0 <xQueueGenericSend>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d016      	beq.n	800603e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006010:	69f8      	ldr	r0, [r7, #28]
 8006012:	f000 fff9 	bl	8007008 <vQueueDelete>
            hSemaphore = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	e010      	b.n	800603e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d108      	bne.n	8006034 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	461a      	mov	r2, r3
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fad9 	bl	80065e2 <xQueueCreateCountingSemaphoreStatic>
 8006030:	61f8      	str	r0, [r7, #28]
 8006032:	e004      	b.n	800603e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fb0c 	bl	8006654 <xQueueCreateCountingSemaphore>
 800603c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00c      	beq.n	800605e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <osSemaphoreNew+0xfc>
          name = attr->name;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e001      	b.n	8006056 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006056:	6979      	ldr	r1, [r7, #20]
 8006058:	69f8      	ldr	r0, [r7, #28]
 800605a:	f001 f921 	bl	80072a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800605e:	69fb      	ldr	r3, [r7, #28]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006080:	f06f 0303 	mvn.w	r3, #3
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e039      	b.n	80060fc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006088:	f3ef 8305 	mrs	r3, IPSR
 800608c:	60fb      	str	r3, [r7, #12]
  return(result);
 800608e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006090:	2b00      	cmp	r3, #0
 8006092:	d022      	beq.n	80060da <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800609a:	f06f 0303 	mvn.w	r3, #3
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e02c      	b.n	80060fc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80060a6:	f107 0308 	add.w	r3, r7, #8
 80060aa:	461a      	mov	r2, r3
 80060ac:	2100      	movs	r1, #0
 80060ae:	6938      	ldr	r0, [r7, #16]
 80060b0:	f000 ff28 	bl	8006f04 <xQueueReceiveFromISR>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d003      	beq.n	80060c2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80060ba:	f06f 0302 	mvn.w	r3, #2
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e01c      	b.n	80060fc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d019      	beq.n	80060fc <osSemaphoreAcquire+0x94>
 80060c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006108 <osSemaphoreAcquire+0xa0>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	e010      	b.n	80060fc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6938      	ldr	r0, [r7, #16]
 80060de:	f000 fe01 	bl	8006ce4 <xQueueSemaphoreTake>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d009      	beq.n	80060fc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80060ee:	f06f 0301 	mvn.w	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e002      	b.n	80060fc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80060f6:	f06f 0302 	mvn.w	r3, #2
 80060fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80060fc:	697b      	ldr	r3, [r7, #20]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006122:	f06f 0303 	mvn.w	r3, #3
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	e02c      	b.n	8006184 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612a:	f3ef 8305 	mrs	r3, IPSR
 800612e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006130:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01a      	beq.n	800616c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4619      	mov	r1, r3
 8006140:	6938      	ldr	r0, [r7, #16]
 8006142:	f000 fc5d 	bl	8006a00 <xQueueGiveFromISR>
 8006146:	4603      	mov	r3, r0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d003      	beq.n	8006154 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800614c:	f06f 0302 	mvn.w	r3, #2
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e017      	b.n	8006184 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d014      	beq.n	8006184 <osSemaphoreRelease+0x78>
 800615a:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <osSemaphoreRelease+0x84>)
 800615c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	e00b      	b.n	8006184 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800616c:	2300      	movs	r3, #0
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	6938      	ldr	r0, [r7, #16]
 8006174:	f000 faa4 	bl	80066c0 <xQueueGenericSend>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d002      	beq.n	8006184 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800617e:	f06f 0302 	mvn.w	r3, #2
 8006182:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006184:	697b      	ldr	r3, [r7, #20]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a06      	ldr	r2, [pc, #24]	@ (80061bc <vApplicationGetIdleTaskMemory+0x28>)
 80061a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4a05      	ldr	r2, [pc, #20]	@ (80061c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80061aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2280      	movs	r2, #128	@ 0x80
 80061b0:	601a      	str	r2, [r3, #0]
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr
 80061bc:	20000458 	.word	0x20000458
 80061c0:	20000500 	.word	0x20000500

080061c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a07      	ldr	r2, [pc, #28]	@ (80061f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80061d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4a06      	ldr	r2, [pc, #24]	@ (80061f4 <vApplicationGetTimerTaskMemory+0x30>)
 80061da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061e2:	601a      	str	r2, [r3, #0]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000700 	.word	0x20000700
 80061f4:	200007a8 	.word	0x200007a8

080061f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f103 0208 	add.w	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f04f 32ff 	mov.w	r2, #4294967295
 8006210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f103 0208 	add.w	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f103 0208 	add.w	r2, r3, #8
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr

08006236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr

08006294 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062aa:	d103      	bne.n	80062b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	e00c      	b.n	80062ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3308      	adds	r3, #8
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e002      	b.n	80062c2 <vListInsert+0x2e>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d2f6      	bcs.n	80062bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6892      	ldr	r2, [r2, #8]
 800631a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6852      	ldr	r2, [r2, #4]
 8006324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d103      	bne.n	8006338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	1e5a      	subs	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
	...

08006358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006384:	f002 fd34 	bl	8008df0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	441a      	add	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b4:	3b01      	subs	r3, #1
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	441a      	add	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	22ff      	movs	r2, #255	@ 0xff
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	22ff      	movs	r2, #255	@ 0xff
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d114      	bne.n	8006404 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01a      	beq.n	8006418 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3310      	adds	r3, #16
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 fd00 	bl	8007dec <xTaskRemoveFromEventList>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d012      	beq.n	8006418 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <xQueueGenericReset+0xd0>)
 80063f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	e009      	b.n	8006418 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3310      	adds	r3, #16
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff fef5 	bl	80061f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3324      	adds	r3, #36	@ 0x24
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fef0 	bl	80061f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006418:	f002 fd1a 	bl	8008e50 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800641c:	2301      	movs	r3, #1
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08e      	sub	sp, #56	@ 0x38
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <xQueueGenericCreateStatic+0x56>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <xQueueGenericCreateStatic+0x5a>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <xQueueGenericCreateStatic+0x5c>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <xQueueGenericCreateStatic+0x84>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <xQueueGenericCreateStatic+0x88>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <xQueueGenericCreateStatic+0x8a>
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	61fb      	str	r3, [r7, #28]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064d2:	2350      	movs	r3, #80	@ 0x50
 80064d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b50      	cmp	r3, #80	@ 0x50
 80064da:	d00b      	beq.n	80064f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	61bb      	str	r3, [r7, #24]
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80064fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00d      	beq.n	800651c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006508:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800650c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 f840 	bl	800659c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800651e:	4618      	mov	r0, r3
 8006520:	3730      	adds	r7, #48	@ 0x30
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006526:	b580      	push	{r7, lr}
 8006528:	b08a      	sub	sp, #40	@ 0x28
 800652a:	af02      	add	r7, sp, #8
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	4613      	mov	r3, r2
 8006532:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <xQueueGenericCreate+0x2c>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	613b      	str	r3, [r7, #16]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	3350      	adds	r3, #80	@ 0x50
 8006560:	4618      	mov	r0, r3
 8006562:	f002 fd4d 	bl	8009000 <pvPortMalloc>
 8006566:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d011      	beq.n	8006592 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	3350      	adds	r3, #80	@ 0x50
 8006576:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006580:	79fa      	ldrb	r2, [r7, #7]
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4613      	mov	r3, r2
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f805 	bl	800659c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006592:	69bb      	ldr	r3, [r7, #24]
	}
 8006594:	4618      	mov	r0, r3
 8006596:	3720      	adds	r7, #32
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e002      	b.n	80065be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065ca:	2101      	movs	r1, #1
 80065cc:	69b8      	ldr	r0, [r7, #24]
 80065ce:	f7ff fec3 	bl	8006358 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065da:	bf00      	nop
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08a      	sub	sp, #40	@ 0x28
 80065e6:	af02      	add	r7, sp, #8
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61bb      	str	r3, [r7, #24]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	429a      	cmp	r2, r3
 8006612:	d90b      	bls.n	800662c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	617b      	str	r3, [r7, #20]
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	e7fd      	b.n	8006628 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800662c:	2302      	movs	r3, #2
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff fef8 	bl	800642c <xQueueGenericCreateStatic>
 800663c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800664a:	69fb      	ldr	r3, [r7, #28]
	}
 800664c:	4618      	mov	r0, r3
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	613b      	str	r3, [r7, #16]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d90b      	bls.n	800669c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	e7fd      	b.n	8006698 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800669c:	2202      	movs	r2, #2
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ff40 	bl	8006526 <xQueueGenericCreate>
 80066a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066b4:	697b      	ldr	r3, [r7, #20]
	}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08e      	sub	sp, #56	@ 0x38
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066ce:	2300      	movs	r3, #0
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <xQueueGenericSend+0x34>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	e7fd      	b.n	80066f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSend+0x42>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <xQueueGenericSend+0x46>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericSend+0x48>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGenericSend+0x64>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d103      	bne.n	8006732 <xQueueGenericSend+0x72>
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <xQueueGenericSend+0x76>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <xQueueGenericSend+0x78>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10b      	bne.n	8006754 <xQueueGenericSend+0x94>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	623b      	str	r3, [r7, #32]
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	e7fd      	b.n	8006750 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006754:	f001 fd10 	bl	8008178 <xTaskGetSchedulerState>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <xQueueGenericSend+0xa4>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <xQueueGenericSend+0xa8>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <xQueueGenericSend+0xaa>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10b      	bne.n	8006786 <xQueueGenericSend+0xc6>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	61fb      	str	r3, [r7, #28]
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	e7fd      	b.n	8006782 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006786:	f002 fb33 	bl	8008df0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <xQueueGenericSend+0xdc>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d129      	bne.n	80067f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067a2:	f000 fc6c 	bl	800707e <prvCopyDataToQueue>
 80067a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	3324      	adds	r3, #36	@ 0x24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 fb19 	bl	8007dec <xTaskRemoveFromEventList>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d013      	beq.n	80067e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067c0:	4b3f      	ldr	r3, [pc, #252]	@ (80068c0 <xQueueGenericSend+0x200>)
 80067c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	e00a      	b.n	80067e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067d8:	4b39      	ldr	r3, [pc, #228]	@ (80068c0 <xQueueGenericSend+0x200>)
 80067da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067e8:	f002 fb32 	bl	8008e50 <vPortExitCritical>
				return pdPASS;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e063      	b.n	80068b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067f6:	f002 fb2b 	bl	8008e50 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e05c      	b.n	80068b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006800:	2b00      	cmp	r3, #0
 8006802:	d106      	bne.n	8006812 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006804:	f107 0314 	add.w	r3, r7, #20
 8006808:	4618      	mov	r0, r3
 800680a:	f001 fb53 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800680e:	2301      	movs	r3, #1
 8006810:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006812:	f002 fb1d 	bl	8008e50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006816:	f001 f8ad 	bl	8007974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800681a:	f002 fae9 	bl	8008df0 <vPortEnterCritical>
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006824:	b25b      	sxtb	r3, r3
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d103      	bne.n	8006834 <xQueueGenericSend+0x174>
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800683a:	b25b      	sxtb	r3, r3
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d103      	bne.n	800684a <xQueueGenericSend+0x18a>
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800684a:	f002 fb01 	bl	8008e50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800684e:	1d3a      	adds	r2, r7, #4
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f001 fb42 	bl	8007ee0 <xTaskCheckForTimeOut>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d124      	bne.n	80068ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006862:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006864:	f000 fd03 	bl	800726e <prvIsQueueFull>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d018      	beq.n	80068a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	3310      	adds	r3, #16
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	4611      	mov	r1, r2
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fa66 	bl	8007d48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800687c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800687e:	f000 fc8e 	bl	800719e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006882:	f001 f885 	bl	8007990 <xTaskResumeAll>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	f47f af7c 	bne.w	8006786 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800688e:	4b0c      	ldr	r3, [pc, #48]	@ (80068c0 <xQueueGenericSend+0x200>)
 8006890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	e772      	b.n	8006786 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068a2:	f000 fc7c 	bl	800719e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068a6:	f001 f873 	bl	8007990 <xTaskResumeAll>
 80068aa:	e76c      	b.n	8006786 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068ae:	f000 fc76 	bl	800719e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068b2:	f001 f86d 	bl	8007990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3738      	adds	r7, #56	@ 0x38
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	e000ed04 	.word	0xe000ed04

080068c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b090      	sub	sp, #64	@ 0x40
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d103      	bne.n	8006902 <xQueueGenericSendFromISR+0x3e>
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <xQueueGenericSendFromISR+0x42>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <xQueueGenericSendFromISR+0x44>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d103      	bne.n	8006932 <xQueueGenericSendFromISR+0x6e>
 800692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <xQueueGenericSendFromISR+0x72>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueGenericSendFromISR+0x74>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	623b      	str	r3, [r7, #32]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006954:	f002 fb14 	bl	8008f80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006958:	f3ef 8211 	mrs	r2, BASEPRI
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	61fa      	str	r2, [r7, #28]
 800696e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006970:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697c:	429a      	cmp	r2, r3
 800697e:	d302      	bcc.n	8006986 <xQueueGenericSendFromISR+0xc2>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d12f      	bne.n	80069e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800698c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006994:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800699c:	f000 fb6f 	bl	800707e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d112      	bne.n	80069d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d016      	beq.n	80069e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b4:	3324      	adds	r3, #36	@ 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fa18 	bl	8007dec <xTaskRemoveFromEventList>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e007      	b.n	80069e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069d4:	3301      	adds	r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	b25a      	sxtb	r2, r3
 80069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80069e0:	2301      	movs	r3, #1
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80069e4:	e001      	b.n	80069ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3740      	adds	r7, #64	@ 0x40
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	@ 0x38
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	623b      	str	r3, [r7, #32]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	61fb      	str	r3, [r7, #28]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d103      	bne.n	8006a5c <xQueueGiveFromISR+0x5c>
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <xQueueGiveFromISR+0x60>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <xQueueGiveFromISR+0x62>
 8006a60:	2300      	movs	r3, #0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10b      	bne.n	8006a7e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	61bb      	str	r3, [r7, #24]
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a7e:	f002 fa7f 	bl	8008f80 <vPortValidateInterruptPriority>
	__asm volatile
 8006a82:	f3ef 8211 	mrs	r2, BASEPRI
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	617a      	str	r2, [r7, #20]
 8006a98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d22b      	bcs.n	8006b06 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d112      	bne.n	8006af0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	3324      	adds	r3, #36	@ 0x24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 f988 	bl	8007dec <xTaskRemoveFromEventList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e007      	b.n	8006b00 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006af0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006af4:	3301      	adds	r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	b25a      	sxtb	r2, r3
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b00:	2301      	movs	r3, #1
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b04:	e001      	b.n	8006b0a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f383 8811 	msr	BASEPRI, r3
}
 8006b14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3738      	adds	r7, #56	@ 0x38
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08c      	sub	sp, #48	@ 0x30
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xQueueReceive+0x32>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	623b      	str	r3, [r7, #32]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <xQueueReceive+0x40>
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueReceive+0x44>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueReceive+0x46>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <xQueueReceive+0x62>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61fb      	str	r3, [r7, #28]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b82:	f001 faf9 	bl	8008178 <xTaskGetSchedulerState>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <xQueueReceive+0x72>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueReceive+0x76>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueReceive+0x78>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <xQueueReceive+0x94>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	61bb      	str	r3, [r7, #24]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bb4:	f002 f91c 	bl	8008df0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01f      	beq.n	8006c04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bc8:	f000 fac3 	bl	8007152 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	1e5a      	subs	r2, r3, #1
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00f      	beq.n	8006bfc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	3310      	adds	r3, #16
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 f903 	bl	8007dec <xTaskRemoveFromEventList>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bec:	4b3c      	ldr	r3, [pc, #240]	@ (8006ce0 <xQueueReceive+0x1c0>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bfc:	f002 f928 	bl	8008e50 <vPortExitCritical>
				return pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e069      	b.n	8006cd8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d103      	bne.n	8006c12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c0a:	f002 f921 	bl	8008e50 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e062      	b.n	8006cd8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d106      	bne.n	8006c26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c18:	f107 0310 	add.w	r3, r7, #16
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 f949 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c26:	f002 f913 	bl	8008e50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c2a:	f000 fea3 	bl	8007974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c2e:	f002 f8df 	bl	8008df0 <vPortEnterCritical>
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d103      	bne.n	8006c48 <xQueueReceive+0x128>
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d103      	bne.n	8006c5e <xQueueReceive+0x13e>
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c5e:	f002 f8f7 	bl	8008e50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c62:	1d3a      	adds	r2, r7, #4
 8006c64:	f107 0310 	add.w	r3, r7, #16
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 f938 	bl	8007ee0 <xTaskCheckForTimeOut>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d123      	bne.n	8006cbe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c78:	f000 fae3 	bl	8007242 <prvIsQueueEmpty>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c84:	3324      	adds	r3, #36	@ 0x24
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 f85c 	bl	8007d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c92:	f000 fa84 	bl	800719e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c96:	f000 fe7b 	bl	8007990 <xTaskResumeAll>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d189      	bne.n	8006bb4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce0 <xQueueReceive+0x1c0>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	e780      	b.n	8006bb4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cb4:	f000 fa73 	bl	800719e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb8:	f000 fe6a 	bl	8007990 <xTaskResumeAll>
 8006cbc:	e77a      	b.n	8006bb4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc0:	f000 fa6d 	bl	800719e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cc4:	f000 fe64 	bl	8007990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cca:	f000 faba 	bl	8007242 <prvIsQueueEmpty>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f43f af6f 	beq.w	8006bb4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3730      	adds	r7, #48	@ 0x30
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08e      	sub	sp, #56	@ 0x38
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	623b      	str	r3, [r7, #32]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	61fb      	str	r3, [r7, #28]
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d38:	f001 fa1e 	bl	8008178 <xTaskGetSchedulerState>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <xQueueSemaphoreTake+0x64>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <xQueueSemaphoreTake+0x68>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <xQueueSemaphoreTake+0x6a>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	61bb      	str	r3, [r7, #24]
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	e7fd      	b.n	8006d66 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d6a:	f002 f841 	bl	8008df0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d024      	beq.n	8006dc4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	1e5a      	subs	r2, r3, #1
 8006d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d80:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d8a:	f001 fb6f 	bl	800846c <pvTaskIncrementMutexHeldCount>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d92:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00f      	beq.n	8006dbc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	3310      	adds	r3, #16
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 f823 	bl	8007dec <xTaskRemoveFromEventList>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dac:	4b54      	ldr	r3, [pc, #336]	@ (8006f00 <xQueueSemaphoreTake+0x21c>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dbc:	f002 f848 	bl	8008e50 <vPortExitCritical>
				return pdPASS;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e098      	b.n	8006ef6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d112      	bne.n	8006df0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	617b      	str	r3, [r7, #20]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006de8:	f002 f832 	bl	8008e50 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e082      	b.n	8006ef6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006df6:	f107 030c 	add.w	r3, r7, #12
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f85a 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e00:	2301      	movs	r3, #1
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e04:	f002 f824 	bl	8008e50 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e08:	f000 fdb4 	bl	8007974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e0c:	f001 fff0 	bl	8008df0 <vPortEnterCritical>
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e16:	b25b      	sxtb	r3, r3
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d103      	bne.n	8006e26 <xQueueSemaphoreTake+0x142>
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e2c:	b25b      	sxtb	r3, r3
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d103      	bne.n	8006e3c <xQueueSemaphoreTake+0x158>
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e3c:	f002 f808 	bl	8008e50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e40:	463a      	mov	r2, r7
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	4611      	mov	r1, r2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 f849 	bl	8007ee0 <xTaskCheckForTimeOut>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d132      	bne.n	8006eba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e56:	f000 f9f4 	bl	8007242 <prvIsQueueEmpty>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d026      	beq.n	8006eae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d109      	bne.n	8006e7c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006e68:	f001 ffc2 	bl	8008df0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 f99f 	bl	80081b4 <xTaskPriorityInherit>
 8006e76:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006e78:	f001 ffea 	bl	8008e50 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	3324      	adds	r3, #36	@ 0x24
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	4611      	mov	r1, r2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 ff5f 	bl	8007d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e8c:	f000 f987 	bl	800719e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e90:	f000 fd7e 	bl	8007990 <xTaskResumeAll>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f47f af67 	bne.w	8006d6a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006e9c:	4b18      	ldr	r3, [pc, #96]	@ (8006f00 <xQueueSemaphoreTake+0x21c>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	e75d      	b.n	8006d6a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006eae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006eb0:	f000 f975 	bl	800719e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eb4:	f000 fd6c 	bl	8007990 <xTaskResumeAll>
 8006eb8:	e757      	b.n	8006d6a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006eba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ebc:	f000 f96f 	bl	800719e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ec0:	f000 fd66 	bl	8007990 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ec6:	f000 f9bc 	bl	8007242 <prvIsQueueEmpty>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f43f af4c 	beq.w	8006d6a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00d      	beq.n	8006ef4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006ed8:	f001 ff8a 	bl	8008df0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006edc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ede:	f000 f8b7 	bl	8007050 <prvGetDisinheritPriorityAfterTimeout>
 8006ee2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 fa3a 	bl	8008364 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ef0:	f001 ffae 	bl	8008e50 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3738      	adds	r7, #56	@ 0x38
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	@ 0x38
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10b      	bne.n	8006f32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	623b      	str	r3, [r7, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	e7fd      	b.n	8006f2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d103      	bne.n	8006f40 <xQueueReceiveFromISR+0x3c>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <xQueueReceiveFromISR+0x40>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <xQueueReceiveFromISR+0x42>
 8006f44:	2300      	movs	r3, #0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61fb      	str	r3, [r7, #28]
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f62:	f002 f80d 	bl	8008f80 <vPortValidateInterruptPriority>
	__asm volatile
 8006f66:	f3ef 8211 	mrs	r2, BASEPRI
 8006f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	61ba      	str	r2, [r7, #24]
 8006f7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d02f      	beq.n	8006fee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f9c:	f000 f8d9 	bl	8007152 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa2:	1e5a      	subs	r2, r3, #1
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006fa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d112      	bne.n	8006fd8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d016      	beq.n	8006fe8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	3310      	adds	r3, #16
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 ff14 	bl	8007dec <xTaskRemoveFromEventList>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00e      	beq.n	8006fe8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e007      	b.n	8006fe8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fdc:	3301      	adds	r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	b25a      	sxtb	r2, r3
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fec:	e001      	b.n	8006ff2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f383 8811 	msr	BASEPRI, r3
}
 8006ffc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007000:	4618      	mov	r0, r3
 8007002:	3738      	adds	r7, #56	@ 0x38
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <vQueueDelete+0x2a>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	60bb      	str	r3, [r7, #8]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f95c 	bl	80072f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f002 f8aa 	bl	800919c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d006      	beq.n	800706e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	e001      	b.n	8007072 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007072:	68fb      	ldr	r3, [r7, #12]
	}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10d      	bne.n	80070b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d14d      	bne.n	8007140 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 f8eb 	bl	8008284 <xTaskPriorityDisinherit>
 80070ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
 80070b6:	e043      	b.n	8007140 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d119      	bne.n	80070f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6858      	ldr	r0, [r3, #4]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	461a      	mov	r2, r3
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	f003 fc04 	bl	800a8d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	441a      	add	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d32b      	bcc.n	8007140 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	605a      	str	r2, [r3, #4]
 80070f0:	e026      	b.n	8007140 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68d8      	ldr	r0, [r3, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	461a      	mov	r2, r3
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	f003 fbea 	bl	800a8d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	425b      	negs	r3, r3
 800710c:	441a      	add	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d207      	bcs.n	800712e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007126:	425b      	negs	r3, r3
 8007128:	441a      	add	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d105      	bne.n	8007140 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3b01      	subs	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007148:	697b      	ldr	r3, [r7, #20]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d018      	beq.n	8007196 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	d303      	bcc.n	8007186 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68d9      	ldr	r1, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718e:	461a      	mov	r2, r3
 8007190:	6838      	ldr	r0, [r7, #0]
 8007192:	f003 fba0 	bl	800a8d6 <memcpy>
	}
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071a6:	f001 fe23 	bl	8008df0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071b2:	e011      	b.n	80071d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3324      	adds	r3, #36	@ 0x24
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fe13 	bl	8007dec <xTaskRemoveFromEventList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071cc:	f000 feec 	bl	8007fa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dce9      	bgt.n	80071b4 <prvUnlockQueue+0x16>
 80071e0:	e000      	b.n	80071e4 <prvUnlockQueue+0x46>
					break;
 80071e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	22ff      	movs	r2, #255	@ 0xff
 80071e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80071ec:	f001 fe30 	bl	8008e50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071f0:	f001 fdfe 	bl	8008df0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071fc:	e011      	b.n	8007222 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d012      	beq.n	800722c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3310      	adds	r3, #16
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fdee 	bl	8007dec <xTaskRemoveFromEventList>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007216:	f000 fec7 	bl	8007fa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	3b01      	subs	r3, #1
 800721e:	b2db      	uxtb	r3, r3
 8007220:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007226:	2b00      	cmp	r3, #0
 8007228:	dce9      	bgt.n	80071fe <prvUnlockQueue+0x60>
 800722a:	e000      	b.n	800722e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800722c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	22ff      	movs	r2, #255	@ 0xff
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007236:	f001 fe0b 	bl	8008e50 <vPortExitCritical>
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800724a:	f001 fdd1 	bl	8008df0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e001      	b.n	8007260 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007260:	f001 fdf6 	bl	8008e50 <vPortExitCritical>

	return xReturn;
 8007264:	68fb      	ldr	r3, [r7, #12]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007276:	f001 fdbb 	bl	8008df0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007282:	429a      	cmp	r2, r3
 8007284:	d102      	bne.n	800728c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e001      	b.n	8007290 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007290:	f001 fdde 	bl	8008e50 <vPortExitCritical>

	return xReturn;
 8007294:	68fb      	ldr	r3, [r7, #12]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e014      	b.n	80072da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072b0:	4a0e      	ldr	r2, [pc, #56]	@ (80072ec <vQueueAddToRegistry+0x4c>)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10b      	bne.n	80072d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072bc:	490b      	ldr	r1, [pc, #44]	@ (80072ec <vQueueAddToRegistry+0x4c>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072c6:	4a09      	ldr	r2, [pc, #36]	@ (80072ec <vQueueAddToRegistry+0x4c>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072d2:	e006      	b.n	80072e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b07      	cmp	r3, #7
 80072de:	d9e7      	bls.n	80072b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr
 80072ec:	20000ba8 	.word	0x20000ba8

080072f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e016      	b.n	800732c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80072fe:	4a10      	ldr	r2, [pc, #64]	@ (8007340 <vQueueUnregisterQueue+0x50>)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	4413      	add	r3, r2
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d10b      	bne.n	8007326 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800730e:	4a0c      	ldr	r2, [pc, #48]	@ (8007340 <vQueueUnregisterQueue+0x50>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2100      	movs	r1, #0
 8007314:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007318:	4a09      	ldr	r2, [pc, #36]	@ (8007340 <vQueueUnregisterQueue+0x50>)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	4413      	add	r3, r2
 8007320:	2200      	movs	r2, #0
 8007322:	605a      	str	r2, [r3, #4]
				break;
 8007324:	e006      	b.n	8007334 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3301      	adds	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b07      	cmp	r3, #7
 8007330:	d9e5      	bls.n	80072fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20000ba8 	.word	0x20000ba8

08007344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007354:	f001 fd4c 	bl	8008df0 <vPortEnterCritical>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800735e:	b25b      	sxtb	r3, r3
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	d103      	bne.n	800736e <vQueueWaitForMessageRestricted+0x2a>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007374:	b25b      	sxtb	r3, r3
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d103      	bne.n	8007384 <vQueueWaitForMessageRestricted+0x40>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007384:	f001 fd64 	bl	8008e50 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3324      	adds	r3, #36	@ 0x24
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fcfb 	bl	8007d94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800739e:	6978      	ldr	r0, [r7, #20]
 80073a0:	f7ff fefd 	bl	800719e <prvUnlockQueue>
	}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	@ 0x38
 80073b0:	af04      	add	r7, sp, #16
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	623b      	str	r3, [r7, #32]
}
 80073d2:	bf00      	nop
 80073d4:	bf00      	nop
 80073d6:	e7fd      	b.n	80073d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	61fb      	str	r3, [r7, #28]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073f6:	23a8      	movs	r3, #168	@ 0xa8
 80073f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2ba8      	cmp	r3, #168	@ 0xa8
 80073fe:	d00b      	beq.n	8007418 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	61bb      	str	r3, [r7, #24]
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	e7fd      	b.n	8007414 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007418:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01e      	beq.n	800745e <xTaskCreateStatic+0xb2>
 8007420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01b      	beq.n	800745e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	2202      	movs	r2, #2
 8007434:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007438:	2300      	movs	r3, #0
 800743a:	9303      	str	r3, [sp, #12]
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	9302      	str	r3, [sp, #8]
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f851 	bl	80074f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007456:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007458:	f000 f8f6 	bl	8007648 <prvAddNewTaskToReadyList>
 800745c:	e001      	b.n	8007462 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007462:	697b      	ldr	r3, [r7, #20]
	}
 8007464:	4618      	mov	r0, r3
 8007466:	3728      	adds	r7, #40	@ 0x28
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08c      	sub	sp, #48	@ 0x30
 8007470:	af04      	add	r7, sp, #16
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fdbd 	bl	8009000 <pvPortMalloc>
 8007486:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00e      	beq.n	80074ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800748e:	20a8      	movs	r0, #168	@ 0xa8
 8007490:	f001 fdb6 	bl	8009000 <pvPortMalloc>
 8007494:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80074a2:	e005      	b.n	80074b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074a4:	6978      	ldr	r0, [r7, #20]
 80074a6:	f001 fe79 	bl	800919c <vPortFree>
 80074aa:	e001      	b.n	80074b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d017      	beq.n	80074e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	2300      	movs	r3, #0
 80074c2:	9303      	str	r3, [sp, #12]
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	9302      	str	r3, [sp, #8]
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f80f 	bl	80074f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074da:	69f8      	ldr	r0, [r7, #28]
 80074dc:	f000 f8b4 	bl	8007648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074e0:	2301      	movs	r3, #1
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	e002      	b.n	80074ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074ec:	69bb      	ldr	r3, [r7, #24]
	}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	461a      	mov	r2, r3
 8007510:	21a5      	movs	r1, #165	@ 0xa5
 8007512:	f003 f8eb 	bl	800a6ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007520:	3b01      	subs	r3, #1
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f023 0307 	bic.w	r3, r3, #7
 800752e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00b      	beq.n	8007552 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	617b      	str	r3, [r7, #20]
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	e7fd      	b.n	800754e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01f      	beq.n	8007598 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007558:	2300      	movs	r3, #0
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	e012      	b.n	8007584 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	4413      	add	r3, r2
 8007564:	7819      	ldrb	r1, [r3, #0]
 8007566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	4413      	add	r3, r2
 800756c:	3334      	adds	r3, #52	@ 0x34
 800756e:	460a      	mov	r2, r1
 8007570:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d006      	beq.n	800758c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3301      	adds	r3, #1
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d9e9      	bls.n	800755e <prvInitialiseNewTask+0x66>
 800758a:	e000      	b.n	800758e <prvInitialiseNewTask+0x96>
			{
				break;
 800758c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007596:	e003      	b.n	80075a0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a2:	2b37      	cmp	r3, #55	@ 0x37
 80075a4:	d901      	bls.n	80075aa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075a6:	2337      	movs	r3, #55	@ 0x37
 80075a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2200      	movs	r2, #0
 80075ba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	3304      	adds	r3, #4
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fe38 	bl	8006236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	3318      	adds	r3, #24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fe33 	bl	8006236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	3354      	adds	r3, #84	@ 0x54
 80075fa:	224c      	movs	r2, #76	@ 0x4c
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f003 f874 	bl	800a6ec <memset>
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	4a0d      	ldr	r2, [pc, #52]	@ (800763c <prvInitialiseNewTask+0x144>)
 8007608:	659a      	str	r2, [r3, #88]	@ 0x58
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	4a0c      	ldr	r2, [pc, #48]	@ (8007640 <prvInitialiseNewTask+0x148>)
 800760e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007612:	4a0c      	ldr	r2, [pc, #48]	@ (8007644 <prvInitialiseNewTask+0x14c>)
 8007614:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	68f9      	ldr	r1, [r7, #12]
 800761a:	69b8      	ldr	r0, [r7, #24]
 800761c:	f001 fae6 	bl	8008bec <pxPortInitialiseStack>
 8007620:	4602      	mov	r2, r0
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007632:	bf00      	nop
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	2000223c 	.word	0x2000223c
 8007640:	200022a4 	.word	0x200022a4
 8007644:	2000230c 	.word	0x2000230c

08007648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007650:	f001 fbce 	bl	8008df0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007654:	4b2d      	ldr	r3, [pc, #180]	@ (800770c <prvAddNewTaskToReadyList+0xc4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3301      	adds	r3, #1
 800765a:	4a2c      	ldr	r2, [pc, #176]	@ (800770c <prvAddNewTaskToReadyList+0xc4>)
 800765c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800765e:	4b2c      	ldr	r3, [pc, #176]	@ (8007710 <prvAddNewTaskToReadyList+0xc8>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007666:	4a2a      	ldr	r2, [pc, #168]	@ (8007710 <prvAddNewTaskToReadyList+0xc8>)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800766c:	4b27      	ldr	r3, [pc, #156]	@ (800770c <prvAddNewTaskToReadyList+0xc4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d110      	bne.n	8007696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007674:	f000 fcbc 	bl	8007ff0 <prvInitialiseTaskLists>
 8007678:	e00d      	b.n	8007696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800767a:	4b26      	ldr	r3, [pc, #152]	@ (8007714 <prvAddNewTaskToReadyList+0xcc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d109      	bne.n	8007696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007682:	4b23      	ldr	r3, [pc, #140]	@ (8007710 <prvAddNewTaskToReadyList+0xc8>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	429a      	cmp	r2, r3
 800768e:	d802      	bhi.n	8007696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007690:	4a1f      	ldr	r2, [pc, #124]	@ (8007710 <prvAddNewTaskToReadyList+0xc8>)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007696:	4b20      	ldr	r3, [pc, #128]	@ (8007718 <prvAddNewTaskToReadyList+0xd0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	4a1e      	ldr	r2, [pc, #120]	@ (8007718 <prvAddNewTaskToReadyList+0xd0>)
 800769e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007718 <prvAddNewTaskToReadyList+0xd0>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ac:	4b1b      	ldr	r3, [pc, #108]	@ (800771c <prvAddNewTaskToReadyList+0xd4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d903      	bls.n	80076bc <prvAddNewTaskToReadyList+0x74>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	4a18      	ldr	r2, [pc, #96]	@ (800771c <prvAddNewTaskToReadyList+0xd4>)
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4a15      	ldr	r2, [pc, #84]	@ (8007720 <prvAddNewTaskToReadyList+0xd8>)
 80076ca:	441a      	add	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f7fe fdbb 	bl	800624e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076d8:	f001 fbba 	bl	8008e50 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007714 <prvAddNewTaskToReadyList+0xcc>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00e      	beq.n	8007702 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007710 <prvAddNewTaskToReadyList+0xc8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d207      	bcs.n	8007702 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007724 <prvAddNewTaskToReadyList+0xdc>)
 80076f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	200010bc 	.word	0x200010bc
 8007710:	20000be8 	.word	0x20000be8
 8007714:	200010c8 	.word	0x200010c8
 8007718:	200010d8 	.word	0x200010d8
 800771c:	200010c4 	.word	0x200010c4
 8007720:	20000bec 	.word	0x20000bec
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	@ 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007732:	2300      	movs	r3, #0
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10b      	bne.n	8007754 <vTaskDelayUntil+0x2c>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	617b      	str	r3, [r7, #20]
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	e7fd      	b.n	8007750 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10b      	bne.n	8007772 <vTaskDelayUntil+0x4a>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	613b      	str	r3, [r7, #16]
}
 800776c:	bf00      	nop
 800776e:	bf00      	nop
 8007770:	e7fd      	b.n	800776e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007772:	4b2a      	ldr	r3, [pc, #168]	@ (800781c <vTaskDelayUntil+0xf4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00b      	beq.n	8007792 <vTaskDelayUntil+0x6a>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	60fb      	str	r3, [r7, #12]
}
 800778c:	bf00      	nop
 800778e:	bf00      	nop
 8007790:	e7fd      	b.n	800778e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007792:	f000 f8ef 	bl	8007974 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007796:	4b22      	ldr	r3, [pc, #136]	@ (8007820 <vTaskDelayUntil+0xf8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	4413      	add	r3, r2
 80077a4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6a3a      	ldr	r2, [r7, #32]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d20b      	bcs.n	80077c8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d211      	bcs.n	80077de <vTaskDelayUntil+0xb6>
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d90d      	bls.n	80077de <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c6:	e00a      	b.n	80077de <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d303      	bcc.n	80077da <vTaskDelayUntil+0xb2>
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d901      	bls.n	80077de <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80077da:	2301      	movs	r3, #1
 80077dc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d006      	beq.n	80077f8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fe4e 	bl	8008494 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80077f8:	f000 f8ca 	bl	8007990 <xTaskResumeAll>
 80077fc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d107      	bne.n	8007814 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007804:	4b07      	ldr	r3, [pc, #28]	@ (8007824 <vTaskDelayUntil+0xfc>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007814:	bf00      	nop
 8007816:	3728      	adds	r7, #40	@ 0x28
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200010e4 	.word	0x200010e4
 8007820:	200010c0 	.word	0x200010c0
 8007824:	e000ed04 	.word	0xe000ed04

08007828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d018      	beq.n	800786c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800783a:	4b14      	ldr	r3, [pc, #80]	@ (800788c <vTaskDelay+0x64>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <vTaskDelay+0x32>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	60bb      	str	r3, [r7, #8]
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	e7fd      	b.n	8007856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800785a:	f000 f88b 	bl	8007974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800785e:	2100      	movs	r1, #0
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fe17 	bl	8008494 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007866:	f000 f893 	bl	8007990 <xTaskResumeAll>
 800786a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007872:	4b07      	ldr	r3, [pc, #28]	@ (8007890 <vTaskDelay+0x68>)
 8007874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200010e4 	.word	0x200010e4
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	@ 0x28
 8007898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078a2:	463a      	mov	r2, r7
 80078a4:	1d39      	adds	r1, r7, #4
 80078a6:	f107 0308 	add.w	r3, r7, #8
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fc72 	bl	8006194 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2300      	movs	r3, #0
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	460a      	mov	r2, r1
 80078c2:	4924      	ldr	r1, [pc, #144]	@ (8007954 <vTaskStartScheduler+0xc0>)
 80078c4:	4824      	ldr	r0, [pc, #144]	@ (8007958 <vTaskStartScheduler+0xc4>)
 80078c6:	f7ff fd71 	bl	80073ac <xTaskCreateStatic>
 80078ca:	4603      	mov	r3, r0
 80078cc:	4a23      	ldr	r2, [pc, #140]	@ (800795c <vTaskStartScheduler+0xc8>)
 80078ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078d0:	4b22      	ldr	r3, [pc, #136]	@ (800795c <vTaskStartScheduler+0xc8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078d8:	2301      	movs	r3, #1
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e001      	b.n	80078e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d102      	bne.n	80078ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078e8:	f000 fe28 	bl	800853c <xTimerCreateTimerTask>
 80078ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d11b      	bne.n	800792c <vTaskStartScheduler+0x98>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	613b      	str	r3, [r7, #16]
}
 8007906:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007908:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <vTaskStartScheduler+0xcc>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3354      	adds	r3, #84	@ 0x54
 800790e:	4a15      	ldr	r2, [pc, #84]	@ (8007964 <vTaskStartScheduler+0xd0>)
 8007910:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007912:	4b15      	ldr	r3, [pc, #84]	@ (8007968 <vTaskStartScheduler+0xd4>)
 8007914:	f04f 32ff 	mov.w	r2, #4294967295
 8007918:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800791a:	4b14      	ldr	r3, [pc, #80]	@ (800796c <vTaskStartScheduler+0xd8>)
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007920:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <vTaskStartScheduler+0xdc>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007926:	f001 f9df 	bl	8008ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800792a:	e00f      	b.n	800794c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d10b      	bne.n	800794c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <vTaskStartScheduler+0xb4>
}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	0800de94 	.word	0x0800de94
 8007958:	08007fc1 	.word	0x08007fc1
 800795c:	200010e0 	.word	0x200010e0
 8007960:	20000be8 	.word	0x20000be8
 8007964:	2000001c 	.word	0x2000001c
 8007968:	200010dc 	.word	0x200010dc
 800796c:	200010c8 	.word	0x200010c8
 8007970:	200010c0 	.word	0x200010c0

08007974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007978:	4b04      	ldr	r3, [pc, #16]	@ (800798c <vTaskSuspendAll+0x18>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	4a03      	ldr	r2, [pc, #12]	@ (800798c <vTaskSuspendAll+0x18>)
 8007980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007982:	bf00      	nop
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	200010e4 	.word	0x200010e4

08007990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800799e:	4b42      	ldr	r3, [pc, #264]	@ (8007aa8 <xTaskResumeAll+0x118>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <xTaskResumeAll+0x2e>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	603b      	str	r3, [r7, #0]
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079be:	f001 fa17 	bl	8008df0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079c2:	4b39      	ldr	r3, [pc, #228]	@ (8007aa8 <xTaskResumeAll+0x118>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	4a37      	ldr	r2, [pc, #220]	@ (8007aa8 <xTaskResumeAll+0x118>)
 80079ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079cc:	4b36      	ldr	r3, [pc, #216]	@ (8007aa8 <xTaskResumeAll+0x118>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d162      	bne.n	8007a9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079d4:	4b35      	ldr	r3, [pc, #212]	@ (8007aac <xTaskResumeAll+0x11c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d05e      	beq.n	8007a9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079dc:	e02f      	b.n	8007a3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079de:	4b34      	ldr	r3, [pc, #208]	@ (8007ab0 <xTaskResumeAll+0x120>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3318      	adds	r3, #24
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fc8a 	bl	8006304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe fc85 	bl	8006304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fe:	4b2d      	ldr	r3, [pc, #180]	@ (8007ab4 <xTaskResumeAll+0x124>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d903      	bls.n	8007a0e <xTaskResumeAll+0x7e>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab4 <xTaskResumeAll+0x124>)
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4a27      	ldr	r2, [pc, #156]	@ (8007ab8 <xTaskResumeAll+0x128>)
 8007a1c:	441a      	add	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fe fc12 	bl	800624e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2e:	4b23      	ldr	r3, [pc, #140]	@ (8007abc <xTaskResumeAll+0x12c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d302      	bcc.n	8007a3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007a38:	4b21      	ldr	r3, [pc, #132]	@ (8007ac0 <xTaskResumeAll+0x130>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab0 <xTaskResumeAll+0x120>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1cb      	bne.n	80079de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a4c:	f000 fb74 	bl	8008138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a50:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac4 <xTaskResumeAll+0x134>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d010      	beq.n	8007a7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a5c:	f000 f856 	bl	8007b0c <xTaskIncrementTick>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007a66:	4b16      	ldr	r3, [pc, #88]	@ (8007ac0 <xTaskResumeAll+0x130>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f1      	bne.n	8007a5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007a78:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <xTaskResumeAll+0x134>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a7e:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <xTaskResumeAll+0x130>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a86:	2301      	movs	r3, #1
 8007a88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <xTaskResumeAll+0x138>)
 8007a8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a9a:	f001 f9d9 	bl	8008e50 <vPortExitCritical>

	return xAlreadyYielded;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	200010e4 	.word	0x200010e4
 8007aac:	200010bc 	.word	0x200010bc
 8007ab0:	2000107c 	.word	0x2000107c
 8007ab4:	200010c4 	.word	0x200010c4
 8007ab8:	20000bec 	.word	0x20000bec
 8007abc:	20000be8 	.word	0x20000be8
 8007ac0:	200010d0 	.word	0x200010d0
 8007ac4:	200010cc 	.word	0x200010cc
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ad2:	4b04      	ldr	r3, [pc, #16]	@ (8007ae4 <xTaskGetTickCount+0x18>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ad8:	687b      	ldr	r3, [r7, #4]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr
 8007ae4:	200010c0 	.word	0x200010c0

08007ae8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aee:	f001 fa47 	bl	8008f80 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007af6:	4b04      	ldr	r3, [pc, #16]	@ (8007b08 <xTaskGetTickCountFromISR+0x20>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007afc:	683b      	ldr	r3, [r7, #0]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200010c0 	.word	0x200010c0

08007b0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b16:	4b4f      	ldr	r3, [pc, #316]	@ (8007c54 <xTaskIncrementTick+0x148>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f040 8090 	bne.w	8007c40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b20:	4b4d      	ldr	r3, [pc, #308]	@ (8007c58 <xTaskIncrementTick+0x14c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b28:	4a4b      	ldr	r2, [pc, #300]	@ (8007c58 <xTaskIncrementTick+0x14c>)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d121      	bne.n	8007b78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b34:	4b49      	ldr	r3, [pc, #292]	@ (8007c5c <xTaskIncrementTick+0x150>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	603b      	str	r3, [r7, #0]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <xTaskIncrementTick+0x46>
 8007b56:	4b41      	ldr	r3, [pc, #260]	@ (8007c5c <xTaskIncrementTick+0x150>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	4b40      	ldr	r3, [pc, #256]	@ (8007c60 <xTaskIncrementTick+0x154>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a3e      	ldr	r2, [pc, #248]	@ (8007c5c <xTaskIncrementTick+0x150>)
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	4a3e      	ldr	r2, [pc, #248]	@ (8007c60 <xTaskIncrementTick+0x154>)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c64 <xTaskIncrementTick+0x158>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	4a3c      	ldr	r2, [pc, #240]	@ (8007c64 <xTaskIncrementTick+0x158>)
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	f000 fae0 	bl	8008138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b78:	4b3b      	ldr	r3, [pc, #236]	@ (8007c68 <xTaskIncrementTick+0x15c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d349      	bcc.n	8007c16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b82:	4b36      	ldr	r3, [pc, #216]	@ (8007c5c <xTaskIncrementTick+0x150>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b8c:	4b36      	ldr	r3, [pc, #216]	@ (8007c68 <xTaskIncrementTick+0x15c>)
 8007b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b92:	601a      	str	r2, [r3, #0]
					break;
 8007b94:	e03f      	b.n	8007c16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b96:	4b31      	ldr	r3, [pc, #196]	@ (8007c5c <xTaskIncrementTick+0x150>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d203      	bcs.n	8007bb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bae:	4a2e      	ldr	r2, [pc, #184]	@ (8007c68 <xTaskIncrementTick+0x15c>)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bb4:	e02f      	b.n	8007c16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fba2 	bl	8006304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	3318      	adds	r3, #24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fb99 	bl	8006304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd6:	4b25      	ldr	r3, [pc, #148]	@ (8007c6c <xTaskIncrementTick+0x160>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d903      	bls.n	8007be6 <xTaskIncrementTick+0xda>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be2:	4a22      	ldr	r2, [pc, #136]	@ (8007c6c <xTaskIncrementTick+0x160>)
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c70 <xTaskIncrementTick+0x164>)
 8007bf4:	441a      	add	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f7fe fb26 	bl	800624e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c06:	4b1b      	ldr	r3, [pc, #108]	@ (8007c74 <xTaskIncrementTick+0x168>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d3b8      	bcc.n	8007b82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c10:	2301      	movs	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c14:	e7b5      	b.n	8007b82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c16:	4b17      	ldr	r3, [pc, #92]	@ (8007c74 <xTaskIncrementTick+0x168>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1c:	4914      	ldr	r1, [pc, #80]	@ (8007c70 <xTaskIncrementTick+0x164>)
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d901      	bls.n	8007c32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c32:	4b11      	ldr	r3, [pc, #68]	@ (8007c78 <xTaskIncrementTick+0x16c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e004      	b.n	8007c4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c40:	4b0e      	ldr	r3, [pc, #56]	@ (8007c7c <xTaskIncrementTick+0x170>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	4a0d      	ldr	r2, [pc, #52]	@ (8007c7c <xTaskIncrementTick+0x170>)
 8007c48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c4a:	697b      	ldr	r3, [r7, #20]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200010e4 	.word	0x200010e4
 8007c58:	200010c0 	.word	0x200010c0
 8007c5c:	20001074 	.word	0x20001074
 8007c60:	20001078 	.word	0x20001078
 8007c64:	200010d4 	.word	0x200010d4
 8007c68:	200010dc 	.word	0x200010dc
 8007c6c:	200010c4 	.word	0x200010c4
 8007c70:	20000bec 	.word	0x20000bec
 8007c74:	20000be8 	.word	0x20000be8
 8007c78:	200010d0 	.word	0x200010d0
 8007c7c:	200010cc 	.word	0x200010cc

08007c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c86:	4b2a      	ldr	r3, [pc, #168]	@ (8007d30 <vTaskSwitchContext+0xb0>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c8e:	4b29      	ldr	r3, [pc, #164]	@ (8007d34 <vTaskSwitchContext+0xb4>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c94:	e047      	b.n	8007d26 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007c96:	4b27      	ldr	r3, [pc, #156]	@ (8007d34 <vTaskSwitchContext+0xb4>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9c:	4b26      	ldr	r3, [pc, #152]	@ (8007d38 <vTaskSwitchContext+0xb8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e011      	b.n	8007cc8 <vTaskSwitchContext+0x48>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10b      	bne.n	8007cc2 <vTaskSwitchContext+0x42>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	607b      	str	r3, [r7, #4]
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <vTaskSwitchContext+0x3e>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	491c      	ldr	r1, [pc, #112]	@ (8007d3c <vTaskSwitchContext+0xbc>)
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0e3      	beq.n	8007ca4 <vTaskSwitchContext+0x24>
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a15      	ldr	r2, [pc, #84]	@ (8007d3c <vTaskSwitchContext+0xbc>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	60bb      	str	r3, [r7, #8]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d104      	bne.n	8007d0c <vTaskSwitchContext+0x8c>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	605a      	str	r2, [r3, #4]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	4a0b      	ldr	r2, [pc, #44]	@ (8007d40 <vTaskSwitchContext+0xc0>)
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	4a08      	ldr	r2, [pc, #32]	@ (8007d38 <vTaskSwitchContext+0xb8>)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d1c:	4b08      	ldr	r3, [pc, #32]	@ (8007d40 <vTaskSwitchContext+0xc0>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3354      	adds	r3, #84	@ 0x54
 8007d22:	4a08      	ldr	r2, [pc, #32]	@ (8007d44 <vTaskSwitchContext+0xc4>)
 8007d24:	6013      	str	r3, [r2, #0]
}
 8007d26:	bf00      	nop
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	200010e4 	.word	0x200010e4
 8007d34:	200010d0 	.word	0x200010d0
 8007d38:	200010c4 	.word	0x200010c4
 8007d3c:	20000bec 	.word	0x20000bec
 8007d40:	20000be8 	.word	0x20000be8
 8007d44:	2000001c 	.word	0x2000001c

08007d48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	60fb      	str	r3, [r7, #12]
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d70:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <vTaskPlaceOnEventList+0x48>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3318      	adds	r3, #24
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7fe fa8b 	bl	8006294 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6838      	ldr	r0, [r7, #0]
 8007d82:	f000 fb87 	bl	8008494 <prvAddCurrentTaskToDelayedList>
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000be8 	.word	0x20000be8

08007d94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10b      	bne.n	8007dbe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	617b      	str	r3, [r7, #20]
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8007de8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3318      	adds	r3, #24
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7fe fa41 	bl	800624e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	68b8      	ldr	r0, [r7, #8]
 8007ddc:	f000 fb5a 	bl	8008494 <prvAddCurrentTaskToDelayedList>
	}
 8007de0:	bf00      	nop
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000be8 	.word	0x20000be8

08007dec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	60fb      	str	r3, [r7, #12]
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	e7fd      	b.n	8007e16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3318      	adds	r3, #24
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fa70 	bl	8006304 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e24:	4b1d      	ldr	r3, [pc, #116]	@ (8007e9c <xTaskRemoveFromEventList+0xb0>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d11d      	bne.n	8007e68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fa67 	bl	8006304 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e3a:	4b19      	ldr	r3, [pc, #100]	@ (8007ea0 <xTaskRemoveFromEventList+0xb4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d903      	bls.n	8007e4a <xTaskRemoveFromEventList+0x5e>
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e46:	4a16      	ldr	r2, [pc, #88]	@ (8007ea0 <xTaskRemoveFromEventList+0xb4>)
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4a13      	ldr	r2, [pc, #76]	@ (8007ea4 <xTaskRemoveFromEventList+0xb8>)
 8007e58:	441a      	add	r2, r3
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4610      	mov	r0, r2
 8007e62:	f7fe f9f4 	bl	800624e <vListInsertEnd>
 8007e66:	e005      	b.n	8007e74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	3318      	adds	r3, #24
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	480e      	ldr	r0, [pc, #56]	@ (8007ea8 <xTaskRemoveFromEventList+0xbc>)
 8007e70:	f7fe f9ed 	bl	800624e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e78:	4b0c      	ldr	r3, [pc, #48]	@ (8007eac <xTaskRemoveFromEventList+0xc0>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d905      	bls.n	8007e8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e86:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <xTaskRemoveFromEventList+0xc4>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e001      	b.n	8007e92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	200010e4 	.word	0x200010e4
 8007ea0:	200010c4 	.word	0x200010c4
 8007ea4:	20000bec 	.word	0x20000bec
 8007ea8:	2000107c 	.word	0x2000107c
 8007eac:	20000be8 	.word	0x20000be8
 8007eb0:	200010d0 	.word	0x200010d0

08007eb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <vTaskInternalSetTimeOutState+0x24>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ec4:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <vTaskInternalSetTimeOutState+0x28>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	200010d4 	.word	0x200010d4
 8007edc:	200010c0 	.word	0x200010c0

08007ee0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	613b      	str	r3, [r7, #16]
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10b      	bne.n	8007f26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60fb      	str	r3, [r7, #12]
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	e7fd      	b.n	8007f22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f26:	f000 ff63 	bl	8008df0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa0 <xTaskCheckForTimeOut+0xc0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d102      	bne.n	8007f4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61fb      	str	r3, [r7, #28]
 8007f48:	e023      	b.n	8007f92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b15      	ldr	r3, [pc, #84]	@ (8007fa4 <xTaskCheckForTimeOut+0xc4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d007      	beq.n	8007f66 <xTaskCheckForTimeOut+0x86>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e015      	b.n	8007f92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d20b      	bcs.n	8007f88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ff99 	bl	8007eb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e004      	b.n	8007f92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f92:	f000 ff5d 	bl	8008e50 <vPortExitCritical>

	return xReturn;
 8007f96:	69fb      	ldr	r3, [r7, #28]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	200010c0 	.word	0x200010c0
 8007fa4:	200010d4 	.word	0x200010d4

08007fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fac:	4b03      	ldr	r3, [pc, #12]	@ (8007fbc <vTaskMissedYield+0x14>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	200010d0 	.word	0x200010d0

08007fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fc8:	f000 f852 	bl	8008070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <prvIdleTask+0x28>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d9f9      	bls.n	8007fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <prvIdleTask+0x2c>)
 8007fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fe4:	e7f0      	b.n	8007fc8 <prvIdleTask+0x8>
 8007fe6:	bf00      	nop
 8007fe8:	20000bec 	.word	0x20000bec
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	e00c      	b.n	8008016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4a12      	ldr	r2, [pc, #72]	@ (8008050 <prvInitialiseTaskLists+0x60>)
 8008008:	4413      	add	r3, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe f8f4 	bl	80061f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3301      	adds	r3, #1
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b37      	cmp	r3, #55	@ 0x37
 800801a:	d9ef      	bls.n	8007ffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800801c:	480d      	ldr	r0, [pc, #52]	@ (8008054 <prvInitialiseTaskLists+0x64>)
 800801e:	f7fe f8eb 	bl	80061f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008022:	480d      	ldr	r0, [pc, #52]	@ (8008058 <prvInitialiseTaskLists+0x68>)
 8008024:	f7fe f8e8 	bl	80061f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008028:	480c      	ldr	r0, [pc, #48]	@ (800805c <prvInitialiseTaskLists+0x6c>)
 800802a:	f7fe f8e5 	bl	80061f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800802e:	480c      	ldr	r0, [pc, #48]	@ (8008060 <prvInitialiseTaskLists+0x70>)
 8008030:	f7fe f8e2 	bl	80061f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008034:	480b      	ldr	r0, [pc, #44]	@ (8008064 <prvInitialiseTaskLists+0x74>)
 8008036:	f7fe f8df 	bl	80061f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800803a:	4b0b      	ldr	r3, [pc, #44]	@ (8008068 <prvInitialiseTaskLists+0x78>)
 800803c:	4a05      	ldr	r2, [pc, #20]	@ (8008054 <prvInitialiseTaskLists+0x64>)
 800803e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008040:	4b0a      	ldr	r3, [pc, #40]	@ (800806c <prvInitialiseTaskLists+0x7c>)
 8008042:	4a05      	ldr	r2, [pc, #20]	@ (8008058 <prvInitialiseTaskLists+0x68>)
 8008044:	601a      	str	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000bec 	.word	0x20000bec
 8008054:	2000104c 	.word	0x2000104c
 8008058:	20001060 	.word	0x20001060
 800805c:	2000107c 	.word	0x2000107c
 8008060:	20001090 	.word	0x20001090
 8008064:	200010a8 	.word	0x200010a8
 8008068:	20001074 	.word	0x20001074
 800806c:	20001078 	.word	0x20001078

08008070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008076:	e019      	b.n	80080ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008078:	f000 feba 	bl	8008df0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807c:	4b10      	ldr	r3, [pc, #64]	@ (80080c0 <prvCheckTasksWaitingTermination+0x50>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe f93b 	bl	8006304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800808e:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <prvCheckTasksWaitingTermination+0x54>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3b01      	subs	r3, #1
 8008094:	4a0b      	ldr	r2, [pc, #44]	@ (80080c4 <prvCheckTasksWaitingTermination+0x54>)
 8008096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008098:	4b0b      	ldr	r3, [pc, #44]	@ (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3b01      	subs	r3, #1
 800809e:	4a0a      	ldr	r2, [pc, #40]	@ (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 80080a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080a2:	f000 fed5 	bl	8008e50 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f810 	bl	80080cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080ac:	4b06      	ldr	r3, [pc, #24]	@ (80080c8 <prvCheckTasksWaitingTermination+0x58>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e1      	bne.n	8008078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20001090 	.word	0x20001090
 80080c4:	200010bc 	.word	0x200010bc
 80080c8:	200010a4 	.word	0x200010a4

080080cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3354      	adds	r3, #84	@ 0x54
 80080d8:	4618      	mov	r0, r3
 80080da:	f002 fb35 	bl	800a748 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d108      	bne.n	80080fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 f855 	bl	800919c <vPortFree>
				vPortFree( pxTCB );
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 f852 	bl	800919c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080f8:	e019      	b.n	800812e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008100:	2b01      	cmp	r3, #1
 8008102:	d103      	bne.n	800810c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f849 	bl	800919c <vPortFree>
	}
 800810a:	e010      	b.n	800812e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008112:	2b02      	cmp	r3, #2
 8008114:	d00b      	beq.n	800812e <prvDeleteTCB+0x62>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <prvDeleteTCB+0x5e>
	}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <prvResetNextTaskUnblockTime+0x38>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <prvResetNextTaskUnblockTime+0x3c>)
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008150:	e008      	b.n	8008164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008152:	4b07      	ldr	r3, [pc, #28]	@ (8008170 <prvResetNextTaskUnblockTime+0x38>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	4a04      	ldr	r2, [pc, #16]	@ (8008174 <prvResetNextTaskUnblockTime+0x3c>)
 8008162:	6013      	str	r3, [r2, #0]
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20001074 	.word	0x20001074
 8008174:	200010dc 	.word	0x200010dc

08008178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800817e:	4b0b      	ldr	r3, [pc, #44]	@ (80081ac <xTaskGetSchedulerState+0x34>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008186:	2301      	movs	r3, #1
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	e008      	b.n	800819e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800818c:	4b08      	ldr	r3, [pc, #32]	@ (80081b0 <xTaskGetSchedulerState+0x38>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008194:	2302      	movs	r3, #2
 8008196:	607b      	str	r3, [r7, #4]
 8008198:	e001      	b.n	800819e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800819a:	2300      	movs	r3, #0
 800819c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800819e:	687b      	ldr	r3, [r7, #4]
	}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	200010c8 	.word	0x200010c8
 80081b0:	200010e4 	.word	0x200010e4

080081b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d051      	beq.n	800826e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008278 <xTaskPriorityInherit+0xc4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d241      	bcs.n	800825c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	db06      	blt.n	80081ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e0:	4b25      	ldr	r3, [pc, #148]	@ (8008278 <xTaskPriorityInherit+0xc4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6959      	ldr	r1, [r3, #20]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4a1f      	ldr	r2, [pc, #124]	@ (800827c <xTaskPriorityInherit+0xc8>)
 8008200:	4413      	add	r3, r2
 8008202:	4299      	cmp	r1, r3
 8008204:	d122      	bne.n	800824c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	3304      	adds	r3, #4
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe f87a 	bl	8006304 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008210:	4b19      	ldr	r3, [pc, #100]	@ (8008278 <xTaskPriorityInherit+0xc4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821e:	4b18      	ldr	r3, [pc, #96]	@ (8008280 <xTaskPriorityInherit+0xcc>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d903      	bls.n	800822e <xTaskPriorityInherit+0x7a>
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822a:	4a15      	ldr	r2, [pc, #84]	@ (8008280 <xTaskPriorityInherit+0xcc>)
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4a10      	ldr	r2, [pc, #64]	@ (800827c <xTaskPriorityInherit+0xc8>)
 800823c:	441a      	add	r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3304      	adds	r3, #4
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7fe f802 	bl	800624e <vListInsertEnd>
 800824a:	e004      	b.n	8008256 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800824c:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <xTaskPriorityInherit+0xc4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008256:	2301      	movs	r3, #1
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	e008      	b.n	800826e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008260:	4b05      	ldr	r3, [pc, #20]	@ (8008278 <xTaskPriorityInherit+0xc4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008266:	429a      	cmp	r2, r3
 8008268:	d201      	bcs.n	800826e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800826a:	2301      	movs	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800826e:	68fb      	ldr	r3, [r7, #12]
	}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20000be8 	.word	0x20000be8
 800827c:	20000bec 	.word	0x20000bec
 8008280:	200010c4 	.word	0x200010c4

08008284 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d058      	beq.n	800834c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800829a:	4b2f      	ldr	r3, [pc, #188]	@ (8008358 <xTaskPriorityDisinherit+0xd4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d00b      	beq.n	80082bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	60fb      	str	r3, [r7, #12]
}
 80082b6:	bf00      	nop
 80082b8:	bf00      	nop
 80082ba:	e7fd      	b.n	80082b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60bb      	str	r3, [r7, #8]
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	e7fd      	b.n	80082d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082e0:	1e5a      	subs	r2, r3, #1
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d02c      	beq.n	800834c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d128      	bne.n	800834c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe f800 	bl	8006304 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008310:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800831c:	4b0f      	ldr	r3, [pc, #60]	@ (800835c <xTaskPriorityDisinherit+0xd8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d903      	bls.n	800832c <xTaskPriorityDisinherit+0xa8>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	4a0c      	ldr	r2, [pc, #48]	@ (800835c <xTaskPriorityDisinherit+0xd8>)
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4a09      	ldr	r2, [pc, #36]	@ (8008360 <xTaskPriorityDisinherit+0xdc>)
 800833a:	441a      	add	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	3304      	adds	r3, #4
 8008340:	4619      	mov	r1, r3
 8008342:	4610      	mov	r0, r2
 8008344:	f7fd ff83 	bl	800624e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800834c:	697b      	ldr	r3, [r7, #20]
	}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000be8 	.word	0x20000be8
 800835c:	200010c4 	.word	0x200010c4
 8008360:	20000bec 	.word	0x20000bec

08008364 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008372:	2301      	movs	r3, #1
 8008374:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d06c      	beq.n	8008456 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10b      	bne.n	800839c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60fb      	str	r3, [r7, #12]
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d902      	bls.n	80083ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	e002      	b.n	80083b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d04c      	beq.n	8008456 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d147      	bne.n	8008456 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80083c6:	4b26      	ldr	r3, [pc, #152]	@ (8008460 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d10b      	bne.n	80083e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60bb      	str	r3, [r7, #8]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	db04      	blt.n	8008406 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	6959      	ldr	r1, [r3, #20]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4a13      	ldr	r2, [pc, #76]	@ (8008464 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008416:	4413      	add	r3, r2
 8008418:	4299      	cmp	r1, r3
 800841a:	d11c      	bne.n	8008456 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	3304      	adds	r3, #4
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd ff6f 	bl	8006304 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842a:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d903      	bls.n	800843a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008436:	4a0c      	ldr	r2, [pc, #48]	@ (8008468 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4a07      	ldr	r2, [pc, #28]	@ (8008464 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008448:	441a      	add	r2, r3
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fd fefc 	bl	800624e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008456:	bf00      	nop
 8008458:	3720      	adds	r7, #32
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000be8 	.word	0x20000be8
 8008464:	20000bec 	.word	0x20000bec
 8008468:	200010c4 	.word	0x200010c4

0800846c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008470:	4b07      	ldr	r3, [pc, #28]	@ (8008490 <pvTaskIncrementMutexHeldCount+0x24>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008478:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <pvTaskIncrementMutexHeldCount+0x24>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800847e:	3201      	adds	r2, #1
 8008480:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008482:	4b03      	ldr	r3, [pc, #12]	@ (8008490 <pvTaskIncrementMutexHeldCount+0x24>)
 8008484:	681b      	ldr	r3, [r3, #0]
	}
 8008486:	4618      	mov	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000be8 	.word	0x20000be8

08008494 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800849e:	4b21      	ldr	r3, [pc, #132]	@ (8008524 <prvAddCurrentTaskToDelayedList+0x90>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a4:	4b20      	ldr	r3, [pc, #128]	@ (8008528 <prvAddCurrentTaskToDelayedList+0x94>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3304      	adds	r3, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fd ff2a 	bl	8006304 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d10a      	bne.n	80084ce <prvAddCurrentTaskToDelayedList+0x3a>
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084be:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <prvAddCurrentTaskToDelayedList+0x94>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4819      	ldr	r0, [pc, #100]	@ (800852c <prvAddCurrentTaskToDelayedList+0x98>)
 80084c8:	f7fd fec1 	bl	800624e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084cc:	e026      	b.n	800851c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4413      	add	r3, r2
 80084d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084d6:	4b14      	ldr	r3, [pc, #80]	@ (8008528 <prvAddCurrentTaskToDelayedList+0x94>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d209      	bcs.n	80084fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084e6:	4b12      	ldr	r3, [pc, #72]	@ (8008530 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008528 <prvAddCurrentTaskToDelayedList+0x94>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4619      	mov	r1, r3
 80084f2:	4610      	mov	r0, r2
 80084f4:	f7fd fece 	bl	8006294 <vListInsert>
}
 80084f8:	e010      	b.n	800851c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008534 <prvAddCurrentTaskToDelayedList+0xa0>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008528 <prvAddCurrentTaskToDelayedList+0x94>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f7fd fec4 	bl	8006294 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <prvAddCurrentTaskToDelayedList+0xa4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	d202      	bcs.n	800851c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008516:	4a08      	ldr	r2, [pc, #32]	@ (8008538 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6013      	str	r3, [r2, #0]
}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	200010c0 	.word	0x200010c0
 8008528:	20000be8 	.word	0x20000be8
 800852c:	200010a8 	.word	0x200010a8
 8008530:	20001078 	.word	0x20001078
 8008534:	20001074 	.word	0x20001074
 8008538:	200010dc 	.word	0x200010dc

0800853c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	@ 0x28
 8008540:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008546:	f000 fb11 	bl	8008b6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800854a:	4b1d      	ldr	r3, [pc, #116]	@ (80085c0 <xTimerCreateTimerTask+0x84>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d021      	beq.n	8008596 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008556:	2300      	movs	r3, #0
 8008558:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800855a:	1d3a      	adds	r2, r7, #4
 800855c:	f107 0108 	add.w	r1, r7, #8
 8008560:	f107 030c 	add.w	r3, r7, #12
 8008564:	4618      	mov	r0, r3
 8008566:	f7fd fe2d 	bl	80061c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	9202      	str	r2, [sp, #8]
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	2302      	movs	r3, #2
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	460a      	mov	r2, r1
 800857c:	4911      	ldr	r1, [pc, #68]	@ (80085c4 <xTimerCreateTimerTask+0x88>)
 800857e:	4812      	ldr	r0, [pc, #72]	@ (80085c8 <xTimerCreateTimerTask+0x8c>)
 8008580:	f7fe ff14 	bl	80073ac <xTaskCreateStatic>
 8008584:	4603      	mov	r3, r0
 8008586:	4a11      	ldr	r2, [pc, #68]	@ (80085cc <xTimerCreateTimerTask+0x90>)
 8008588:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800858a:	4b10      	ldr	r3, [pc, #64]	@ (80085cc <xTimerCreateTimerTask+0x90>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008592:	2301      	movs	r3, #1
 8008594:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	613b      	str	r3, [r7, #16]
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085b4:	697b      	ldr	r3, [r7, #20]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20001118 	.word	0x20001118
 80085c4:	0800de9c 	.word	0x0800de9c
 80085c8:	08008709 	.word	0x08008709
 80085cc:	2000111c 	.word	0x2000111c

080085d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08a      	sub	sp, #40	@ 0x28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085de:	2300      	movs	r3, #0
 80085e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <xTimerGenericCommand+0x30>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	623b      	str	r3, [r7, #32]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008600:	4b19      	ldr	r3, [pc, #100]	@ (8008668 <xTimerGenericCommand+0x98>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d02a      	beq.n	800865e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b05      	cmp	r3, #5
 8008618:	dc18      	bgt.n	800864c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800861a:	f7ff fdad 	bl	8008178 <xTaskGetSchedulerState>
 800861e:	4603      	mov	r3, r0
 8008620:	2b02      	cmp	r3, #2
 8008622:	d109      	bne.n	8008638 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008624:	4b10      	ldr	r3, [pc, #64]	@ (8008668 <xTimerGenericCommand+0x98>)
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	f107 0110 	add.w	r1, r7, #16
 800862c:	2300      	movs	r3, #0
 800862e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008630:	f7fe f846 	bl	80066c0 <xQueueGenericSend>
 8008634:	6278      	str	r0, [r7, #36]	@ 0x24
 8008636:	e012      	b.n	800865e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008638:	4b0b      	ldr	r3, [pc, #44]	@ (8008668 <xTimerGenericCommand+0x98>)
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	f107 0110 	add.w	r1, r7, #16
 8008640:	2300      	movs	r3, #0
 8008642:	2200      	movs	r2, #0
 8008644:	f7fe f83c 	bl	80066c0 <xQueueGenericSend>
 8008648:	6278      	str	r0, [r7, #36]	@ 0x24
 800864a:	e008      	b.n	800865e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800864c:	4b06      	ldr	r3, [pc, #24]	@ (8008668 <xTimerGenericCommand+0x98>)
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	f107 0110 	add.w	r1, r7, #16
 8008654:	2300      	movs	r3, #0
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	f7fe f934 	bl	80068c4 <xQueueGenericSendFromISR>
 800865c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008660:	4618      	mov	r0, r3
 8008662:	3728      	adds	r7, #40	@ 0x28
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20001118 	.word	0x20001118

0800866c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af02      	add	r7, sp, #8
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008676:	4b23      	ldr	r3, [pc, #140]	@ (8008704 <prvProcessExpiredTimer+0x98>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3304      	adds	r3, #4
 8008684:	4618      	mov	r0, r3
 8008686:	f7fd fe3d 	bl	8006304 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d023      	beq.n	80086e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	699a      	ldr	r2, [r3, #24]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	18d1      	adds	r1, r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	6978      	ldr	r0, [r7, #20]
 80086a6:	f000 f8d3 	bl	8008850 <prvInsertTimerInActiveList>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d020      	beq.n	80086f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086b0:	2300      	movs	r3, #0
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	2300      	movs	r3, #0
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	2100      	movs	r1, #0
 80086ba:	6978      	ldr	r0, [r7, #20]
 80086bc:	f7ff ff88 	bl	80085d0 <xTimerGenericCommand>
 80086c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d114      	bne.n	80086f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	60fb      	str	r3, [r7, #12]
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	e7fd      	b.n	80086dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	6978      	ldr	r0, [r7, #20]
 80086f8:	4798      	blx	r3
}
 80086fa:	bf00      	nop
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20001110 	.word	0x20001110

08008708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008710:	f107 0308 	add.w	r3, r7, #8
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f859 	bl	80087cc <prvGetNextExpireTime>
 800871a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	4619      	mov	r1, r3
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 f805 	bl	8008730 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008726:	f000 f8d5 	bl	80088d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800872a:	bf00      	nop
 800872c:	e7f0      	b.n	8008710 <prvTimerTask+0x8>
	...

08008730 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800873a:	f7ff f91b 	bl	8007974 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800873e:	f107 0308 	add.w	r3, r7, #8
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f864 	bl	8008810 <prvSampleTimeNow>
 8008748:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d130      	bne.n	80087b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <prvProcessTimerOrBlockTask+0x3c>
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	429a      	cmp	r2, r3
 800875c:	d806      	bhi.n	800876c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800875e:	f7ff f917 	bl	8007990 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff ff81 	bl	800866c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800876a:	e024      	b.n	80087b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008772:	4b13      	ldr	r3, [pc, #76]	@ (80087c0 <prvProcessTimerOrBlockTask+0x90>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <prvProcessTimerOrBlockTask+0x50>
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <prvProcessTimerOrBlockTask+0x52>
 8008780:	2300      	movs	r3, #0
 8008782:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008784:	4b0f      	ldr	r3, [pc, #60]	@ (80087c4 <prvProcessTimerOrBlockTask+0x94>)
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	4619      	mov	r1, r3
 8008792:	f7fe fdd7 	bl	8007344 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008796:	f7ff f8fb 	bl	8007990 <xTaskResumeAll>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087a0:	4b09      	ldr	r3, [pc, #36]	@ (80087c8 <prvProcessTimerOrBlockTask+0x98>)
 80087a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
}
 80087b0:	e001      	b.n	80087b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087b2:	f7ff f8ed 	bl	8007990 <xTaskResumeAll>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20001114 	.word	0x20001114
 80087c4:	20001118 	.word	0x20001118
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087d4:	4b0d      	ldr	r3, [pc, #52]	@ (800880c <prvGetNextExpireTime+0x40>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <prvGetNextExpireTime+0x16>
 80087de:	2201      	movs	r2, #1
 80087e0:	e000      	b.n	80087e4 <prvGetNextExpireTime+0x18>
 80087e2:	2200      	movs	r2, #0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d105      	bne.n	80087fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f0:	4b06      	ldr	r3, [pc, #24]	@ (800880c <prvGetNextExpireTime+0x40>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	e001      	b.n	8008800 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008800:	68fb      	ldr	r3, [r7, #12]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	20001110 	.word	0x20001110

08008810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008818:	f7ff f958 	bl	8007acc <xTaskGetTickCount>
 800881c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800881e:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <prvSampleTimeNow+0x3c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	429a      	cmp	r2, r3
 8008826:	d205      	bcs.n	8008834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008828:	f000 f93a 	bl	8008aa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	e002      	b.n	800883a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800883a:	4a04      	ldr	r2, [pc, #16]	@ (800884c <prvSampleTimeNow+0x3c>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008840:	68fb      	ldr	r3, [r7, #12]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20001120 	.word	0x20001120

08008850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800885e:	2300      	movs	r3, #0
 8008860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	429a      	cmp	r2, r3
 8008874:	d812      	bhi.n	800889c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	1ad2      	subs	r2, r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	429a      	cmp	r2, r3
 8008882:	d302      	bcc.n	800888a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e01b      	b.n	80088c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800888a:	4b10      	ldr	r3, [pc, #64]	@ (80088cc <prvInsertTimerInActiveList+0x7c>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3304      	adds	r3, #4
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f7fd fcfd 	bl	8006294 <vListInsert>
 800889a:	e012      	b.n	80088c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d206      	bcs.n	80088b2 <prvInsertTimerInActiveList+0x62>
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d302      	bcc.n	80088b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088ac:	2301      	movs	r3, #1
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	e007      	b.n	80088c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088b2:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <prvInsertTimerInActiveList+0x80>)
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7fd fce9 	bl	8006294 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088c2:	697b      	ldr	r3, [r7, #20]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20001114 	.word	0x20001114
 80088d0:	20001110 	.word	0x20001110

080088d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08e      	sub	sp, #56	@ 0x38
 80088d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088da:	e0ce      	b.n	8008a7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	da19      	bge.n	8008916 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088e2:	1d3b      	adds	r3, r7, #4
 80088e4:	3304      	adds	r3, #4
 80088e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10b      	bne.n	8008906 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	61fb      	str	r3, [r7, #28]
}
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	e7fd      	b.n	8008902 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800890c:	6850      	ldr	r0, [r2, #4]
 800890e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008910:	6892      	ldr	r2, [r2, #8]
 8008912:	4611      	mov	r1, r2
 8008914:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f2c0 80ae 	blt.w	8008a7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d004      	beq.n	8008934 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	3304      	adds	r3, #4
 800892e:	4618      	mov	r0, r3
 8008930:	f7fd fce8 	bl	8006304 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008934:	463b      	mov	r3, r7
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff ff6a 	bl	8008810 <prvSampleTimeNow>
 800893c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b09      	cmp	r3, #9
 8008942:	f200 8097 	bhi.w	8008a74 <prvProcessReceivedCommands+0x1a0>
 8008946:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <prvProcessReceivedCommands+0x78>)
 8008948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894c:	08008975 	.word	0x08008975
 8008950:	08008975 	.word	0x08008975
 8008954:	08008975 	.word	0x08008975
 8008958:	080089eb 	.word	0x080089eb
 800895c:	080089ff 	.word	0x080089ff
 8008960:	08008a4b 	.word	0x08008a4b
 8008964:	08008975 	.word	0x08008975
 8008968:	08008975 	.word	0x08008975
 800896c:	080089eb 	.word	0x080089eb
 8008970:	080089ff 	.word	0x080089ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008976:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	b2da      	uxtb	r2, r3
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	18d1      	adds	r1, r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008994:	f7ff ff5c 	bl	8008850 <prvInsertTimerInActiveList>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d06c      	beq.n	8008a78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d061      	beq.n	8008a78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	441a      	add	r2, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	2300      	movs	r3, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c6:	f7ff fe03 	bl	80085d0 <xTimerGenericCommand>
 80089ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d152      	bne.n	8008a78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	61bb      	str	r3, [r7, #24]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089fc:	e03d      	b.n	8008a7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10b      	bne.n	8008a36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	617b      	str	r3, [r7, #20]
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	e7fd      	b.n	8008a32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	699a      	ldr	r2, [r3, #24]
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	18d1      	adds	r1, r2, r3
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a44:	f7ff ff04 	bl	8008850 <prvInsertTimerInActiveList>
					break;
 8008a48:	e017      	b.n	8008a7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a5a:	f000 fb9f 	bl	800919c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a5e:	e00c      	b.n	8008a7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a66:	f023 0301 	bic.w	r3, r3, #1
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a72:	e002      	b.n	8008a7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008a74:	bf00      	nop
 8008a76:	e000      	b.n	8008a7a <prvProcessReceivedCommands+0x1a6>
					break;
 8008a78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a7a:	4b08      	ldr	r3, [pc, #32]	@ (8008a9c <prvProcessReceivedCommands+0x1c8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	1d39      	adds	r1, r7, #4
 8008a80:	2200      	movs	r2, #0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe f84c 	bl	8006b20 <xQueueReceive>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f47f af26 	bne.w	80088dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	3730      	adds	r7, #48	@ 0x30
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20001118 	.word	0x20001118

08008aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008aa6:	e049      	b.n	8008b3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8008b64 <prvSwitchTimerLists+0xc4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8008b64 <prvSwitchTimerLists+0xc4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd fc1f 	bl	8006304 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02f      	beq.n	8008b3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d90e      	bls.n	8008b0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008afa:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <prvSwitchTimerLists+0xc4>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f7fd fbc5 	bl	8006294 <vListInsert>
 8008b0a:	e017      	b.n	8008b3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	2300      	movs	r3, #0
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	2100      	movs	r1, #0
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fd5a 	bl	80085d0 <xTimerGenericCommand>
 8008b1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10b      	bne.n	8008b3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	603b      	str	r3, [r7, #0]
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b3c:	4b09      	ldr	r3, [pc, #36]	@ (8008b64 <prvSwitchTimerLists+0xc4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1b0      	bne.n	8008aa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b46:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <prvSwitchTimerLists+0xc4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <prvSwitchTimerLists+0xc8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a04      	ldr	r2, [pc, #16]	@ (8008b64 <prvSwitchTimerLists+0xc4>)
 8008b52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b54:	4a04      	ldr	r2, [pc, #16]	@ (8008b68 <prvSwitchTimerLists+0xc8>)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	6013      	str	r3, [r2, #0]
}
 8008b5a:	bf00      	nop
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20001110 	.word	0x20001110
 8008b68:	20001114 	.word	0x20001114

08008b6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b72:	f000 f93d 	bl	8008df0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b76:	4b15      	ldr	r3, [pc, #84]	@ (8008bcc <prvCheckForValidListAndQueue+0x60>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d120      	bne.n	8008bc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b7e:	4814      	ldr	r0, [pc, #80]	@ (8008bd0 <prvCheckForValidListAndQueue+0x64>)
 8008b80:	f7fd fb3a 	bl	80061f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b84:	4813      	ldr	r0, [pc, #76]	@ (8008bd4 <prvCheckForValidListAndQueue+0x68>)
 8008b86:	f7fd fb37 	bl	80061f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b8a:	4b13      	ldr	r3, [pc, #76]	@ (8008bd8 <prvCheckForValidListAndQueue+0x6c>)
 8008b8c:	4a10      	ldr	r2, [pc, #64]	@ (8008bd0 <prvCheckForValidListAndQueue+0x64>)
 8008b8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b90:	4b12      	ldr	r3, [pc, #72]	@ (8008bdc <prvCheckForValidListAndQueue+0x70>)
 8008b92:	4a10      	ldr	r2, [pc, #64]	@ (8008bd4 <prvCheckForValidListAndQueue+0x68>)
 8008b94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b96:	2300      	movs	r3, #0
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	4b11      	ldr	r3, [pc, #68]	@ (8008be0 <prvCheckForValidListAndQueue+0x74>)
 8008b9c:	4a11      	ldr	r2, [pc, #68]	@ (8008be4 <prvCheckForValidListAndQueue+0x78>)
 8008b9e:	2110      	movs	r1, #16
 8008ba0:	200a      	movs	r0, #10
 8008ba2:	f7fd fc43 	bl	800642c <xQueueGenericCreateStatic>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4a08      	ldr	r2, [pc, #32]	@ (8008bcc <prvCheckForValidListAndQueue+0x60>)
 8008baa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008bac:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <prvCheckForValidListAndQueue+0x60>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <prvCheckForValidListAndQueue+0x60>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	490b      	ldr	r1, [pc, #44]	@ (8008be8 <prvCheckForValidListAndQueue+0x7c>)
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fb70 	bl	80072a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bc0:	f000 f946 	bl	8008e50 <vPortExitCritical>
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20001118 	.word	0x20001118
 8008bd0:	200010e8 	.word	0x200010e8
 8008bd4:	200010fc 	.word	0x200010fc
 8008bd8:	20001110 	.word	0x20001110
 8008bdc:	20001114 	.word	0x20001114
 8008be0:	200011c4 	.word	0x200011c4
 8008be4:	20001124 	.word	0x20001124
 8008be8:	0800dea4 	.word	0x0800dea4

08008bec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3b04      	subs	r3, #4
 8008bfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3b04      	subs	r3, #4
 8008c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f023 0201 	bic.w	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c1c:	4a08      	ldr	r2, [pc, #32]	@ (8008c40 <pxPortInitialiseStack+0x54>)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3b14      	subs	r3, #20
 8008c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3b20      	subs	r3, #32
 8008c32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c34:	68fb      	ldr	r3, [r7, #12]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr
 8008c40:	08008c45 	.word	0x08008c45

08008c44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c4e:	4b12      	ldr	r3, [pc, #72]	@ (8008c98 <prvTaskExitError+0x54>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c56:	d00b      	beq.n	8008c70 <prvTaskExitError+0x2c>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	60fb      	str	r3, [r7, #12]
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	e7fd      	b.n	8008c6c <prvTaskExitError+0x28>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60bb      	str	r3, [r7, #8]
}
 8008c82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c84:	bf00      	nop
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0fc      	beq.n	8008c86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bc80      	pop	{r7}
 8008c96:	4770      	bx	lr
 8008c98:	2000000c 	.word	0x2000000c
 8008c9c:	00000000 	.word	0x00000000

08008ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <pxCurrentTCBConst2>)
 8008ca2:	6819      	ldr	r1, [r3, #0]
 8008ca4:	6808      	ldr	r0, [r1, #0]
 8008ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008caa:	f380 8809 	msr	PSP, r0
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f04f 0000 	mov.w	r0, #0
 8008cb6:	f380 8811 	msr	BASEPRI, r0
 8008cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8008cbe:	4770      	bx	lr

08008cc0 <pxCurrentTCBConst2>:
 8008cc0:	20000be8 	.word	0x20000be8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008cc8:	4806      	ldr	r0, [pc, #24]	@ (8008ce4 <prvPortStartFirstTask+0x1c>)
 8008cca:	6800      	ldr	r0, [r0, #0]
 8008ccc:	6800      	ldr	r0, [r0, #0]
 8008cce:	f380 8808 	msr	MSP, r0
 8008cd2:	b662      	cpsie	i
 8008cd4:	b661      	cpsie	f
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	df00      	svc	0
 8008ce0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ce2:	bf00      	nop
 8008ce4:	e000ed08 	.word	0xe000ed08

08008ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cee:	4b3b      	ldr	r3, [pc, #236]	@ (8008ddc <xPortStartScheduler+0xf4>)
 8008cf0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	22ff      	movs	r2, #255	@ 0xff
 8008cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	4b33      	ldr	r3, [pc, #204]	@ (8008de0 <xPortStartScheduler+0xf8>)
 8008d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d16:	4b33      	ldr	r3, [pc, #204]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d18:	2207      	movs	r2, #7
 8008d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d1c:	e009      	b.n	8008d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008d1e:	4b31      	ldr	r3, [pc, #196]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	4a2f      	ldr	r2, [pc, #188]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3a:	2b80      	cmp	r3, #128	@ 0x80
 8008d3c:	d0ef      	beq.n	8008d1e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8008d3e:	4b29      	ldr	r3, [pc, #164]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f1c3 0307 	rsb	r3, r3, #7
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	d00b      	beq.n	8008d62 <xPortStartScheduler+0x7a>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	613b      	str	r3, [r7, #16]
}
 8008d5c:	bf00      	nop
 8008d5e:	bf00      	nop
 8008d60:	e7fd      	b.n	8008d5e <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d62:	4b20      	ldr	r3, [pc, #128]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f1c3 0307 	rsb	r3, r3, #7
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d00b      	beq.n	8008d86 <xPortStartScheduler+0x9e>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60fb      	str	r3, [r7, #12]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <xPortStartScheduler+0x9a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d86:	4b17      	ldr	r3, [pc, #92]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	4a15      	ldr	r2, [pc, #84]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d8e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d90:	4b14      	ldr	r3, [pc, #80]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d98:	4a12      	ldr	r2, [pc, #72]	@ (8008de4 <xPortStartScheduler+0xfc>)
 8008d9a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008da4:	4b10      	ldr	r3, [pc, #64]	@ (8008de8 <xPortStartScheduler+0x100>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a0f      	ldr	r2, [pc, #60]	@ (8008de8 <xPortStartScheduler+0x100>)
 8008daa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008dae:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008db0:	4b0d      	ldr	r3, [pc, #52]	@ (8008de8 <xPortStartScheduler+0x100>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a0c      	ldr	r2, [pc, #48]	@ (8008de8 <xPortStartScheduler+0x100>)
 8008db6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008dba:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dbc:	f000 f8be 	bl	8008f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dec <xPortStartScheduler+0x104>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dc6:	f7ff ff7f 	bl	8008cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dca:	f7fe ff59 	bl	8007c80 <vTaskSwitchContext>
	prvTaskExitError();
 8008dce:	f7ff ff39 	bl	8008c44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	e000e400 	.word	0xe000e400
 8008de0:	20001214 	.word	0x20001214
 8008de4:	20001218 	.word	0x20001218
 8008de8:	e000ed20 	.word	0xe000ed20
 8008dec:	2000000c 	.word	0x2000000c

08008df0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	607b      	str	r3, [r7, #4]
}
 8008e08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e48 <vPortEnterCritical+0x58>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	4a0d      	ldr	r2, [pc, #52]	@ (8008e48 <vPortEnterCritical+0x58>)
 8008e12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e14:	4b0c      	ldr	r3, [pc, #48]	@ (8008e48 <vPortEnterCritical+0x58>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d110      	bne.n	8008e3e <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <vPortEnterCritical+0x5c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00b      	beq.n	8008e3e <vPortEnterCritical+0x4e>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	603b      	str	r3, [r7, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <vPortEnterCritical+0x4a>
	}
}
 8008e3e:	bf00      	nop
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bc80      	pop	{r7}
 8008e46:	4770      	bx	lr
 8008e48:	2000000c 	.word	0x2000000c
 8008e4c:	e000ed04 	.word	0xe000ed04

08008e50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e56:	4b12      	ldr	r3, [pc, #72]	@ (8008ea0 <vPortExitCritical+0x50>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10b      	bne.n	8008e76 <vPortExitCritical+0x26>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	e7fd      	b.n	8008e72 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e76:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea0 <vPortExitCritical+0x50>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	4a08      	ldr	r2, [pc, #32]	@ (8008ea0 <vPortExitCritical+0x50>)
 8008e7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e80:	4b07      	ldr	r3, [pc, #28]	@ (8008ea0 <vPortExitCritical+0x50>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d105      	bne.n	8008e94 <vPortExitCritical+0x44>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	f383 8811 	msr	BASEPRI, r3
}
 8008e92:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bc80      	pop	{r7}
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	2000000c 	.word	0x2000000c
	...

08008eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008eb0:	f3ef 8009 	mrs	r0, PSP
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <pxCurrentTCBConst>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ec0:	6010      	str	r0, [r2, #0]
 8008ec2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008ec6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008eca:	f380 8811 	msr	BASEPRI, r0
 8008ece:	f7fe fed7 	bl	8007c80 <vTaskSwitchContext>
 8008ed2:	f04f 0000 	mov.w	r0, #0
 8008ed6:	f380 8811 	msr	BASEPRI, r0
 8008eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ede:	6819      	ldr	r1, [r3, #0]
 8008ee0:	6808      	ldr	r0, [r1, #0]
 8008ee2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ee6:	f380 8809 	msr	PSP, r0
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	4770      	bx	lr

08008ef0 <pxCurrentTCBConst>:
 8008ef0:	20000be8 	.word	0x20000be8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	607b      	str	r3, [r7, #4]
}
 8008f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f12:	f7fe fdfb 	bl	8007b0c <xTaskIncrementTick>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <xPortSysTickHandler+0x40>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	f383 8811 	msr	BASEPRI, r3
}
 8008f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f40:	4b0a      	ldr	r3, [pc, #40]	@ (8008f6c <vPortSetupTimerInterrupt+0x30>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f46:	4b0a      	ldr	r3, [pc, #40]	@ (8008f70 <vPortSetupTimerInterrupt+0x34>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f4c:	4b09      	ldr	r3, [pc, #36]	@ (8008f74 <vPortSetupTimerInterrupt+0x38>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a09      	ldr	r2, [pc, #36]	@ (8008f78 <vPortSetupTimerInterrupt+0x3c>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	099b      	lsrs	r3, r3, #6
 8008f58:	4a08      	ldr	r2, [pc, #32]	@ (8008f7c <vPortSetupTimerInterrupt+0x40>)
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f5e:	4b03      	ldr	r3, [pc, #12]	@ (8008f6c <vPortSetupTimerInterrupt+0x30>)
 8008f60:	2207      	movs	r2, #7
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bc80      	pop	{r7}
 8008f6a:	4770      	bx	lr
 8008f6c:	e000e010 	.word	0xe000e010
 8008f70:	e000e018 	.word	0xe000e018
 8008f74:	20000000 	.word	0x20000000
 8008f78:	10624dd3 	.word	0x10624dd3
 8008f7c:	e000e014 	.word	0xe000e014

08008f80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f86:	f3ef 8305 	mrs	r3, IPSR
 8008f8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b0f      	cmp	r3, #15
 8008f90:	d915      	bls.n	8008fbe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f92:	4a17      	ldr	r2, [pc, #92]	@ (8008ff0 <vPortValidateInterruptPriority+0x70>)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f9c:	4b15      	ldr	r3, [pc, #84]	@ (8008ff4 <vPortValidateInterruptPriority+0x74>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	7afa      	ldrb	r2, [r7, #11]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d20b      	bcs.n	8008fbe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	607b      	str	r3, [r7, #4]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff8 <vPortValidateInterruptPriority+0x78>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008ffc <vPortValidateInterruptPriority+0x7c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d90b      	bls.n	8008fe6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	603b      	str	r3, [r7, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <vPortValidateInterruptPriority+0x62>
	}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr
 8008ff0:	e000e3f0 	.word	0xe000e3f0
 8008ff4:	20001214 	.word	0x20001214
 8008ff8:	e000ed0c 	.word	0xe000ed0c
 8008ffc:	20001218 	.word	0x20001218

08009000 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	@ 0x28
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009008:	2300      	movs	r3, #0
 800900a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800900c:	f7fe fcb2 	bl	8007974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009010:	4b5c      	ldr	r3, [pc, #368]	@ (8009184 <pvPortMalloc+0x184>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009018:	f000 f924 	bl	8009264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800901c:	4b5a      	ldr	r3, [pc, #360]	@ (8009188 <pvPortMalloc+0x188>)
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4013      	ands	r3, r2
 8009024:	2b00      	cmp	r3, #0
 8009026:	f040 8095 	bne.w	8009154 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01e      	beq.n	800906e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009030:	2208      	movs	r2, #8
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4413      	add	r3, r2
 8009036:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	2b00      	cmp	r3, #0
 8009040:	d015      	beq.n	800906e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f023 0307 	bic.w	r3, r3, #7
 8009048:	3308      	adds	r3, #8
 800904a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <pvPortMalloc+0x6e>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	617b      	str	r3, [r7, #20]
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d06f      	beq.n	8009154 <pvPortMalloc+0x154>
 8009074:	4b45      	ldr	r3, [pc, #276]	@ (800918c <pvPortMalloc+0x18c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	429a      	cmp	r2, r3
 800907c:	d86a      	bhi.n	8009154 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800907e:	4b44      	ldr	r3, [pc, #272]	@ (8009190 <pvPortMalloc+0x190>)
 8009080:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009082:	4b43      	ldr	r3, [pc, #268]	@ (8009190 <pvPortMalloc+0x190>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009088:	e004      	b.n	8009094 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d903      	bls.n	80090a6 <pvPortMalloc+0xa6>
 800909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f1      	bne.n	800908a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090a6:	4b37      	ldr	r3, [pc, #220]	@ (8009184 <pvPortMalloc+0x184>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d051      	beq.n	8009154 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2208      	movs	r2, #8
 80090b6:	4413      	add	r3, r2
 80090b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	2308      	movs	r3, #8
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d920      	bls.n	8009114 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4413      	add	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <pvPortMalloc+0xfc>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	613b      	str	r3, [r7, #16]
}
 80090f6:	bf00      	nop
 80090f8:	bf00      	nop
 80090fa:	e7fd      	b.n	80090f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	1ad2      	subs	r2, r2, r3
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800910e:	69b8      	ldr	r0, [r7, #24]
 8009110:	f000 f90a 	bl	8009328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009114:	4b1d      	ldr	r3, [pc, #116]	@ (800918c <pvPortMalloc+0x18c>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	4a1b      	ldr	r2, [pc, #108]	@ (800918c <pvPortMalloc+0x18c>)
 8009120:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009122:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <pvPortMalloc+0x18c>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b1b      	ldr	r3, [pc, #108]	@ (8009194 <pvPortMalloc+0x194>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d203      	bcs.n	8009136 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800912e:	4b17      	ldr	r3, [pc, #92]	@ (800918c <pvPortMalloc+0x18c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a18      	ldr	r2, [pc, #96]	@ (8009194 <pvPortMalloc+0x194>)
 8009134:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	4b13      	ldr	r3, [pc, #76]	@ (8009188 <pvPortMalloc+0x188>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	431a      	orrs	r2, r3
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800914a:	4b13      	ldr	r3, [pc, #76]	@ (8009198 <pvPortMalloc+0x198>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3301      	adds	r3, #1
 8009150:	4a11      	ldr	r2, [pc, #68]	@ (8009198 <pvPortMalloc+0x198>)
 8009152:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009154:	f7fe fc1c 	bl	8007990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00b      	beq.n	800917a <pvPortMalloc+0x17a>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	60fb      	str	r3, [r7, #12]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <pvPortMalloc+0x176>
	return pvReturn;
 800917a:	69fb      	ldr	r3, [r7, #28]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3728      	adds	r7, #40	@ 0x28
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20002224 	.word	0x20002224
 8009188:	20002238 	.word	0x20002238
 800918c:	20002228 	.word	0x20002228
 8009190:	2000221c 	.word	0x2000221c
 8009194:	2000222c 	.word	0x2000222c
 8009198:	20002230 	.word	0x20002230

0800919c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d04f      	beq.n	800924e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091ae:	2308      	movs	r3, #8
 80091b0:	425b      	negs	r3, r3
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	4413      	add	r3, r2
 80091b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	4b25      	ldr	r3, [pc, #148]	@ (8009258 <vPortFree+0xbc>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4013      	ands	r3, r2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10b      	bne.n	80091e2 <vPortFree+0x46>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	60fb      	str	r3, [r7, #12]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00b      	beq.n	8009202 <vPortFree+0x66>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60bb      	str	r3, [r7, #8]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	4b14      	ldr	r3, [pc, #80]	@ (8009258 <vPortFree+0xbc>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01e      	beq.n	800924e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d11a      	bne.n	800924e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <vPortFree+0xbc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	43db      	mvns	r3, r3
 8009222:	401a      	ands	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009228:	f7fe fba4 	bl	8007974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	4b0a      	ldr	r3, [pc, #40]	@ (800925c <vPortFree+0xc0>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4413      	add	r3, r2
 8009236:	4a09      	ldr	r2, [pc, #36]	@ (800925c <vPortFree+0xc0>)
 8009238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800923a:	6938      	ldr	r0, [r7, #16]
 800923c:	f000 f874 	bl	8009328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009240:	4b07      	ldr	r3, [pc, #28]	@ (8009260 <vPortFree+0xc4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	4a06      	ldr	r2, [pc, #24]	@ (8009260 <vPortFree+0xc4>)
 8009248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800924a:	f7fe fba1 	bl	8007990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800924e:	bf00      	nop
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20002238 	.word	0x20002238
 800925c:	20002228 	.word	0x20002228
 8009260:	20002234 	.word	0x20002234

08009264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800926a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800926e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009270:	4b27      	ldr	r3, [pc, #156]	@ (8009310 <prvHeapInit+0xac>)
 8009272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00c      	beq.n	8009298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3307      	adds	r3, #7
 8009282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	4a1f      	ldr	r2, [pc, #124]	@ (8009310 <prvHeapInit+0xac>)
 8009294:	4413      	add	r3, r2
 8009296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800929c:	4a1d      	ldr	r2, [pc, #116]	@ (8009314 <prvHeapInit+0xb0>)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009314 <prvHeapInit+0xb0>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092b0:	2208      	movs	r2, #8
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1a9b      	subs	r3, r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0307 	bic.w	r3, r3, #7
 80092be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a15      	ldr	r2, [pc, #84]	@ (8009318 <prvHeapInit+0xb4>)
 80092c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092c6:	4b14      	ldr	r3, [pc, #80]	@ (8009318 <prvHeapInit+0xb4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ce:	4b12      	ldr	r3, [pc, #72]	@ (8009318 <prvHeapInit+0xb4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009318 <prvHeapInit+0xb4>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4a0a      	ldr	r2, [pc, #40]	@ (800931c <prvHeapInit+0xb8>)
 80092f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4a09      	ldr	r2, [pc, #36]	@ (8009320 <prvHeapInit+0xbc>)
 80092fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092fc:	4b09      	ldr	r3, [pc, #36]	@ (8009324 <prvHeapInit+0xc0>)
 80092fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009302:	601a      	str	r2, [r3, #0]
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	2000121c 	.word	0x2000121c
 8009314:	2000221c 	.word	0x2000221c
 8009318:	20002224 	.word	0x20002224
 800931c:	2000222c 	.word	0x2000222c
 8009320:	20002228 	.word	0x20002228
 8009324:	20002238 	.word	0x20002238

08009328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009330:	4b27      	ldr	r3, [pc, #156]	@ (80093d0 <prvInsertBlockIntoFreeList+0xa8>)
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	e002      	b.n	800933c <prvInsertBlockIntoFreeList+0x14>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d8f7      	bhi.n	8009336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	4413      	add	r3, r2
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d108      	bne.n	800936a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	441a      	add	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	441a      	add	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d118      	bne.n	80093b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b14      	ldr	r3, [pc, #80]	@ (80093d4 <prvInsertBlockIntoFreeList+0xac>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d00d      	beq.n	80093a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	e008      	b.n	80093b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093a6:	4b0b      	ldr	r3, [pc, #44]	@ (80093d4 <prvInsertBlockIntoFreeList+0xac>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	e003      	b.n	80093b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d002      	beq.n	80093c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093c6:	bf00      	nop
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr
 80093d0:	2000221c 	.word	0x2000221c
 80093d4:	20002224 	.word	0x20002224

080093d8 <map>:
#include "servo.h"

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	69b9      	ldr	r1, [r7, #24]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	1a8a      	subs	r2, r1, r2
 80093f2:	fb03 f202 	mul.w	r2, r3, r2
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	1acb      	subs	r3, r1, r3
 80093fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	4413      	add	r3, r2
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr
	...

08009410 <Servo_Write>:

void Servo_Write(TIM_HandleTypeDef *htim, uint16_t channel, uint8_t angle){
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af02      	add	r7, sp, #8
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	807b      	strh	r3, [r7, #2]
 800941c:	4613      	mov	r3, r2
 800941e:	707b      	strb	r3, [r7, #1]
	uint16_t ccr = map(angle, 0, 180, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
 8009420:	7878      	ldrb	r0, [r7, #1]
 8009422:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800942c:	22b4      	movs	r2, #180	@ 0xb4
 800942e:	2100      	movs	r1, #0
 8009430:	f7ff ffd2 	bl	80093d8 <map>
 8009434:	4603      	mov	r3, r0
 8009436:	81fb      	strh	r3, [r7, #14]
	switch (channel) {
 8009438:	887b      	ldrh	r3, [r7, #2]
 800943a:	2b0c      	cmp	r3, #12
 800943c:	d830      	bhi.n	80094a0 <Servo_Write+0x90>
 800943e:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <Servo_Write+0x34>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009479 	.word	0x08009479
 8009448:	080094a1 	.word	0x080094a1
 800944c:	080094a1 	.word	0x080094a1
 8009450:	080094a1 	.word	0x080094a1
 8009454:	08009483 	.word	0x08009483
 8009458:	080094a1 	.word	0x080094a1
 800945c:	080094a1 	.word	0x080094a1
 8009460:	080094a1 	.word	0x080094a1
 8009464:	0800948d 	.word	0x0800948d
 8009468:	080094a1 	.word	0x080094a1
 800946c:	080094a1 	.word	0x080094a1
 8009470:	080094a1 	.word	0x080094a1
 8009474:	08009497 	.word	0x08009497
		case TIM_CHANNEL_1:
			htim -> Instance -> CCR1 = ccr;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	89fa      	ldrh	r2, [r7, #14]
 800947e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8009480:	e00f      	b.n	80094a2 <Servo_Write+0x92>
		case TIM_CHANNEL_2:
			htim -> Instance -> CCR2 = ccr;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	89fa      	ldrh	r2, [r7, #14]
 8009488:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800948a:	e00a      	b.n	80094a2 <Servo_Write+0x92>
		case TIM_CHANNEL_3:
			htim -> Instance -> CCR3 = ccr;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	89fa      	ldrh	r2, [r7, #14]
 8009492:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8009494:	e005      	b.n	80094a2 <Servo_Write+0x92>
		case TIM_CHANNEL_4:
			htim -> Instance -> CCR4 = ccr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	89fa      	ldrh	r2, [r7, #14]
 800949c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800949e:	e000      	b.n	80094a2 <Servo_Write+0x92>
		default:
			break;
 80094a0:	bf00      	nop
	}
}
 80094a2:	bf00      	nop
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop

080094ac <atoi>:
 80094ac:	220a      	movs	r2, #10
 80094ae:	2100      	movs	r1, #0
 80094b0:	f000 b87c 	b.w	80095ac <strtol>

080094b4 <_strtol_l.constprop.0>:
 80094b4:	2b24      	cmp	r3, #36	@ 0x24
 80094b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ba:	4686      	mov	lr, r0
 80094bc:	4690      	mov	r8, r2
 80094be:	d801      	bhi.n	80094c4 <_strtol_l.constprop.0+0x10>
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d106      	bne.n	80094d2 <_strtol_l.constprop.0+0x1e>
 80094c4:	f001 f9cc 	bl	800a860 <__errno>
 80094c8:	2316      	movs	r3, #22
 80094ca:	6003      	str	r3, [r0, #0]
 80094cc:	2000      	movs	r0, #0
 80094ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d2:	460d      	mov	r5, r1
 80094d4:	4833      	ldr	r0, [pc, #204]	@ (80095a4 <_strtol_l.constprop.0+0xf0>)
 80094d6:	462a      	mov	r2, r5
 80094d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094dc:	5d06      	ldrb	r6, [r0, r4]
 80094de:	f016 0608 	ands.w	r6, r6, #8
 80094e2:	d1f8      	bne.n	80094d6 <_strtol_l.constprop.0+0x22>
 80094e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80094e6:	d12d      	bne.n	8009544 <_strtol_l.constprop.0+0x90>
 80094e8:	2601      	movs	r6, #1
 80094ea:	782c      	ldrb	r4, [r5, #0]
 80094ec:	1c95      	adds	r5, r2, #2
 80094ee:	f033 0210 	bics.w	r2, r3, #16
 80094f2:	d109      	bne.n	8009508 <_strtol_l.constprop.0+0x54>
 80094f4:	2c30      	cmp	r4, #48	@ 0x30
 80094f6:	d12a      	bne.n	800954e <_strtol_l.constprop.0+0x9a>
 80094f8:	782a      	ldrb	r2, [r5, #0]
 80094fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094fe:	2a58      	cmp	r2, #88	@ 0x58
 8009500:	d125      	bne.n	800954e <_strtol_l.constprop.0+0x9a>
 8009502:	2310      	movs	r3, #16
 8009504:	786c      	ldrb	r4, [r5, #1]
 8009506:	3502      	adds	r5, #2
 8009508:	2200      	movs	r2, #0
 800950a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800950e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009512:	fbbc f9f3 	udiv	r9, ip, r3
 8009516:	4610      	mov	r0, r2
 8009518:	fb03 ca19 	mls	sl, r3, r9, ip
 800951c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009520:	2f09      	cmp	r7, #9
 8009522:	d81b      	bhi.n	800955c <_strtol_l.constprop.0+0xa8>
 8009524:	463c      	mov	r4, r7
 8009526:	42a3      	cmp	r3, r4
 8009528:	dd27      	ble.n	800957a <_strtol_l.constprop.0+0xc6>
 800952a:	1c57      	adds	r7, r2, #1
 800952c:	d007      	beq.n	800953e <_strtol_l.constprop.0+0x8a>
 800952e:	4581      	cmp	r9, r0
 8009530:	d320      	bcc.n	8009574 <_strtol_l.constprop.0+0xc0>
 8009532:	d101      	bne.n	8009538 <_strtol_l.constprop.0+0x84>
 8009534:	45a2      	cmp	sl, r4
 8009536:	db1d      	blt.n	8009574 <_strtol_l.constprop.0+0xc0>
 8009538:	2201      	movs	r2, #1
 800953a:	fb00 4003 	mla	r0, r0, r3, r4
 800953e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009542:	e7eb      	b.n	800951c <_strtol_l.constprop.0+0x68>
 8009544:	2c2b      	cmp	r4, #43	@ 0x2b
 8009546:	bf04      	itt	eq
 8009548:	782c      	ldrbeq	r4, [r5, #0]
 800954a:	1c95      	addeq	r5, r2, #2
 800954c:	e7cf      	b.n	80094ee <_strtol_l.constprop.0+0x3a>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1da      	bne.n	8009508 <_strtol_l.constprop.0+0x54>
 8009552:	2c30      	cmp	r4, #48	@ 0x30
 8009554:	bf0c      	ite	eq
 8009556:	2308      	moveq	r3, #8
 8009558:	230a      	movne	r3, #10
 800955a:	e7d5      	b.n	8009508 <_strtol_l.constprop.0+0x54>
 800955c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009560:	2f19      	cmp	r7, #25
 8009562:	d801      	bhi.n	8009568 <_strtol_l.constprop.0+0xb4>
 8009564:	3c37      	subs	r4, #55	@ 0x37
 8009566:	e7de      	b.n	8009526 <_strtol_l.constprop.0+0x72>
 8009568:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800956c:	2f19      	cmp	r7, #25
 800956e:	d804      	bhi.n	800957a <_strtol_l.constprop.0+0xc6>
 8009570:	3c57      	subs	r4, #87	@ 0x57
 8009572:	e7d8      	b.n	8009526 <_strtol_l.constprop.0+0x72>
 8009574:	f04f 32ff 	mov.w	r2, #4294967295
 8009578:	e7e1      	b.n	800953e <_strtol_l.constprop.0+0x8a>
 800957a:	1c53      	adds	r3, r2, #1
 800957c:	d108      	bne.n	8009590 <_strtol_l.constprop.0+0xdc>
 800957e:	2322      	movs	r3, #34	@ 0x22
 8009580:	4660      	mov	r0, ip
 8009582:	f8ce 3000 	str.w	r3, [lr]
 8009586:	f1b8 0f00 	cmp.w	r8, #0
 800958a:	d0a0      	beq.n	80094ce <_strtol_l.constprop.0+0x1a>
 800958c:	1e69      	subs	r1, r5, #1
 800958e:	e006      	b.n	800959e <_strtol_l.constprop.0+0xea>
 8009590:	b106      	cbz	r6, 8009594 <_strtol_l.constprop.0+0xe0>
 8009592:	4240      	negs	r0, r0
 8009594:	f1b8 0f00 	cmp.w	r8, #0
 8009598:	d099      	beq.n	80094ce <_strtol_l.constprop.0+0x1a>
 800959a:	2a00      	cmp	r2, #0
 800959c:	d1f6      	bne.n	800958c <_strtol_l.constprop.0+0xd8>
 800959e:	f8c8 1000 	str.w	r1, [r8]
 80095a2:	e794      	b.n	80094ce <_strtol_l.constprop.0+0x1a>
 80095a4:	0800dfa7 	.word	0x0800dfa7

080095a8 <_strtol_r>:
 80095a8:	f7ff bf84 	b.w	80094b4 <_strtol_l.constprop.0>

080095ac <strtol>:
 80095ac:	4613      	mov	r3, r2
 80095ae:	460a      	mov	r2, r1
 80095b0:	4601      	mov	r1, r0
 80095b2:	4802      	ldr	r0, [pc, #8]	@ (80095bc <strtol+0x10>)
 80095b4:	6800      	ldr	r0, [r0, #0]
 80095b6:	f7ff bf7d 	b.w	80094b4 <_strtol_l.constprop.0>
 80095ba:	bf00      	nop
 80095bc:	2000001c 	.word	0x2000001c

080095c0 <__cvt>:
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c6:	461d      	mov	r5, r3
 80095c8:	bfbb      	ittet	lt
 80095ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80095ce:	461d      	movlt	r5, r3
 80095d0:	2300      	movge	r3, #0
 80095d2:	232d      	movlt	r3, #45	@ 0x2d
 80095d4:	b088      	sub	sp, #32
 80095d6:	4614      	mov	r4, r2
 80095d8:	bfb8      	it	lt
 80095da:	4614      	movlt	r4, r2
 80095dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80095de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80095e0:	7013      	strb	r3, [r2, #0]
 80095e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80095e8:	f023 0820 	bic.w	r8, r3, #32
 80095ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095f0:	d005      	beq.n	80095fe <__cvt+0x3e>
 80095f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80095f6:	d100      	bne.n	80095fa <__cvt+0x3a>
 80095f8:	3601      	adds	r6, #1
 80095fa:	2302      	movs	r3, #2
 80095fc:	e000      	b.n	8009600 <__cvt+0x40>
 80095fe:	2303      	movs	r3, #3
 8009600:	aa07      	add	r2, sp, #28
 8009602:	9204      	str	r2, [sp, #16]
 8009604:	aa06      	add	r2, sp, #24
 8009606:	e9cd a202 	strd	sl, r2, [sp, #8]
 800960a:	e9cd 3600 	strd	r3, r6, [sp]
 800960e:	4622      	mov	r2, r4
 8009610:	462b      	mov	r3, r5
 8009612:	f001 f9fd 	bl	800aa10 <_dtoa_r>
 8009616:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800961a:	4607      	mov	r7, r0
 800961c:	d119      	bne.n	8009652 <__cvt+0x92>
 800961e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009620:	07db      	lsls	r3, r3, #31
 8009622:	d50e      	bpl.n	8009642 <__cvt+0x82>
 8009624:	eb00 0906 	add.w	r9, r0, r6
 8009628:	2200      	movs	r2, #0
 800962a:	2300      	movs	r3, #0
 800962c:	4620      	mov	r0, r4
 800962e:	4629      	mov	r1, r5
 8009630:	f7f7 f9ba 	bl	80009a8 <__aeabi_dcmpeq>
 8009634:	b108      	cbz	r0, 800963a <__cvt+0x7a>
 8009636:	f8cd 901c 	str.w	r9, [sp, #28]
 800963a:	2230      	movs	r2, #48	@ 0x30
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	454b      	cmp	r3, r9
 8009640:	d31e      	bcc.n	8009680 <__cvt+0xc0>
 8009642:	4638      	mov	r0, r7
 8009644:	9b07      	ldr	r3, [sp, #28]
 8009646:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009648:	1bdb      	subs	r3, r3, r7
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	b008      	add	sp, #32
 800964e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009652:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009656:	eb00 0906 	add.w	r9, r0, r6
 800965a:	d1e5      	bne.n	8009628 <__cvt+0x68>
 800965c:	7803      	ldrb	r3, [r0, #0]
 800965e:	2b30      	cmp	r3, #48	@ 0x30
 8009660:	d10a      	bne.n	8009678 <__cvt+0xb8>
 8009662:	2200      	movs	r2, #0
 8009664:	2300      	movs	r3, #0
 8009666:	4620      	mov	r0, r4
 8009668:	4629      	mov	r1, r5
 800966a:	f7f7 f99d 	bl	80009a8 <__aeabi_dcmpeq>
 800966e:	b918      	cbnz	r0, 8009678 <__cvt+0xb8>
 8009670:	f1c6 0601 	rsb	r6, r6, #1
 8009674:	f8ca 6000 	str.w	r6, [sl]
 8009678:	f8da 3000 	ldr.w	r3, [sl]
 800967c:	4499      	add	r9, r3
 800967e:	e7d3      	b.n	8009628 <__cvt+0x68>
 8009680:	1c59      	adds	r1, r3, #1
 8009682:	9107      	str	r1, [sp, #28]
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	e7d9      	b.n	800963c <__cvt+0x7c>

08009688 <__exponent>:
 8009688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800968a:	2900      	cmp	r1, #0
 800968c:	bfb6      	itet	lt
 800968e:	232d      	movlt	r3, #45	@ 0x2d
 8009690:	232b      	movge	r3, #43	@ 0x2b
 8009692:	4249      	neglt	r1, r1
 8009694:	2909      	cmp	r1, #9
 8009696:	7002      	strb	r2, [r0, #0]
 8009698:	7043      	strb	r3, [r0, #1]
 800969a:	dd29      	ble.n	80096f0 <__exponent+0x68>
 800969c:	f10d 0307 	add.w	r3, sp, #7
 80096a0:	461d      	mov	r5, r3
 80096a2:	270a      	movs	r7, #10
 80096a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80096a8:	461a      	mov	r2, r3
 80096aa:	fb07 1416 	mls	r4, r7, r6, r1
 80096ae:	3430      	adds	r4, #48	@ 0x30
 80096b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096b4:	460c      	mov	r4, r1
 80096b6:	2c63      	cmp	r4, #99	@ 0x63
 80096b8:	4631      	mov	r1, r6
 80096ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80096be:	dcf1      	bgt.n	80096a4 <__exponent+0x1c>
 80096c0:	3130      	adds	r1, #48	@ 0x30
 80096c2:	1e94      	subs	r4, r2, #2
 80096c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096c8:	4623      	mov	r3, r4
 80096ca:	1c41      	adds	r1, r0, #1
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	d30a      	bcc.n	80096e6 <__exponent+0x5e>
 80096d0:	f10d 0309 	add.w	r3, sp, #9
 80096d4:	1a9b      	subs	r3, r3, r2
 80096d6:	42ac      	cmp	r4, r5
 80096d8:	bf88      	it	hi
 80096da:	2300      	movhi	r3, #0
 80096dc:	3302      	adds	r3, #2
 80096de:	4403      	add	r3, r0
 80096e0:	1a18      	subs	r0, r3, r0
 80096e2:	b003      	add	sp, #12
 80096e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096ee:	e7ed      	b.n	80096cc <__exponent+0x44>
 80096f0:	2330      	movs	r3, #48	@ 0x30
 80096f2:	3130      	adds	r1, #48	@ 0x30
 80096f4:	7083      	strb	r3, [r0, #2]
 80096f6:	70c1      	strb	r1, [r0, #3]
 80096f8:	1d03      	adds	r3, r0, #4
 80096fa:	e7f1      	b.n	80096e0 <__exponent+0x58>

080096fc <_printf_float>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	b091      	sub	sp, #68	@ 0x44
 8009702:	460c      	mov	r4, r1
 8009704:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009708:	4616      	mov	r6, r2
 800970a:	461f      	mov	r7, r3
 800970c:	4605      	mov	r5, r0
 800970e:	f001 f807 	bl	800a720 <_localeconv_r>
 8009712:	6803      	ldr	r3, [r0, #0]
 8009714:	4618      	mov	r0, r3
 8009716:	9308      	str	r3, [sp, #32]
 8009718:	f7f6 fd1a 	bl	8000150 <strlen>
 800971c:	2300      	movs	r3, #0
 800971e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009720:	f8d8 3000 	ldr.w	r3, [r8]
 8009724:	9009      	str	r0, [sp, #36]	@ 0x24
 8009726:	3307      	adds	r3, #7
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	f103 0208 	add.w	r2, r3, #8
 8009730:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009734:	f8d4 b000 	ldr.w	fp, [r4]
 8009738:	f8c8 2000 	str.w	r2, [r8]
 800973c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009740:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009744:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009746:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800974a:	f04f 32ff 	mov.w	r2, #4294967295
 800974e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009752:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009756:	4b9c      	ldr	r3, [pc, #624]	@ (80099c8 <_printf_float+0x2cc>)
 8009758:	f7f7 f958 	bl	8000a0c <__aeabi_dcmpun>
 800975c:	bb70      	cbnz	r0, 80097bc <_printf_float+0xc0>
 800975e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009762:	f04f 32ff 	mov.w	r2, #4294967295
 8009766:	4b98      	ldr	r3, [pc, #608]	@ (80099c8 <_printf_float+0x2cc>)
 8009768:	f7f7 f932 	bl	80009d0 <__aeabi_dcmple>
 800976c:	bb30      	cbnz	r0, 80097bc <_printf_float+0xc0>
 800976e:	2200      	movs	r2, #0
 8009770:	2300      	movs	r3, #0
 8009772:	4640      	mov	r0, r8
 8009774:	4649      	mov	r1, r9
 8009776:	f7f7 f921 	bl	80009bc <__aeabi_dcmplt>
 800977a:	b110      	cbz	r0, 8009782 <_printf_float+0x86>
 800977c:	232d      	movs	r3, #45	@ 0x2d
 800977e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009782:	4a92      	ldr	r2, [pc, #584]	@ (80099cc <_printf_float+0x2d0>)
 8009784:	4b92      	ldr	r3, [pc, #584]	@ (80099d0 <_printf_float+0x2d4>)
 8009786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800978a:	bf94      	ite	ls
 800978c:	4690      	movls	r8, r2
 800978e:	4698      	movhi	r8, r3
 8009790:	2303      	movs	r3, #3
 8009792:	f04f 0900 	mov.w	r9, #0
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	f02b 0304 	bic.w	r3, fp, #4
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	4633      	mov	r3, r6
 80097a0:	4621      	mov	r1, r4
 80097a2:	4628      	mov	r0, r5
 80097a4:	9700      	str	r7, [sp, #0]
 80097a6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80097a8:	f000 f9d4 	bl	8009b54 <_printf_common>
 80097ac:	3001      	adds	r0, #1
 80097ae:	f040 8090 	bne.w	80098d2 <_printf_float+0x1d6>
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	b011      	add	sp, #68	@ 0x44
 80097b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097bc:	4642      	mov	r2, r8
 80097be:	464b      	mov	r3, r9
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	f7f7 f922 	bl	8000a0c <__aeabi_dcmpun>
 80097c8:	b148      	cbz	r0, 80097de <_printf_float+0xe2>
 80097ca:	464b      	mov	r3, r9
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bfb8      	it	lt
 80097d0:	232d      	movlt	r3, #45	@ 0x2d
 80097d2:	4a80      	ldr	r2, [pc, #512]	@ (80099d4 <_printf_float+0x2d8>)
 80097d4:	bfb8      	it	lt
 80097d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097da:	4b7f      	ldr	r3, [pc, #508]	@ (80099d8 <_printf_float+0x2dc>)
 80097dc:	e7d3      	b.n	8009786 <_printf_float+0x8a>
 80097de:	6863      	ldr	r3, [r4, #4]
 80097e0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	d13f      	bne.n	8009868 <_printf_float+0x16c>
 80097e8:	2306      	movs	r3, #6
 80097ea:	6063      	str	r3, [r4, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	9206      	str	r2, [sp, #24]
 80097f6:	aa0e      	add	r2, sp, #56	@ 0x38
 80097f8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80097fc:	aa0d      	add	r2, sp, #52	@ 0x34
 80097fe:	9203      	str	r2, [sp, #12]
 8009800:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009804:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009808:	6863      	ldr	r3, [r4, #4]
 800980a:	4642      	mov	r2, r8
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	4628      	mov	r0, r5
 8009810:	464b      	mov	r3, r9
 8009812:	910a      	str	r1, [sp, #40]	@ 0x28
 8009814:	f7ff fed4 	bl	80095c0 <__cvt>
 8009818:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800981a:	4680      	mov	r8, r0
 800981c:	2947      	cmp	r1, #71	@ 0x47
 800981e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009820:	d128      	bne.n	8009874 <_printf_float+0x178>
 8009822:	1cc8      	adds	r0, r1, #3
 8009824:	db02      	blt.n	800982c <_printf_float+0x130>
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	4299      	cmp	r1, r3
 800982a:	dd40      	ble.n	80098ae <_printf_float+0x1b2>
 800982c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009830:	fa5f fa8a 	uxtb.w	sl, sl
 8009834:	4652      	mov	r2, sl
 8009836:	3901      	subs	r1, #1
 8009838:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800983c:	910d      	str	r1, [sp, #52]	@ 0x34
 800983e:	f7ff ff23 	bl	8009688 <__exponent>
 8009842:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009844:	4681      	mov	r9, r0
 8009846:	1813      	adds	r3, r2, r0
 8009848:	2a01      	cmp	r2, #1
 800984a:	6123      	str	r3, [r4, #16]
 800984c:	dc02      	bgt.n	8009854 <_printf_float+0x158>
 800984e:	6822      	ldr	r2, [r4, #0]
 8009850:	07d2      	lsls	r2, r2, #31
 8009852:	d501      	bpl.n	8009858 <_printf_float+0x15c>
 8009854:	3301      	adds	r3, #1
 8009856:	6123      	str	r3, [r4, #16]
 8009858:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800985c:	2b00      	cmp	r3, #0
 800985e:	d09e      	beq.n	800979e <_printf_float+0xa2>
 8009860:	232d      	movs	r3, #45	@ 0x2d
 8009862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009866:	e79a      	b.n	800979e <_printf_float+0xa2>
 8009868:	2947      	cmp	r1, #71	@ 0x47
 800986a:	d1bf      	bne.n	80097ec <_printf_float+0xf0>
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1bd      	bne.n	80097ec <_printf_float+0xf0>
 8009870:	2301      	movs	r3, #1
 8009872:	e7ba      	b.n	80097ea <_printf_float+0xee>
 8009874:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009878:	d9dc      	bls.n	8009834 <_printf_float+0x138>
 800987a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800987e:	d118      	bne.n	80098b2 <_printf_float+0x1b6>
 8009880:	2900      	cmp	r1, #0
 8009882:	6863      	ldr	r3, [r4, #4]
 8009884:	dd0b      	ble.n	800989e <_printf_float+0x1a2>
 8009886:	6121      	str	r1, [r4, #16]
 8009888:	b913      	cbnz	r3, 8009890 <_printf_float+0x194>
 800988a:	6822      	ldr	r2, [r4, #0]
 800988c:	07d0      	lsls	r0, r2, #31
 800988e:	d502      	bpl.n	8009896 <_printf_float+0x19a>
 8009890:	3301      	adds	r3, #1
 8009892:	440b      	add	r3, r1
 8009894:	6123      	str	r3, [r4, #16]
 8009896:	f04f 0900 	mov.w	r9, #0
 800989a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800989c:	e7dc      	b.n	8009858 <_printf_float+0x15c>
 800989e:	b913      	cbnz	r3, 80098a6 <_printf_float+0x1aa>
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	07d2      	lsls	r2, r2, #31
 80098a4:	d501      	bpl.n	80098aa <_printf_float+0x1ae>
 80098a6:	3302      	adds	r3, #2
 80098a8:	e7f4      	b.n	8009894 <_printf_float+0x198>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e7f2      	b.n	8009894 <_printf_float+0x198>
 80098ae:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80098b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098b4:	4299      	cmp	r1, r3
 80098b6:	db05      	blt.n	80098c4 <_printf_float+0x1c8>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	6121      	str	r1, [r4, #16]
 80098bc:	07d8      	lsls	r0, r3, #31
 80098be:	d5ea      	bpl.n	8009896 <_printf_float+0x19a>
 80098c0:	1c4b      	adds	r3, r1, #1
 80098c2:	e7e7      	b.n	8009894 <_printf_float+0x198>
 80098c4:	2900      	cmp	r1, #0
 80098c6:	bfcc      	ite	gt
 80098c8:	2201      	movgt	r2, #1
 80098ca:	f1c1 0202 	rsble	r2, r1, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	e7e0      	b.n	8009894 <_printf_float+0x198>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	055a      	lsls	r2, r3, #21
 80098d6:	d407      	bmi.n	80098e8 <_printf_float+0x1ec>
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	4642      	mov	r2, r8
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	d12b      	bne.n	800993e <_printf_float+0x242>
 80098e6:	e764      	b.n	80097b2 <_printf_float+0xb6>
 80098e8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098ec:	f240 80dc 	bls.w	8009aa8 <_printf_float+0x3ac>
 80098f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098f4:	2200      	movs	r2, #0
 80098f6:	2300      	movs	r3, #0
 80098f8:	f7f7 f856 	bl	80009a8 <__aeabi_dcmpeq>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d033      	beq.n	8009968 <_printf_float+0x26c>
 8009900:	2301      	movs	r3, #1
 8009902:	4631      	mov	r1, r6
 8009904:	4628      	mov	r0, r5
 8009906:	4a35      	ldr	r2, [pc, #212]	@ (80099dc <_printf_float+0x2e0>)
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	f43f af51 	beq.w	80097b2 <_printf_float+0xb6>
 8009910:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009914:	4543      	cmp	r3, r8
 8009916:	db02      	blt.n	800991e <_printf_float+0x222>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	07d8      	lsls	r0, r3, #31
 800991c:	d50f      	bpl.n	800993e <_printf_float+0x242>
 800991e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009922:	4631      	mov	r1, r6
 8009924:	4628      	mov	r0, r5
 8009926:	47b8      	blx	r7
 8009928:	3001      	adds	r0, #1
 800992a:	f43f af42 	beq.w	80097b2 <_printf_float+0xb6>
 800992e:	f04f 0900 	mov.w	r9, #0
 8009932:	f108 38ff 	add.w	r8, r8, #4294967295
 8009936:	f104 0a1a 	add.w	sl, r4, #26
 800993a:	45c8      	cmp	r8, r9
 800993c:	dc09      	bgt.n	8009952 <_printf_float+0x256>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	079b      	lsls	r3, r3, #30
 8009942:	f100 8102 	bmi.w	8009b4a <_printf_float+0x44e>
 8009946:	68e0      	ldr	r0, [r4, #12]
 8009948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800994a:	4298      	cmp	r0, r3
 800994c:	bfb8      	it	lt
 800994e:	4618      	movlt	r0, r3
 8009950:	e731      	b.n	80097b6 <_printf_float+0xba>
 8009952:	2301      	movs	r3, #1
 8009954:	4652      	mov	r2, sl
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	f43f af28 	beq.w	80097b2 <_printf_float+0xb6>
 8009962:	f109 0901 	add.w	r9, r9, #1
 8009966:	e7e8      	b.n	800993a <_printf_float+0x23e>
 8009968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800996a:	2b00      	cmp	r3, #0
 800996c:	dc38      	bgt.n	80099e0 <_printf_float+0x2e4>
 800996e:	2301      	movs	r3, #1
 8009970:	4631      	mov	r1, r6
 8009972:	4628      	mov	r0, r5
 8009974:	4a19      	ldr	r2, [pc, #100]	@ (80099dc <_printf_float+0x2e0>)
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	f43f af1a 	beq.w	80097b2 <_printf_float+0xb6>
 800997e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009982:	ea59 0303 	orrs.w	r3, r9, r3
 8009986:	d102      	bne.n	800998e <_printf_float+0x292>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	07d9      	lsls	r1, r3, #31
 800998c:	d5d7      	bpl.n	800993e <_printf_float+0x242>
 800998e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009992:	4631      	mov	r1, r6
 8009994:	4628      	mov	r0, r5
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	f43f af0a 	beq.w	80097b2 <_printf_float+0xb6>
 800999e:	f04f 0a00 	mov.w	sl, #0
 80099a2:	f104 0b1a 	add.w	fp, r4, #26
 80099a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099a8:	425b      	negs	r3, r3
 80099aa:	4553      	cmp	r3, sl
 80099ac:	dc01      	bgt.n	80099b2 <_printf_float+0x2b6>
 80099ae:	464b      	mov	r3, r9
 80099b0:	e793      	b.n	80098da <_printf_float+0x1de>
 80099b2:	2301      	movs	r3, #1
 80099b4:	465a      	mov	r2, fp
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b8      	blx	r7
 80099bc:	3001      	adds	r0, #1
 80099be:	f43f aef8 	beq.w	80097b2 <_printf_float+0xb6>
 80099c2:	f10a 0a01 	add.w	sl, sl, #1
 80099c6:	e7ee      	b.n	80099a6 <_printf_float+0x2aa>
 80099c8:	7fefffff 	.word	0x7fefffff
 80099cc:	0800e0a7 	.word	0x0800e0a7
 80099d0:	0800e0ab 	.word	0x0800e0ab
 80099d4:	0800e0af 	.word	0x0800e0af
 80099d8:	0800e0b3 	.word	0x0800e0b3
 80099dc:	0800e0b7 	.word	0x0800e0b7
 80099e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099e2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80099e6:	4553      	cmp	r3, sl
 80099e8:	bfa8      	it	ge
 80099ea:	4653      	movge	r3, sl
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	4699      	mov	r9, r3
 80099f0:	dc36      	bgt.n	8009a60 <_printf_float+0x364>
 80099f2:	f04f 0b00 	mov.w	fp, #0
 80099f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099fa:	f104 021a 	add.w	r2, r4, #26
 80099fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a02:	eba3 0309 	sub.w	r3, r3, r9
 8009a06:	455b      	cmp	r3, fp
 8009a08:	dc31      	bgt.n	8009a6e <_printf_float+0x372>
 8009a0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a0c:	459a      	cmp	sl, r3
 8009a0e:	dc3a      	bgt.n	8009a86 <_printf_float+0x38a>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	07da      	lsls	r2, r3, #31
 8009a14:	d437      	bmi.n	8009a86 <_printf_float+0x38a>
 8009a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a18:	ebaa 0903 	sub.w	r9, sl, r3
 8009a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a1e:	ebaa 0303 	sub.w	r3, sl, r3
 8009a22:	4599      	cmp	r9, r3
 8009a24:	bfa8      	it	ge
 8009a26:	4699      	movge	r9, r3
 8009a28:	f1b9 0f00 	cmp.w	r9, #0
 8009a2c:	dc33      	bgt.n	8009a96 <_printf_float+0x39a>
 8009a2e:	f04f 0800 	mov.w	r8, #0
 8009a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a36:	f104 0b1a 	add.w	fp, r4, #26
 8009a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8009a40:	eba3 0309 	sub.w	r3, r3, r9
 8009a44:	4543      	cmp	r3, r8
 8009a46:	f77f af7a 	ble.w	800993e <_printf_float+0x242>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	465a      	mov	r2, fp
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	f43f aeac 	beq.w	80097b2 <_printf_float+0xb6>
 8009a5a:	f108 0801 	add.w	r8, r8, #1
 8009a5e:	e7ec      	b.n	8009a3a <_printf_float+0x33e>
 8009a60:	4642      	mov	r2, r8
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d1c2      	bne.n	80099f2 <_printf_float+0x2f6>
 8009a6c:	e6a1      	b.n	80097b2 <_printf_float+0xb6>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4631      	mov	r1, r6
 8009a72:	4628      	mov	r0, r5
 8009a74:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f43f ae9a 	beq.w	80097b2 <_printf_float+0xb6>
 8009a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a80:	f10b 0b01 	add.w	fp, fp, #1
 8009a84:	e7bb      	b.n	80099fe <_printf_float+0x302>
 8009a86:	4631      	mov	r1, r6
 8009a88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	d1c0      	bne.n	8009a16 <_printf_float+0x31a>
 8009a94:	e68d      	b.n	80097b2 <_printf_float+0xb6>
 8009a96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a98:	464b      	mov	r3, r9
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	4442      	add	r2, r8
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d1c3      	bne.n	8009a2e <_printf_float+0x332>
 8009aa6:	e684      	b.n	80097b2 <_printf_float+0xb6>
 8009aa8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009aac:	f1ba 0f01 	cmp.w	sl, #1
 8009ab0:	dc01      	bgt.n	8009ab6 <_printf_float+0x3ba>
 8009ab2:	07db      	lsls	r3, r3, #31
 8009ab4:	d536      	bpl.n	8009b24 <_printf_float+0x428>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4642      	mov	r2, r8
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f43f ae76 	beq.w	80097b2 <_printf_float+0xb6>
 8009ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f43f ae6e 	beq.w	80097b2 <_printf_float+0xb6>
 8009ad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ae2:	f7f6 ff61 	bl	80009a8 <__aeabi_dcmpeq>
 8009ae6:	b9c0      	cbnz	r0, 8009b1a <_printf_float+0x41e>
 8009ae8:	4653      	mov	r3, sl
 8009aea:	f108 0201 	add.w	r2, r8, #1
 8009aee:	4631      	mov	r1, r6
 8009af0:	4628      	mov	r0, r5
 8009af2:	47b8      	blx	r7
 8009af4:	3001      	adds	r0, #1
 8009af6:	d10c      	bne.n	8009b12 <_printf_float+0x416>
 8009af8:	e65b      	b.n	80097b2 <_printf_float+0xb6>
 8009afa:	2301      	movs	r3, #1
 8009afc:	465a      	mov	r2, fp
 8009afe:	4631      	mov	r1, r6
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b8      	blx	r7
 8009b04:	3001      	adds	r0, #1
 8009b06:	f43f ae54 	beq.w	80097b2 <_printf_float+0xb6>
 8009b0a:	f108 0801 	add.w	r8, r8, #1
 8009b0e:	45d0      	cmp	r8, sl
 8009b10:	dbf3      	blt.n	8009afa <_printf_float+0x3fe>
 8009b12:	464b      	mov	r3, r9
 8009b14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b18:	e6e0      	b.n	80098dc <_printf_float+0x1e0>
 8009b1a:	f04f 0800 	mov.w	r8, #0
 8009b1e:	f104 0b1a 	add.w	fp, r4, #26
 8009b22:	e7f4      	b.n	8009b0e <_printf_float+0x412>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4642      	mov	r2, r8
 8009b28:	e7e1      	b.n	8009aee <_printf_float+0x3f2>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	464a      	mov	r2, r9
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	f43f ae3c 	beq.w	80097b2 <_printf_float+0xb6>
 8009b3a:	f108 0801 	add.w	r8, r8, #1
 8009b3e:	68e3      	ldr	r3, [r4, #12]
 8009b40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009b42:	1a5b      	subs	r3, r3, r1
 8009b44:	4543      	cmp	r3, r8
 8009b46:	dcf0      	bgt.n	8009b2a <_printf_float+0x42e>
 8009b48:	e6fd      	b.n	8009946 <_printf_float+0x24a>
 8009b4a:	f04f 0800 	mov.w	r8, #0
 8009b4e:	f104 0919 	add.w	r9, r4, #25
 8009b52:	e7f4      	b.n	8009b3e <_printf_float+0x442>

08009b54 <_printf_common>:
 8009b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b58:	4616      	mov	r6, r2
 8009b5a:	4698      	mov	r8, r3
 8009b5c:	688a      	ldr	r2, [r1, #8]
 8009b5e:	690b      	ldr	r3, [r1, #16]
 8009b60:	4607      	mov	r7, r0
 8009b62:	4293      	cmp	r3, r2
 8009b64:	bfb8      	it	lt
 8009b66:	4613      	movlt	r3, r2
 8009b68:	6033      	str	r3, [r6, #0]
 8009b6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b6e:	460c      	mov	r4, r1
 8009b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b74:	b10a      	cbz	r2, 8009b7a <_printf_common+0x26>
 8009b76:	3301      	adds	r3, #1
 8009b78:	6033      	str	r3, [r6, #0]
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	0699      	lsls	r1, r3, #26
 8009b7e:	bf42      	ittt	mi
 8009b80:	6833      	ldrmi	r3, [r6, #0]
 8009b82:	3302      	addmi	r3, #2
 8009b84:	6033      	strmi	r3, [r6, #0]
 8009b86:	6825      	ldr	r5, [r4, #0]
 8009b88:	f015 0506 	ands.w	r5, r5, #6
 8009b8c:	d106      	bne.n	8009b9c <_printf_common+0x48>
 8009b8e:	f104 0a19 	add.w	sl, r4, #25
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	6832      	ldr	r2, [r6, #0]
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dc2b      	bgt.n	8009bf4 <_printf_common+0xa0>
 8009b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ba0:	6822      	ldr	r2, [r4, #0]
 8009ba2:	3b00      	subs	r3, #0
 8009ba4:	bf18      	it	ne
 8009ba6:	2301      	movne	r3, #1
 8009ba8:	0692      	lsls	r2, r2, #26
 8009baa:	d430      	bmi.n	8009c0e <_printf_common+0xba>
 8009bac:	4641      	mov	r1, r8
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bb4:	47c8      	blx	r9
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d023      	beq.n	8009c02 <_printf_common+0xae>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	6922      	ldr	r2, [r4, #16]
 8009bbe:	f003 0306 	and.w	r3, r3, #6
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	bf14      	ite	ne
 8009bc6:	2500      	movne	r5, #0
 8009bc8:	6833      	ldreq	r3, [r6, #0]
 8009bca:	f04f 0600 	mov.w	r6, #0
 8009bce:	bf08      	it	eq
 8009bd0:	68e5      	ldreq	r5, [r4, #12]
 8009bd2:	f104 041a 	add.w	r4, r4, #26
 8009bd6:	bf08      	it	eq
 8009bd8:	1aed      	subeq	r5, r5, r3
 8009bda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009bde:	bf08      	it	eq
 8009be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009be4:	4293      	cmp	r3, r2
 8009be6:	bfc4      	itt	gt
 8009be8:	1a9b      	subgt	r3, r3, r2
 8009bea:	18ed      	addgt	r5, r5, r3
 8009bec:	42b5      	cmp	r5, r6
 8009bee:	d11a      	bne.n	8009c26 <_printf_common+0xd2>
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	e008      	b.n	8009c06 <_printf_common+0xb2>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	4652      	mov	r2, sl
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	47c8      	blx	r9
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d103      	bne.n	8009c0a <_printf_common+0xb6>
 8009c02:	f04f 30ff 	mov.w	r0, #4294967295
 8009c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0a:	3501      	adds	r5, #1
 8009c0c:	e7c1      	b.n	8009b92 <_printf_common+0x3e>
 8009c0e:	2030      	movs	r0, #48	@ 0x30
 8009c10:	18e1      	adds	r1, r4, r3
 8009c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c1c:	4422      	add	r2, r4
 8009c1e:	3302      	adds	r3, #2
 8009c20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c24:	e7c2      	b.n	8009bac <_printf_common+0x58>
 8009c26:	2301      	movs	r3, #1
 8009c28:	4622      	mov	r2, r4
 8009c2a:	4641      	mov	r1, r8
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	47c8      	blx	r9
 8009c30:	3001      	adds	r0, #1
 8009c32:	d0e6      	beq.n	8009c02 <_printf_common+0xae>
 8009c34:	3601      	adds	r6, #1
 8009c36:	e7d9      	b.n	8009bec <_printf_common+0x98>

08009c38 <_printf_i>:
 8009c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c3c:	7e0f      	ldrb	r7, [r1, #24]
 8009c3e:	4691      	mov	r9, r2
 8009c40:	2f78      	cmp	r7, #120	@ 0x78
 8009c42:	4680      	mov	r8, r0
 8009c44:	460c      	mov	r4, r1
 8009c46:	469a      	mov	sl, r3
 8009c48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c4e:	d807      	bhi.n	8009c60 <_printf_i+0x28>
 8009c50:	2f62      	cmp	r7, #98	@ 0x62
 8009c52:	d80a      	bhi.n	8009c6a <_printf_i+0x32>
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	f000 80d3 	beq.w	8009e00 <_printf_i+0x1c8>
 8009c5a:	2f58      	cmp	r7, #88	@ 0x58
 8009c5c:	f000 80ba 	beq.w	8009dd4 <_printf_i+0x19c>
 8009c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c68:	e03a      	b.n	8009ce0 <_printf_i+0xa8>
 8009c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c6e:	2b15      	cmp	r3, #21
 8009c70:	d8f6      	bhi.n	8009c60 <_printf_i+0x28>
 8009c72:	a101      	add	r1, pc, #4	@ (adr r1, 8009c78 <_printf_i+0x40>)
 8009c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c78:	08009cd1 	.word	0x08009cd1
 8009c7c:	08009ce5 	.word	0x08009ce5
 8009c80:	08009c61 	.word	0x08009c61
 8009c84:	08009c61 	.word	0x08009c61
 8009c88:	08009c61 	.word	0x08009c61
 8009c8c:	08009c61 	.word	0x08009c61
 8009c90:	08009ce5 	.word	0x08009ce5
 8009c94:	08009c61 	.word	0x08009c61
 8009c98:	08009c61 	.word	0x08009c61
 8009c9c:	08009c61 	.word	0x08009c61
 8009ca0:	08009c61 	.word	0x08009c61
 8009ca4:	08009de7 	.word	0x08009de7
 8009ca8:	08009d0f 	.word	0x08009d0f
 8009cac:	08009da1 	.word	0x08009da1
 8009cb0:	08009c61 	.word	0x08009c61
 8009cb4:	08009c61 	.word	0x08009c61
 8009cb8:	08009e09 	.word	0x08009e09
 8009cbc:	08009c61 	.word	0x08009c61
 8009cc0:	08009d0f 	.word	0x08009d0f
 8009cc4:	08009c61 	.word	0x08009c61
 8009cc8:	08009c61 	.word	0x08009c61
 8009ccc:	08009da9 	.word	0x08009da9
 8009cd0:	6833      	ldr	r3, [r6, #0]
 8009cd2:	1d1a      	adds	r2, r3, #4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6032      	str	r2, [r6, #0]
 8009cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e09e      	b.n	8009e22 <_printf_i+0x1ea>
 8009ce4:	6833      	ldr	r3, [r6, #0]
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	1d19      	adds	r1, r3, #4
 8009cea:	6031      	str	r1, [r6, #0]
 8009cec:	0606      	lsls	r6, r0, #24
 8009cee:	d501      	bpl.n	8009cf4 <_printf_i+0xbc>
 8009cf0:	681d      	ldr	r5, [r3, #0]
 8009cf2:	e003      	b.n	8009cfc <_printf_i+0xc4>
 8009cf4:	0645      	lsls	r5, r0, #25
 8009cf6:	d5fb      	bpl.n	8009cf0 <_printf_i+0xb8>
 8009cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cfc:	2d00      	cmp	r5, #0
 8009cfe:	da03      	bge.n	8009d08 <_printf_i+0xd0>
 8009d00:	232d      	movs	r3, #45	@ 0x2d
 8009d02:	426d      	negs	r5, r5
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d08:	230a      	movs	r3, #10
 8009d0a:	4859      	ldr	r0, [pc, #356]	@ (8009e70 <_printf_i+0x238>)
 8009d0c:	e011      	b.n	8009d32 <_printf_i+0xfa>
 8009d0e:	6821      	ldr	r1, [r4, #0]
 8009d10:	6833      	ldr	r3, [r6, #0]
 8009d12:	0608      	lsls	r0, r1, #24
 8009d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d18:	d402      	bmi.n	8009d20 <_printf_i+0xe8>
 8009d1a:	0649      	lsls	r1, r1, #25
 8009d1c:	bf48      	it	mi
 8009d1e:	b2ad      	uxthmi	r5, r5
 8009d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d22:	6033      	str	r3, [r6, #0]
 8009d24:	bf14      	ite	ne
 8009d26:	230a      	movne	r3, #10
 8009d28:	2308      	moveq	r3, #8
 8009d2a:	4851      	ldr	r0, [pc, #324]	@ (8009e70 <_printf_i+0x238>)
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d32:	6866      	ldr	r6, [r4, #4]
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	bfa8      	it	ge
 8009d38:	6821      	ldrge	r1, [r4, #0]
 8009d3a:	60a6      	str	r6, [r4, #8]
 8009d3c:	bfa4      	itt	ge
 8009d3e:	f021 0104 	bicge.w	r1, r1, #4
 8009d42:	6021      	strge	r1, [r4, #0]
 8009d44:	b90d      	cbnz	r5, 8009d4a <_printf_i+0x112>
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	d04b      	beq.n	8009de2 <_printf_i+0x1aa>
 8009d4a:	4616      	mov	r6, r2
 8009d4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d50:	fb03 5711 	mls	r7, r3, r1, r5
 8009d54:	5dc7      	ldrb	r7, [r0, r7]
 8009d56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d5a:	462f      	mov	r7, r5
 8009d5c:	42bb      	cmp	r3, r7
 8009d5e:	460d      	mov	r5, r1
 8009d60:	d9f4      	bls.n	8009d4c <_printf_i+0x114>
 8009d62:	2b08      	cmp	r3, #8
 8009d64:	d10b      	bne.n	8009d7e <_printf_i+0x146>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	07df      	lsls	r7, r3, #31
 8009d6a:	d508      	bpl.n	8009d7e <_printf_i+0x146>
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	6861      	ldr	r1, [r4, #4]
 8009d70:	4299      	cmp	r1, r3
 8009d72:	bfde      	ittt	le
 8009d74:	2330      	movle	r3, #48	@ 0x30
 8009d76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d7e:	1b92      	subs	r2, r2, r6
 8009d80:	6122      	str	r2, [r4, #16]
 8009d82:	464b      	mov	r3, r9
 8009d84:	4621      	mov	r1, r4
 8009d86:	4640      	mov	r0, r8
 8009d88:	f8cd a000 	str.w	sl, [sp]
 8009d8c:	aa03      	add	r2, sp, #12
 8009d8e:	f7ff fee1 	bl	8009b54 <_printf_common>
 8009d92:	3001      	adds	r0, #1
 8009d94:	d14a      	bne.n	8009e2c <_printf_i+0x1f4>
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	b004      	add	sp, #16
 8009d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	f043 0320 	orr.w	r3, r3, #32
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	2778      	movs	r7, #120	@ 0x78
 8009daa:	4832      	ldr	r0, [pc, #200]	@ (8009e74 <_printf_i+0x23c>)
 8009dac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	6831      	ldr	r1, [r6, #0]
 8009db4:	061f      	lsls	r7, r3, #24
 8009db6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dba:	d402      	bmi.n	8009dc2 <_printf_i+0x18a>
 8009dbc:	065f      	lsls	r7, r3, #25
 8009dbe:	bf48      	it	mi
 8009dc0:	b2ad      	uxthmi	r5, r5
 8009dc2:	6031      	str	r1, [r6, #0]
 8009dc4:	07d9      	lsls	r1, r3, #31
 8009dc6:	bf44      	itt	mi
 8009dc8:	f043 0320 	orrmi.w	r3, r3, #32
 8009dcc:	6023      	strmi	r3, [r4, #0]
 8009dce:	b11d      	cbz	r5, 8009dd8 <_printf_i+0x1a0>
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	e7ab      	b.n	8009d2c <_printf_i+0xf4>
 8009dd4:	4826      	ldr	r0, [pc, #152]	@ (8009e70 <_printf_i+0x238>)
 8009dd6:	e7e9      	b.n	8009dac <_printf_i+0x174>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	f023 0320 	bic.w	r3, r3, #32
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	e7f6      	b.n	8009dd0 <_printf_i+0x198>
 8009de2:	4616      	mov	r6, r2
 8009de4:	e7bd      	b.n	8009d62 <_printf_i+0x12a>
 8009de6:	6833      	ldr	r3, [r6, #0]
 8009de8:	6825      	ldr	r5, [r4, #0]
 8009dea:	1d18      	adds	r0, r3, #4
 8009dec:	6961      	ldr	r1, [r4, #20]
 8009dee:	6030      	str	r0, [r6, #0]
 8009df0:	062e      	lsls	r6, r5, #24
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	d501      	bpl.n	8009dfa <_printf_i+0x1c2>
 8009df6:	6019      	str	r1, [r3, #0]
 8009df8:	e002      	b.n	8009e00 <_printf_i+0x1c8>
 8009dfa:	0668      	lsls	r0, r5, #25
 8009dfc:	d5fb      	bpl.n	8009df6 <_printf_i+0x1be>
 8009dfe:	8019      	strh	r1, [r3, #0]
 8009e00:	2300      	movs	r3, #0
 8009e02:	4616      	mov	r6, r2
 8009e04:	6123      	str	r3, [r4, #16]
 8009e06:	e7bc      	b.n	8009d82 <_printf_i+0x14a>
 8009e08:	6833      	ldr	r3, [r6, #0]
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	1d1a      	adds	r2, r3, #4
 8009e0e:	6032      	str	r2, [r6, #0]
 8009e10:	681e      	ldr	r6, [r3, #0]
 8009e12:	6862      	ldr	r2, [r4, #4]
 8009e14:	4630      	mov	r0, r6
 8009e16:	f000 fd50 	bl	800a8ba <memchr>
 8009e1a:	b108      	cbz	r0, 8009e20 <_printf_i+0x1e8>
 8009e1c:	1b80      	subs	r0, r0, r6
 8009e1e:	6060      	str	r0, [r4, #4]
 8009e20:	6863      	ldr	r3, [r4, #4]
 8009e22:	6123      	str	r3, [r4, #16]
 8009e24:	2300      	movs	r3, #0
 8009e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e2a:	e7aa      	b.n	8009d82 <_printf_i+0x14a>
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	4649      	mov	r1, r9
 8009e30:	4640      	mov	r0, r8
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	47d0      	blx	sl
 8009e36:	3001      	adds	r0, #1
 8009e38:	d0ad      	beq.n	8009d96 <_printf_i+0x15e>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	079b      	lsls	r3, r3, #30
 8009e3e:	d413      	bmi.n	8009e68 <_printf_i+0x230>
 8009e40:	68e0      	ldr	r0, [r4, #12]
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	4298      	cmp	r0, r3
 8009e46:	bfb8      	it	lt
 8009e48:	4618      	movlt	r0, r3
 8009e4a:	e7a6      	b.n	8009d9a <_printf_i+0x162>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4632      	mov	r2, r6
 8009e50:	4649      	mov	r1, r9
 8009e52:	4640      	mov	r0, r8
 8009e54:	47d0      	blx	sl
 8009e56:	3001      	adds	r0, #1
 8009e58:	d09d      	beq.n	8009d96 <_printf_i+0x15e>
 8009e5a:	3501      	adds	r5, #1
 8009e5c:	68e3      	ldr	r3, [r4, #12]
 8009e5e:	9903      	ldr	r1, [sp, #12]
 8009e60:	1a5b      	subs	r3, r3, r1
 8009e62:	42ab      	cmp	r3, r5
 8009e64:	dcf2      	bgt.n	8009e4c <_printf_i+0x214>
 8009e66:	e7eb      	b.n	8009e40 <_printf_i+0x208>
 8009e68:	2500      	movs	r5, #0
 8009e6a:	f104 0619 	add.w	r6, r4, #25
 8009e6e:	e7f5      	b.n	8009e5c <_printf_i+0x224>
 8009e70:	0800e0b9 	.word	0x0800e0b9
 8009e74:	0800e0ca 	.word	0x0800e0ca

08009e78 <_scanf_float>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	b087      	sub	sp, #28
 8009e7e:	9303      	str	r3, [sp, #12]
 8009e80:	688b      	ldr	r3, [r1, #8]
 8009e82:	4617      	mov	r7, r2
 8009e84:	1e5a      	subs	r2, r3, #1
 8009e86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e8a:	bf82      	ittt	hi
 8009e8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e90:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e98:	460a      	mov	r2, r1
 8009e9a:	f04f 0500 	mov.w	r5, #0
 8009e9e:	bf88      	it	hi
 8009ea0:	608b      	strhi	r3, [r1, #8]
 8009ea2:	680b      	ldr	r3, [r1, #0]
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009eaa:	f842 3b1c 	str.w	r3, [r2], #28
 8009eae:	460c      	mov	r4, r1
 8009eb0:	bf98      	it	ls
 8009eb2:	f04f 0b00 	movls.w	fp, #0
 8009eb6:	4616      	mov	r6, r2
 8009eb8:	46aa      	mov	sl, r5
 8009eba:	46a9      	mov	r9, r5
 8009ebc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ec0:	9201      	str	r2, [sp, #4]
 8009ec2:	9502      	str	r5, [sp, #8]
 8009ec4:	68a2      	ldr	r2, [r4, #8]
 8009ec6:	b152      	cbz	r2, 8009ede <_scanf_float+0x66>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2b4e      	cmp	r3, #78	@ 0x4e
 8009ece:	d865      	bhi.n	8009f9c <_scanf_float+0x124>
 8009ed0:	2b40      	cmp	r3, #64	@ 0x40
 8009ed2:	d83d      	bhi.n	8009f50 <_scanf_float+0xd8>
 8009ed4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009ed8:	b2c8      	uxtb	r0, r1
 8009eda:	280e      	cmp	r0, #14
 8009edc:	d93b      	bls.n	8009f56 <_scanf_float+0xde>
 8009ede:	f1b9 0f00 	cmp.w	r9, #0
 8009ee2:	d003      	beq.n	8009eec <_scanf_float+0x74>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eea:	6023      	str	r3, [r4, #0]
 8009eec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ef0:	f1ba 0f01 	cmp.w	sl, #1
 8009ef4:	f200 8118 	bhi.w	800a128 <_scanf_float+0x2b0>
 8009ef8:	9b01      	ldr	r3, [sp, #4]
 8009efa:	429e      	cmp	r6, r3
 8009efc:	f200 8109 	bhi.w	800a112 <_scanf_float+0x29a>
 8009f00:	2001      	movs	r0, #1
 8009f02:	b007      	add	sp, #28
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009f0c:	2a0d      	cmp	r2, #13
 8009f0e:	d8e6      	bhi.n	8009ede <_scanf_float+0x66>
 8009f10:	a101      	add	r1, pc, #4	@ (adr r1, 8009f18 <_scanf_float+0xa0>)
 8009f12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f16:	bf00      	nop
 8009f18:	0800a05f 	.word	0x0800a05f
 8009f1c:	08009edf 	.word	0x08009edf
 8009f20:	08009edf 	.word	0x08009edf
 8009f24:	08009edf 	.word	0x08009edf
 8009f28:	0800a0bf 	.word	0x0800a0bf
 8009f2c:	0800a097 	.word	0x0800a097
 8009f30:	08009edf 	.word	0x08009edf
 8009f34:	08009edf 	.word	0x08009edf
 8009f38:	0800a06d 	.word	0x0800a06d
 8009f3c:	08009edf 	.word	0x08009edf
 8009f40:	08009edf 	.word	0x08009edf
 8009f44:	08009edf 	.word	0x08009edf
 8009f48:	08009edf 	.word	0x08009edf
 8009f4c:	0800a025 	.word	0x0800a025
 8009f50:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f54:	e7da      	b.n	8009f0c <_scanf_float+0x94>
 8009f56:	290e      	cmp	r1, #14
 8009f58:	d8c1      	bhi.n	8009ede <_scanf_float+0x66>
 8009f5a:	a001      	add	r0, pc, #4	@ (adr r0, 8009f60 <_scanf_float+0xe8>)
 8009f5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f60:	0800a015 	.word	0x0800a015
 8009f64:	08009edf 	.word	0x08009edf
 8009f68:	0800a015 	.word	0x0800a015
 8009f6c:	0800a0ab 	.word	0x0800a0ab
 8009f70:	08009edf 	.word	0x08009edf
 8009f74:	08009fbd 	.word	0x08009fbd
 8009f78:	08009ffb 	.word	0x08009ffb
 8009f7c:	08009ffb 	.word	0x08009ffb
 8009f80:	08009ffb 	.word	0x08009ffb
 8009f84:	08009ffb 	.word	0x08009ffb
 8009f88:	08009ffb 	.word	0x08009ffb
 8009f8c:	08009ffb 	.word	0x08009ffb
 8009f90:	08009ffb 	.word	0x08009ffb
 8009f94:	08009ffb 	.word	0x08009ffb
 8009f98:	08009ffb 	.word	0x08009ffb
 8009f9c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f9e:	d809      	bhi.n	8009fb4 <_scanf_float+0x13c>
 8009fa0:	2b60      	cmp	r3, #96	@ 0x60
 8009fa2:	d8b1      	bhi.n	8009f08 <_scanf_float+0x90>
 8009fa4:	2b54      	cmp	r3, #84	@ 0x54
 8009fa6:	d07b      	beq.n	800a0a0 <_scanf_float+0x228>
 8009fa8:	2b59      	cmp	r3, #89	@ 0x59
 8009faa:	d198      	bne.n	8009ede <_scanf_float+0x66>
 8009fac:	2d07      	cmp	r5, #7
 8009fae:	d196      	bne.n	8009ede <_scanf_float+0x66>
 8009fb0:	2508      	movs	r5, #8
 8009fb2:	e02c      	b.n	800a00e <_scanf_float+0x196>
 8009fb4:	2b74      	cmp	r3, #116	@ 0x74
 8009fb6:	d073      	beq.n	800a0a0 <_scanf_float+0x228>
 8009fb8:	2b79      	cmp	r3, #121	@ 0x79
 8009fba:	e7f6      	b.n	8009faa <_scanf_float+0x132>
 8009fbc:	6821      	ldr	r1, [r4, #0]
 8009fbe:	05c8      	lsls	r0, r1, #23
 8009fc0:	d51b      	bpl.n	8009ffa <_scanf_float+0x182>
 8009fc2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009fc6:	6021      	str	r1, [r4, #0]
 8009fc8:	f109 0901 	add.w	r9, r9, #1
 8009fcc:	f1bb 0f00 	cmp.w	fp, #0
 8009fd0:	d003      	beq.n	8009fda <_scanf_float+0x162>
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fd8:	60a2      	str	r2, [r4, #8]
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	f340 8087 	ble.w	800a100 <_scanf_float+0x288>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	e764      	b.n	8009ec4 <_scanf_float+0x4c>
 8009ffa:	eb1a 0105 	adds.w	r1, sl, r5
 8009ffe:	f47f af6e 	bne.w	8009ede <_scanf_float+0x66>
 800a002:	460d      	mov	r5, r1
 800a004:	468a      	mov	sl, r1
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a00c:	6022      	str	r2, [r4, #0]
 800a00e:	f806 3b01 	strb.w	r3, [r6], #1
 800a012:	e7e2      	b.n	8009fda <_scanf_float+0x162>
 800a014:	6822      	ldr	r2, [r4, #0]
 800a016:	0610      	lsls	r0, r2, #24
 800a018:	f57f af61 	bpl.w	8009ede <_scanf_float+0x66>
 800a01c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a020:	6022      	str	r2, [r4, #0]
 800a022:	e7f4      	b.n	800a00e <_scanf_float+0x196>
 800a024:	f1ba 0f00 	cmp.w	sl, #0
 800a028:	d10e      	bne.n	800a048 <_scanf_float+0x1d0>
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	d10e      	bne.n	800a04e <_scanf_float+0x1d6>
 800a030:	6822      	ldr	r2, [r4, #0]
 800a032:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a036:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a03a:	d108      	bne.n	800a04e <_scanf_float+0x1d6>
 800a03c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a040:	f04f 0a01 	mov.w	sl, #1
 800a044:	6022      	str	r2, [r4, #0]
 800a046:	e7e2      	b.n	800a00e <_scanf_float+0x196>
 800a048:	f1ba 0f02 	cmp.w	sl, #2
 800a04c:	d055      	beq.n	800a0fa <_scanf_float+0x282>
 800a04e:	2d01      	cmp	r5, #1
 800a050:	d002      	beq.n	800a058 <_scanf_float+0x1e0>
 800a052:	2d04      	cmp	r5, #4
 800a054:	f47f af43 	bne.w	8009ede <_scanf_float+0x66>
 800a058:	3501      	adds	r5, #1
 800a05a:	b2ed      	uxtb	r5, r5
 800a05c:	e7d7      	b.n	800a00e <_scanf_float+0x196>
 800a05e:	f1ba 0f01 	cmp.w	sl, #1
 800a062:	f47f af3c 	bne.w	8009ede <_scanf_float+0x66>
 800a066:	f04f 0a02 	mov.w	sl, #2
 800a06a:	e7d0      	b.n	800a00e <_scanf_float+0x196>
 800a06c:	b97d      	cbnz	r5, 800a08e <_scanf_float+0x216>
 800a06e:	f1b9 0f00 	cmp.w	r9, #0
 800a072:	f47f af37 	bne.w	8009ee4 <_scanf_float+0x6c>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a07c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a080:	f040 8103 	bne.w	800a28a <_scanf_float+0x412>
 800a084:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a088:	2501      	movs	r5, #1
 800a08a:	6022      	str	r2, [r4, #0]
 800a08c:	e7bf      	b.n	800a00e <_scanf_float+0x196>
 800a08e:	2d03      	cmp	r5, #3
 800a090:	d0e2      	beq.n	800a058 <_scanf_float+0x1e0>
 800a092:	2d05      	cmp	r5, #5
 800a094:	e7de      	b.n	800a054 <_scanf_float+0x1dc>
 800a096:	2d02      	cmp	r5, #2
 800a098:	f47f af21 	bne.w	8009ede <_scanf_float+0x66>
 800a09c:	2503      	movs	r5, #3
 800a09e:	e7b6      	b.n	800a00e <_scanf_float+0x196>
 800a0a0:	2d06      	cmp	r5, #6
 800a0a2:	f47f af1c 	bne.w	8009ede <_scanf_float+0x66>
 800a0a6:	2507      	movs	r5, #7
 800a0a8:	e7b1      	b.n	800a00e <_scanf_float+0x196>
 800a0aa:	6822      	ldr	r2, [r4, #0]
 800a0ac:	0591      	lsls	r1, r2, #22
 800a0ae:	f57f af16 	bpl.w	8009ede <_scanf_float+0x66>
 800a0b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0b6:	6022      	str	r2, [r4, #0]
 800a0b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0bc:	e7a7      	b.n	800a00e <_scanf_float+0x196>
 800a0be:	6822      	ldr	r2, [r4, #0]
 800a0c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a0c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a0c8:	d006      	beq.n	800a0d8 <_scanf_float+0x260>
 800a0ca:	0550      	lsls	r0, r2, #21
 800a0cc:	f57f af07 	bpl.w	8009ede <_scanf_float+0x66>
 800a0d0:	f1b9 0f00 	cmp.w	r9, #0
 800a0d4:	f000 80d9 	beq.w	800a28a <_scanf_float+0x412>
 800a0d8:	0591      	lsls	r1, r2, #22
 800a0da:	bf58      	it	pl
 800a0dc:	9902      	ldrpl	r1, [sp, #8]
 800a0de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0e2:	bf58      	it	pl
 800a0e4:	eba9 0101 	subpl.w	r1, r9, r1
 800a0e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a0ec:	f04f 0900 	mov.w	r9, #0
 800a0f0:	bf58      	it	pl
 800a0f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a0f6:	6022      	str	r2, [r4, #0]
 800a0f8:	e789      	b.n	800a00e <_scanf_float+0x196>
 800a0fa:	f04f 0a03 	mov.w	sl, #3
 800a0fe:	e786      	b.n	800a00e <_scanf_float+0x196>
 800a100:	4639      	mov	r1, r7
 800a102:	4640      	mov	r0, r8
 800a104:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a108:	4798      	blx	r3
 800a10a:	2800      	cmp	r0, #0
 800a10c:	f43f aeda 	beq.w	8009ec4 <_scanf_float+0x4c>
 800a110:	e6e5      	b.n	8009ede <_scanf_float+0x66>
 800a112:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a116:	463a      	mov	r2, r7
 800a118:	4640      	mov	r0, r8
 800a11a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a11e:	4798      	blx	r3
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	3b01      	subs	r3, #1
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	e6e7      	b.n	8009ef8 <_scanf_float+0x80>
 800a128:	1e6b      	subs	r3, r5, #1
 800a12a:	2b06      	cmp	r3, #6
 800a12c:	d824      	bhi.n	800a178 <_scanf_float+0x300>
 800a12e:	2d02      	cmp	r5, #2
 800a130:	d836      	bhi.n	800a1a0 <_scanf_float+0x328>
 800a132:	9b01      	ldr	r3, [sp, #4]
 800a134:	429e      	cmp	r6, r3
 800a136:	f67f aee3 	bls.w	8009f00 <_scanf_float+0x88>
 800a13a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a13e:	463a      	mov	r2, r7
 800a140:	4640      	mov	r0, r8
 800a142:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a146:	4798      	blx	r3
 800a148:	6923      	ldr	r3, [r4, #16]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	6123      	str	r3, [r4, #16]
 800a14e:	e7f0      	b.n	800a132 <_scanf_float+0x2ba>
 800a150:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a154:	463a      	mov	r2, r7
 800a156:	4640      	mov	r0, r8
 800a158:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a15c:	4798      	blx	r3
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	3b01      	subs	r3, #1
 800a162:	6123      	str	r3, [r4, #16]
 800a164:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a168:	fa5f fa8a 	uxtb.w	sl, sl
 800a16c:	f1ba 0f02 	cmp.w	sl, #2
 800a170:	d1ee      	bne.n	800a150 <_scanf_float+0x2d8>
 800a172:	3d03      	subs	r5, #3
 800a174:	b2ed      	uxtb	r5, r5
 800a176:	1b76      	subs	r6, r6, r5
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	05da      	lsls	r2, r3, #23
 800a17c:	d530      	bpl.n	800a1e0 <_scanf_float+0x368>
 800a17e:	055b      	lsls	r3, r3, #21
 800a180:	d511      	bpl.n	800a1a6 <_scanf_float+0x32e>
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	429e      	cmp	r6, r3
 800a186:	f67f aebb 	bls.w	8009f00 <_scanf_float+0x88>
 800a18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a18e:	463a      	mov	r2, r7
 800a190:	4640      	mov	r0, r8
 800a192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a196:	4798      	blx	r3
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	e7f0      	b.n	800a182 <_scanf_float+0x30a>
 800a1a0:	46aa      	mov	sl, r5
 800a1a2:	46b3      	mov	fp, r6
 800a1a4:	e7de      	b.n	800a164 <_scanf_float+0x2ec>
 800a1a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	2965      	cmp	r1, #101	@ 0x65
 800a1ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	d00c      	beq.n	800a1d4 <_scanf_float+0x35c>
 800a1ba:	2945      	cmp	r1, #69	@ 0x45
 800a1bc:	d00a      	beq.n	800a1d4 <_scanf_float+0x35c>
 800a1be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1c2:	463a      	mov	r2, r7
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4798      	blx	r3
 800a1c8:	6923      	ldr	r3, [r4, #16]
 800a1ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	1eb5      	subs	r5, r6, #2
 800a1d2:	6123      	str	r3, [r4, #16]
 800a1d4:	463a      	mov	r2, r7
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1dc:	4798      	blx	r3
 800a1de:	462e      	mov	r6, r5
 800a1e0:	6822      	ldr	r2, [r4, #0]
 800a1e2:	f012 0210 	ands.w	r2, r2, #16
 800a1e6:	d001      	beq.n	800a1ec <_scanf_float+0x374>
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	e68a      	b.n	8009f02 <_scanf_float+0x8a>
 800a1ec:	7032      	strb	r2, [r6, #0]
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a1f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1f8:	d11c      	bne.n	800a234 <_scanf_float+0x3bc>
 800a1fa:	9b02      	ldr	r3, [sp, #8]
 800a1fc:	454b      	cmp	r3, r9
 800a1fe:	eba3 0209 	sub.w	r2, r3, r9
 800a202:	d123      	bne.n	800a24c <_scanf_float+0x3d4>
 800a204:	2200      	movs	r2, #0
 800a206:	4640      	mov	r0, r8
 800a208:	9901      	ldr	r1, [sp, #4]
 800a20a:	f002 fd69 	bl	800cce0 <_strtod_r>
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	6825      	ldr	r5, [r4, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f015 0f02 	tst.w	r5, #2
 800a218:	4606      	mov	r6, r0
 800a21a:	460f      	mov	r7, r1
 800a21c:	f103 0204 	add.w	r2, r3, #4
 800a220:	d01f      	beq.n	800a262 <_scanf_float+0x3ea>
 800a222:	9903      	ldr	r1, [sp, #12]
 800a224:	600a      	str	r2, [r1, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	e9c3 6700 	strd	r6, r7, [r3]
 800a22c:	68e3      	ldr	r3, [r4, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60e3      	str	r3, [r4, #12]
 800a232:	e7d9      	b.n	800a1e8 <_scanf_float+0x370>
 800a234:	9b04      	ldr	r3, [sp, #16]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0e4      	beq.n	800a204 <_scanf_float+0x38c>
 800a23a:	9905      	ldr	r1, [sp, #20]
 800a23c:	230a      	movs	r3, #10
 800a23e:	4640      	mov	r0, r8
 800a240:	3101      	adds	r1, #1
 800a242:	f7ff f9b1 	bl	80095a8 <_strtol_r>
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	9e05      	ldr	r6, [sp, #20]
 800a24a:	1ac2      	subs	r2, r0, r3
 800a24c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a250:	429e      	cmp	r6, r3
 800a252:	bf28      	it	cs
 800a254:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a258:	4630      	mov	r0, r6
 800a25a:	490d      	ldr	r1, [pc, #52]	@ (800a290 <_scanf_float+0x418>)
 800a25c:	f000 f94e 	bl	800a4fc <siprintf>
 800a260:	e7d0      	b.n	800a204 <_scanf_float+0x38c>
 800a262:	076d      	lsls	r5, r5, #29
 800a264:	d4dd      	bmi.n	800a222 <_scanf_float+0x3aa>
 800a266:	9d03      	ldr	r5, [sp, #12]
 800a268:	602a      	str	r2, [r5, #0]
 800a26a:	681d      	ldr	r5, [r3, #0]
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	f7f6 fbcc 	bl	8000a0c <__aeabi_dcmpun>
 800a274:	b120      	cbz	r0, 800a280 <_scanf_float+0x408>
 800a276:	4807      	ldr	r0, [pc, #28]	@ (800a294 <_scanf_float+0x41c>)
 800a278:	f000 fb3c 	bl	800a8f4 <nanf>
 800a27c:	6028      	str	r0, [r5, #0]
 800a27e:	e7d5      	b.n	800a22c <_scanf_float+0x3b4>
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 fc20 	bl	8000ac8 <__aeabi_d2f>
 800a288:	e7f8      	b.n	800a27c <_scanf_float+0x404>
 800a28a:	f04f 0900 	mov.w	r9, #0
 800a28e:	e62d      	b.n	8009eec <_scanf_float+0x74>
 800a290:	0800e0db 	.word	0x0800e0db
 800a294:	0800e374 	.word	0x0800e374

0800a298 <std>:
 800a298:	2300      	movs	r3, #0
 800a29a:	b510      	push	{r4, lr}
 800a29c:	4604      	mov	r4, r0
 800a29e:	e9c0 3300 	strd	r3, r3, [r0]
 800a2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2a6:	6083      	str	r3, [r0, #8]
 800a2a8:	8181      	strh	r1, [r0, #12]
 800a2aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2ac:	81c2      	strh	r2, [r0, #14]
 800a2ae:	6183      	str	r3, [r0, #24]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	2208      	movs	r2, #8
 800a2b4:	305c      	adds	r0, #92	@ 0x5c
 800a2b6:	f000 fa19 	bl	800a6ec <memset>
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <std+0x58>)
 800a2bc:	6224      	str	r4, [r4, #32]
 800a2be:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <std+0x5c>)
 800a2c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f8 <std+0x60>)
 800a2c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a2fc <std+0x64>)
 800a2ca:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a300 <std+0x68>)
 800a2ce:	429c      	cmp	r4, r3
 800a2d0:	d006      	beq.n	800a2e0 <std+0x48>
 800a2d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2d6:	4294      	cmp	r4, r2
 800a2d8:	d002      	beq.n	800a2e0 <std+0x48>
 800a2da:	33d0      	adds	r3, #208	@ 0xd0
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d105      	bne.n	800a2ec <std+0x54>
 800a2e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e8:	f000 bae4 	b.w	800a8b4 <__retarget_lock_init_recursive>
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	bf00      	nop
 800a2f0:	0800a53d 	.word	0x0800a53d
 800a2f4:	0800a55f 	.word	0x0800a55f
 800a2f8:	0800a597 	.word	0x0800a597
 800a2fc:	0800a5bb 	.word	0x0800a5bb
 800a300:	2000223c 	.word	0x2000223c

0800a304 <stdio_exit_handler>:
 800a304:	4a02      	ldr	r2, [pc, #8]	@ (800a310 <stdio_exit_handler+0xc>)
 800a306:	4903      	ldr	r1, [pc, #12]	@ (800a314 <stdio_exit_handler+0x10>)
 800a308:	4803      	ldr	r0, [pc, #12]	@ (800a318 <stdio_exit_handler+0x14>)
 800a30a:	f000 b869 	b.w	800a3e0 <_fwalk_sglue>
 800a30e:	bf00      	nop
 800a310:	20000010 	.word	0x20000010
 800a314:	0800d31d 	.word	0x0800d31d
 800a318:	20000020 	.word	0x20000020

0800a31c <cleanup_stdio>:
 800a31c:	6841      	ldr	r1, [r0, #4]
 800a31e:	4b0c      	ldr	r3, [pc, #48]	@ (800a350 <cleanup_stdio+0x34>)
 800a320:	b510      	push	{r4, lr}
 800a322:	4299      	cmp	r1, r3
 800a324:	4604      	mov	r4, r0
 800a326:	d001      	beq.n	800a32c <cleanup_stdio+0x10>
 800a328:	f002 fff8 	bl	800d31c <_fflush_r>
 800a32c:	68a1      	ldr	r1, [r4, #8]
 800a32e:	4b09      	ldr	r3, [pc, #36]	@ (800a354 <cleanup_stdio+0x38>)
 800a330:	4299      	cmp	r1, r3
 800a332:	d002      	beq.n	800a33a <cleanup_stdio+0x1e>
 800a334:	4620      	mov	r0, r4
 800a336:	f002 fff1 	bl	800d31c <_fflush_r>
 800a33a:	68e1      	ldr	r1, [r4, #12]
 800a33c:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <cleanup_stdio+0x3c>)
 800a33e:	4299      	cmp	r1, r3
 800a340:	d004      	beq.n	800a34c <cleanup_stdio+0x30>
 800a342:	4620      	mov	r0, r4
 800a344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a348:	f002 bfe8 	b.w	800d31c <_fflush_r>
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	bf00      	nop
 800a350:	2000223c 	.word	0x2000223c
 800a354:	200022a4 	.word	0x200022a4
 800a358:	2000230c 	.word	0x2000230c

0800a35c <global_stdio_init.part.0>:
 800a35c:	b510      	push	{r4, lr}
 800a35e:	4b0b      	ldr	r3, [pc, #44]	@ (800a38c <global_stdio_init.part.0+0x30>)
 800a360:	4c0b      	ldr	r4, [pc, #44]	@ (800a390 <global_stdio_init.part.0+0x34>)
 800a362:	4a0c      	ldr	r2, [pc, #48]	@ (800a394 <global_stdio_init.part.0+0x38>)
 800a364:	4620      	mov	r0, r4
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	2104      	movs	r1, #4
 800a36a:	2200      	movs	r2, #0
 800a36c:	f7ff ff94 	bl	800a298 <std>
 800a370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a374:	2201      	movs	r2, #1
 800a376:	2109      	movs	r1, #9
 800a378:	f7ff ff8e 	bl	800a298 <std>
 800a37c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a380:	2202      	movs	r2, #2
 800a382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a386:	2112      	movs	r1, #18
 800a388:	f7ff bf86 	b.w	800a298 <std>
 800a38c:	20002374 	.word	0x20002374
 800a390:	2000223c 	.word	0x2000223c
 800a394:	0800a305 	.word	0x0800a305

0800a398 <__sfp_lock_acquire>:
 800a398:	4801      	ldr	r0, [pc, #4]	@ (800a3a0 <__sfp_lock_acquire+0x8>)
 800a39a:	f000 ba8c 	b.w	800a8b6 <__retarget_lock_acquire_recursive>
 800a39e:	bf00      	nop
 800a3a0:	2000237d 	.word	0x2000237d

0800a3a4 <__sfp_lock_release>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	@ (800a3ac <__sfp_lock_release+0x8>)
 800a3a6:	f000 ba87 	b.w	800a8b8 <__retarget_lock_release_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	2000237d 	.word	0x2000237d

0800a3b0 <__sinit>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	f7ff fff0 	bl	800a398 <__sfp_lock_acquire>
 800a3b8:	6a23      	ldr	r3, [r4, #32]
 800a3ba:	b11b      	cbz	r3, 800a3c4 <__sinit+0x14>
 800a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c0:	f7ff bff0 	b.w	800a3a4 <__sfp_lock_release>
 800a3c4:	4b04      	ldr	r3, [pc, #16]	@ (800a3d8 <__sinit+0x28>)
 800a3c6:	6223      	str	r3, [r4, #32]
 800a3c8:	4b04      	ldr	r3, [pc, #16]	@ (800a3dc <__sinit+0x2c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1f5      	bne.n	800a3bc <__sinit+0xc>
 800a3d0:	f7ff ffc4 	bl	800a35c <global_stdio_init.part.0>
 800a3d4:	e7f2      	b.n	800a3bc <__sinit+0xc>
 800a3d6:	bf00      	nop
 800a3d8:	0800a31d 	.word	0x0800a31d
 800a3dc:	20002374 	.word	0x20002374

0800a3e0 <_fwalk_sglue>:
 800a3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	4688      	mov	r8, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	2600      	movs	r6, #0
 800a3ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3f0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3f4:	d505      	bpl.n	800a402 <_fwalk_sglue+0x22>
 800a3f6:	6824      	ldr	r4, [r4, #0]
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	d1f7      	bne.n	800a3ec <_fwalk_sglue+0xc>
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d907      	bls.n	800a418 <_fwalk_sglue+0x38>
 800a408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a40c:	3301      	adds	r3, #1
 800a40e:	d003      	beq.n	800a418 <_fwalk_sglue+0x38>
 800a410:	4629      	mov	r1, r5
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	4306      	orrs	r6, r0
 800a418:	3568      	adds	r5, #104	@ 0x68
 800a41a:	e7e9      	b.n	800a3f0 <_fwalk_sglue+0x10>

0800a41c <iprintf>:
 800a41c:	b40f      	push	{r0, r1, r2, r3}
 800a41e:	b507      	push	{r0, r1, r2, lr}
 800a420:	4906      	ldr	r1, [pc, #24]	@ (800a43c <iprintf+0x20>)
 800a422:	ab04      	add	r3, sp, #16
 800a424:	6808      	ldr	r0, [r1, #0]
 800a426:	f853 2b04 	ldr.w	r2, [r3], #4
 800a42a:	6881      	ldr	r1, [r0, #8]
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	f002 fddd 	bl	800cfec <_vfiprintf_r>
 800a432:	b003      	add	sp, #12
 800a434:	f85d eb04 	ldr.w	lr, [sp], #4
 800a438:	b004      	add	sp, #16
 800a43a:	4770      	bx	lr
 800a43c:	2000001c 	.word	0x2000001c

0800a440 <_puts_r>:
 800a440:	6a03      	ldr	r3, [r0, #32]
 800a442:	b570      	push	{r4, r5, r6, lr}
 800a444:	4605      	mov	r5, r0
 800a446:	460e      	mov	r6, r1
 800a448:	6884      	ldr	r4, [r0, #8]
 800a44a:	b90b      	cbnz	r3, 800a450 <_puts_r+0x10>
 800a44c:	f7ff ffb0 	bl	800a3b0 <__sinit>
 800a450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a452:	07db      	lsls	r3, r3, #31
 800a454:	d405      	bmi.n	800a462 <_puts_r+0x22>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	0598      	lsls	r0, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_puts_r+0x22>
 800a45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a45e:	f000 fa2a 	bl	800a8b6 <__retarget_lock_acquire_recursive>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	0719      	lsls	r1, r3, #28
 800a466:	d502      	bpl.n	800a46e <_puts_r+0x2e>
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d135      	bne.n	800a4da <_puts_r+0x9a>
 800a46e:	4621      	mov	r1, r4
 800a470:	4628      	mov	r0, r5
 800a472:	f000 f8e5 	bl	800a640 <__swsetup_r>
 800a476:	b380      	cbz	r0, 800a4da <_puts_r+0x9a>
 800a478:	f04f 35ff 	mov.w	r5, #4294967295
 800a47c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a47e:	07da      	lsls	r2, r3, #31
 800a480:	d405      	bmi.n	800a48e <_puts_r+0x4e>
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	059b      	lsls	r3, r3, #22
 800a486:	d402      	bmi.n	800a48e <_puts_r+0x4e>
 800a488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a48a:	f000 fa15 	bl	800a8b8 <__retarget_lock_release_recursive>
 800a48e:	4628      	mov	r0, r5
 800a490:	bd70      	pop	{r4, r5, r6, pc}
 800a492:	2b00      	cmp	r3, #0
 800a494:	da04      	bge.n	800a4a0 <_puts_r+0x60>
 800a496:	69a2      	ldr	r2, [r4, #24]
 800a498:	429a      	cmp	r2, r3
 800a49a:	dc17      	bgt.n	800a4cc <_puts_r+0x8c>
 800a49c:	290a      	cmp	r1, #10
 800a49e:	d015      	beq.n	800a4cc <_puts_r+0x8c>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	1c5a      	adds	r2, r3, #1
 800a4a4:	6022      	str	r2, [r4, #0]
 800a4a6:	7019      	strb	r1, [r3, #0]
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	60a3      	str	r3, [r4, #8]
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	d1ed      	bne.n	800a492 <_puts_r+0x52>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	da11      	bge.n	800a4de <_puts_r+0x9e>
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	210a      	movs	r1, #10
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 f87f 	bl	800a5c2 <__swbuf_r>
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d0d7      	beq.n	800a478 <_puts_r+0x38>
 800a4c8:	250a      	movs	r5, #10
 800a4ca:	e7d7      	b.n	800a47c <_puts_r+0x3c>
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f000 f877 	bl	800a5c2 <__swbuf_r>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d1e7      	bne.n	800a4a8 <_puts_r+0x68>
 800a4d8:	e7ce      	b.n	800a478 <_puts_r+0x38>
 800a4da:	3e01      	subs	r6, #1
 800a4dc:	e7e4      	b.n	800a4a8 <_puts_r+0x68>
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	6022      	str	r2, [r4, #0]
 800a4e4:	220a      	movs	r2, #10
 800a4e6:	701a      	strb	r2, [r3, #0]
 800a4e8:	e7ee      	b.n	800a4c8 <_puts_r+0x88>
	...

0800a4ec <puts>:
 800a4ec:	4b02      	ldr	r3, [pc, #8]	@ (800a4f8 <puts+0xc>)
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	f7ff bfa5 	b.w	800a440 <_puts_r>
 800a4f6:	bf00      	nop
 800a4f8:	2000001c 	.word	0x2000001c

0800a4fc <siprintf>:
 800a4fc:	b40e      	push	{r1, r2, r3}
 800a4fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a502:	b500      	push	{lr}
 800a504:	b09c      	sub	sp, #112	@ 0x70
 800a506:	ab1d      	add	r3, sp, #116	@ 0x74
 800a508:	9002      	str	r0, [sp, #8]
 800a50a:	9006      	str	r0, [sp, #24]
 800a50c:	9107      	str	r1, [sp, #28]
 800a50e:	9104      	str	r1, [sp, #16]
 800a510:	4808      	ldr	r0, [pc, #32]	@ (800a534 <siprintf+0x38>)
 800a512:	4909      	ldr	r1, [pc, #36]	@ (800a538 <siprintf+0x3c>)
 800a514:	f853 2b04 	ldr.w	r2, [r3], #4
 800a518:	9105      	str	r1, [sp, #20]
 800a51a:	6800      	ldr	r0, [r0, #0]
 800a51c:	a902      	add	r1, sp, #8
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	f002 fc40 	bl	800cda4 <_svfiprintf_r>
 800a524:	2200      	movs	r2, #0
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	b01c      	add	sp, #112	@ 0x70
 800a52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a530:	b003      	add	sp, #12
 800a532:	4770      	bx	lr
 800a534:	2000001c 	.word	0x2000001c
 800a538:	ffff0208 	.word	0xffff0208

0800a53c <__sread>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	460c      	mov	r4, r1
 800a540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a544:	f000 f968 	bl	800a818 <_read_r>
 800a548:	2800      	cmp	r0, #0
 800a54a:	bfab      	itete	ge
 800a54c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a54e:	89a3      	ldrhlt	r3, [r4, #12]
 800a550:	181b      	addge	r3, r3, r0
 800a552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a556:	bfac      	ite	ge
 800a558:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a55a:	81a3      	strhlt	r3, [r4, #12]
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <__swrite>:
 800a55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	461f      	mov	r7, r3
 800a564:	898b      	ldrh	r3, [r1, #12]
 800a566:	4605      	mov	r5, r0
 800a568:	05db      	lsls	r3, r3, #23
 800a56a:	460c      	mov	r4, r1
 800a56c:	4616      	mov	r6, r2
 800a56e:	d505      	bpl.n	800a57c <__swrite+0x1e>
 800a570:	2302      	movs	r3, #2
 800a572:	2200      	movs	r2, #0
 800a574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a578:	f000 f93c 	bl	800a7f4 <_lseek_r>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	4632      	mov	r2, r6
 800a580:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	4628      	mov	r0, r5
 800a588:	463b      	mov	r3, r7
 800a58a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a592:	f000 b953 	b.w	800a83c <_write_r>

0800a596 <__sseek>:
 800a596:	b510      	push	{r4, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59e:	f000 f929 	bl	800a7f4 <_lseek_r>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	bf15      	itete	ne
 800a5a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5b2:	81a3      	strheq	r3, [r4, #12]
 800a5b4:	bf18      	it	ne
 800a5b6:	81a3      	strhne	r3, [r4, #12]
 800a5b8:	bd10      	pop	{r4, pc}

0800a5ba <__sclose>:
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f000 b8b3 	b.w	800a728 <_close_r>

0800a5c2 <__swbuf_r>:
 800a5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c4:	460e      	mov	r6, r1
 800a5c6:	4614      	mov	r4, r2
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	b118      	cbz	r0, 800a5d4 <__swbuf_r+0x12>
 800a5cc:	6a03      	ldr	r3, [r0, #32]
 800a5ce:	b90b      	cbnz	r3, 800a5d4 <__swbuf_r+0x12>
 800a5d0:	f7ff feee 	bl	800a3b0 <__sinit>
 800a5d4:	69a3      	ldr	r3, [r4, #24]
 800a5d6:	60a3      	str	r3, [r4, #8]
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	071a      	lsls	r2, r3, #28
 800a5dc:	d501      	bpl.n	800a5e2 <__swbuf_r+0x20>
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	b943      	cbnz	r3, 800a5f4 <__swbuf_r+0x32>
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f000 f82b 	bl	800a640 <__swsetup_r>
 800a5ea:	b118      	cbz	r0, 800a5f4 <__swbuf_r+0x32>
 800a5ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	6922      	ldr	r2, [r4, #16]
 800a5f8:	b2f6      	uxtb	r6, r6
 800a5fa:	1a98      	subs	r0, r3, r2
 800a5fc:	6963      	ldr	r3, [r4, #20]
 800a5fe:	4637      	mov	r7, r6
 800a600:	4283      	cmp	r3, r0
 800a602:	dc05      	bgt.n	800a610 <__swbuf_r+0x4e>
 800a604:	4621      	mov	r1, r4
 800a606:	4628      	mov	r0, r5
 800a608:	f002 fe88 	bl	800d31c <_fflush_r>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d1ed      	bne.n	800a5ec <__swbuf_r+0x2a>
 800a610:	68a3      	ldr	r3, [r4, #8]
 800a612:	3b01      	subs	r3, #1
 800a614:	60a3      	str	r3, [r4, #8]
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	6022      	str	r2, [r4, #0]
 800a61c:	701e      	strb	r6, [r3, #0]
 800a61e:	6962      	ldr	r2, [r4, #20]
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	429a      	cmp	r2, r3
 800a624:	d004      	beq.n	800a630 <__swbuf_r+0x6e>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	07db      	lsls	r3, r3, #31
 800a62a:	d5e1      	bpl.n	800a5f0 <__swbuf_r+0x2e>
 800a62c:	2e0a      	cmp	r6, #10
 800a62e:	d1df      	bne.n	800a5f0 <__swbuf_r+0x2e>
 800a630:	4621      	mov	r1, r4
 800a632:	4628      	mov	r0, r5
 800a634:	f002 fe72 	bl	800d31c <_fflush_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d0d9      	beq.n	800a5f0 <__swbuf_r+0x2e>
 800a63c:	e7d6      	b.n	800a5ec <__swbuf_r+0x2a>
	...

0800a640 <__swsetup_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4b29      	ldr	r3, [pc, #164]	@ (800a6e8 <__swsetup_r+0xa8>)
 800a644:	4605      	mov	r5, r0
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	460c      	mov	r4, r1
 800a64a:	b118      	cbz	r0, 800a654 <__swsetup_r+0x14>
 800a64c:	6a03      	ldr	r3, [r0, #32]
 800a64e:	b90b      	cbnz	r3, 800a654 <__swsetup_r+0x14>
 800a650:	f7ff feae 	bl	800a3b0 <__sinit>
 800a654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a658:	0719      	lsls	r1, r3, #28
 800a65a:	d422      	bmi.n	800a6a2 <__swsetup_r+0x62>
 800a65c:	06da      	lsls	r2, r3, #27
 800a65e:	d407      	bmi.n	800a670 <__swsetup_r+0x30>
 800a660:	2209      	movs	r2, #9
 800a662:	602a      	str	r2, [r5, #0]
 800a664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	e033      	b.n	800a6d8 <__swsetup_r+0x98>
 800a670:	0758      	lsls	r0, r3, #29
 800a672:	d512      	bpl.n	800a69a <__swsetup_r+0x5a>
 800a674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a676:	b141      	cbz	r1, 800a68a <__swsetup_r+0x4a>
 800a678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a67c:	4299      	cmp	r1, r3
 800a67e:	d002      	beq.n	800a686 <__swsetup_r+0x46>
 800a680:	4628      	mov	r0, r5
 800a682:	f000 ff8d 	bl	800b5a0 <_free_r>
 800a686:	2300      	movs	r3, #0
 800a688:	6363      	str	r3, [r4, #52]	@ 0x34
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a690:	81a3      	strh	r3, [r4, #12]
 800a692:	2300      	movs	r3, #0
 800a694:	6063      	str	r3, [r4, #4]
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	f043 0308 	orr.w	r3, r3, #8
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	6923      	ldr	r3, [r4, #16]
 800a6a4:	b94b      	cbnz	r3, 800a6ba <__swsetup_r+0x7a>
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6b0:	d003      	beq.n	800a6ba <__swsetup_r+0x7a>
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f002 fe7e 	bl	800d3b6 <__smakebuf_r>
 800a6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6be:	f013 0201 	ands.w	r2, r3, #1
 800a6c2:	d00a      	beq.n	800a6da <__swsetup_r+0x9a>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	60a2      	str	r2, [r4, #8]
 800a6c8:	6962      	ldr	r2, [r4, #20]
 800a6ca:	4252      	negs	r2, r2
 800a6cc:	61a2      	str	r2, [r4, #24]
 800a6ce:	6922      	ldr	r2, [r4, #16]
 800a6d0:	b942      	cbnz	r2, 800a6e4 <__swsetup_r+0xa4>
 800a6d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6d6:	d1c5      	bne.n	800a664 <__swsetup_r+0x24>
 800a6d8:	bd38      	pop	{r3, r4, r5, pc}
 800a6da:	0799      	lsls	r1, r3, #30
 800a6dc:	bf58      	it	pl
 800a6de:	6962      	ldrpl	r2, [r4, #20]
 800a6e0:	60a2      	str	r2, [r4, #8]
 800a6e2:	e7f4      	b.n	800a6ce <__swsetup_r+0x8e>
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	e7f7      	b.n	800a6d8 <__swsetup_r+0x98>
 800a6e8:	2000001c 	.word	0x2000001c

0800a6ec <memset>:
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	4402      	add	r2, r0
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d100      	bne.n	800a6f6 <memset+0xa>
 800a6f4:	4770      	bx	lr
 800a6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6fa:	e7f9      	b.n	800a6f0 <memset+0x4>

0800a6fc <strncmp>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	b16a      	cbz	r2, 800a71c <strncmp+0x20>
 800a700:	3901      	subs	r1, #1
 800a702:	1884      	adds	r4, r0, r2
 800a704:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a708:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d103      	bne.n	800a718 <strncmp+0x1c>
 800a710:	42a0      	cmp	r0, r4
 800a712:	d001      	beq.n	800a718 <strncmp+0x1c>
 800a714:	2a00      	cmp	r2, #0
 800a716:	d1f5      	bne.n	800a704 <strncmp+0x8>
 800a718:	1ad0      	subs	r0, r2, r3
 800a71a:	bd10      	pop	{r4, pc}
 800a71c:	4610      	mov	r0, r2
 800a71e:	e7fc      	b.n	800a71a <strncmp+0x1e>

0800a720 <_localeconv_r>:
 800a720:	4800      	ldr	r0, [pc, #0]	@ (800a724 <_localeconv_r+0x4>)
 800a722:	4770      	bx	lr
 800a724:	2000015c 	.word	0x2000015c

0800a728 <_close_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	2300      	movs	r3, #0
 800a72c:	4d05      	ldr	r5, [pc, #20]	@ (800a744 <_close_r+0x1c>)
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	f7f7 fbab 	bl	8001e8e <_close>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_close_r+0x1a>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_close_r+0x1a>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20002378 	.word	0x20002378

0800a748 <_reclaim_reent>:
 800a748:	4b29      	ldr	r3, [pc, #164]	@ (800a7f0 <_reclaim_reent+0xa8>)
 800a74a:	b570      	push	{r4, r5, r6, lr}
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4604      	mov	r4, r0
 800a750:	4283      	cmp	r3, r0
 800a752:	d04b      	beq.n	800a7ec <_reclaim_reent+0xa4>
 800a754:	69c3      	ldr	r3, [r0, #28]
 800a756:	b1ab      	cbz	r3, 800a784 <_reclaim_reent+0x3c>
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	b16b      	cbz	r3, 800a778 <_reclaim_reent+0x30>
 800a75c:	2500      	movs	r5, #0
 800a75e:	69e3      	ldr	r3, [r4, #28]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	5959      	ldr	r1, [r3, r5]
 800a764:	2900      	cmp	r1, #0
 800a766:	d13b      	bne.n	800a7e0 <_reclaim_reent+0x98>
 800a768:	3504      	adds	r5, #4
 800a76a:	2d80      	cmp	r5, #128	@ 0x80
 800a76c:	d1f7      	bne.n	800a75e <_reclaim_reent+0x16>
 800a76e:	69e3      	ldr	r3, [r4, #28]
 800a770:	4620      	mov	r0, r4
 800a772:	68d9      	ldr	r1, [r3, #12]
 800a774:	f000 ff14 	bl	800b5a0 <_free_r>
 800a778:	69e3      	ldr	r3, [r4, #28]
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	b111      	cbz	r1, 800a784 <_reclaim_reent+0x3c>
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 ff0e 	bl	800b5a0 <_free_r>
 800a784:	6961      	ldr	r1, [r4, #20]
 800a786:	b111      	cbz	r1, 800a78e <_reclaim_reent+0x46>
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 ff09 	bl	800b5a0 <_free_r>
 800a78e:	69e1      	ldr	r1, [r4, #28]
 800a790:	b111      	cbz	r1, 800a798 <_reclaim_reent+0x50>
 800a792:	4620      	mov	r0, r4
 800a794:	f000 ff04 	bl	800b5a0 <_free_r>
 800a798:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a79a:	b111      	cbz	r1, 800a7a2 <_reclaim_reent+0x5a>
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 feff 	bl	800b5a0 <_free_r>
 800a7a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7a4:	b111      	cbz	r1, 800a7ac <_reclaim_reent+0x64>
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fefa 	bl	800b5a0 <_free_r>
 800a7ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a7ae:	b111      	cbz	r1, 800a7b6 <_reclaim_reent+0x6e>
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fef5 	bl	800b5a0 <_free_r>
 800a7b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a7b8:	b111      	cbz	r1, 800a7c0 <_reclaim_reent+0x78>
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fef0 	bl	800b5a0 <_free_r>
 800a7c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a7c2:	b111      	cbz	r1, 800a7ca <_reclaim_reent+0x82>
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 feeb 	bl	800b5a0 <_free_r>
 800a7ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a7cc:	b111      	cbz	r1, 800a7d4 <_reclaim_reent+0x8c>
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fee6 	bl	800b5a0 <_free_r>
 800a7d4:	6a23      	ldr	r3, [r4, #32]
 800a7d6:	b14b      	cbz	r3, 800a7ec <_reclaim_reent+0xa4>
 800a7d8:	4620      	mov	r0, r4
 800a7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7de:	4718      	bx	r3
 800a7e0:	680e      	ldr	r6, [r1, #0]
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fedc 	bl	800b5a0 <_free_r>
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	e7bb      	b.n	800a764 <_reclaim_reent+0x1c>
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	bf00      	nop
 800a7f0:	2000001c 	.word	0x2000001c

0800a7f4 <_lseek_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4d05      	ldr	r5, [pc, #20]	@ (800a814 <_lseek_r+0x20>)
 800a800:	602a      	str	r2, [r5, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f7f7 fb67 	bl	8001ed6 <_lseek>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_lseek_r+0x1e>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_lseek_r+0x1e>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20002378 	.word	0x20002378

0800a818 <_read_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	2200      	movs	r2, #0
 800a822:	4d05      	ldr	r5, [pc, #20]	@ (800a838 <_read_r+0x20>)
 800a824:	602a      	str	r2, [r5, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	f7f7 fb14 	bl	8001e54 <_read>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_read_r+0x1e>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_read_r+0x1e>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	20002378 	.word	0x20002378

0800a83c <_write_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	4611      	mov	r1, r2
 800a844:	2200      	movs	r2, #0
 800a846:	4d05      	ldr	r5, [pc, #20]	@ (800a85c <_write_r+0x20>)
 800a848:	602a      	str	r2, [r5, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	f7f6 fc20 	bl	8001090 <_write>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d102      	bne.n	800a85a <_write_r+0x1e>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	b103      	cbz	r3, 800a85a <_write_r+0x1e>
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	20002378 	.word	0x20002378

0800a860 <__errno>:
 800a860:	4b01      	ldr	r3, [pc, #4]	@ (800a868 <__errno+0x8>)
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	2000001c 	.word	0x2000001c

0800a86c <__libc_init_array>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	2600      	movs	r6, #0
 800a870:	4d0c      	ldr	r5, [pc, #48]	@ (800a8a4 <__libc_init_array+0x38>)
 800a872:	4c0d      	ldr	r4, [pc, #52]	@ (800a8a8 <__libc_init_array+0x3c>)
 800a874:	1b64      	subs	r4, r4, r5
 800a876:	10a4      	asrs	r4, r4, #2
 800a878:	42a6      	cmp	r6, r4
 800a87a:	d109      	bne.n	800a890 <__libc_init_array+0x24>
 800a87c:	f003 fa48 	bl	800dd10 <_init>
 800a880:	2600      	movs	r6, #0
 800a882:	4d0a      	ldr	r5, [pc, #40]	@ (800a8ac <__libc_init_array+0x40>)
 800a884:	4c0a      	ldr	r4, [pc, #40]	@ (800a8b0 <__libc_init_array+0x44>)
 800a886:	1b64      	subs	r4, r4, r5
 800a888:	10a4      	asrs	r4, r4, #2
 800a88a:	42a6      	cmp	r6, r4
 800a88c:	d105      	bne.n	800a89a <__libc_init_array+0x2e>
 800a88e:	bd70      	pop	{r4, r5, r6, pc}
 800a890:	f855 3b04 	ldr.w	r3, [r5], #4
 800a894:	4798      	blx	r3
 800a896:	3601      	adds	r6, #1
 800a898:	e7ee      	b.n	800a878 <__libc_init_array+0xc>
 800a89a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a89e:	4798      	blx	r3
 800a8a0:	3601      	adds	r6, #1
 800a8a2:	e7f2      	b.n	800a88a <__libc_init_array+0x1e>
 800a8a4:	0800e3e0 	.word	0x0800e3e0
 800a8a8:	0800e3e0 	.word	0x0800e3e0
 800a8ac:	0800e3e0 	.word	0x0800e3e0
 800a8b0:	0800e3e4 	.word	0x0800e3e4

0800a8b4 <__retarget_lock_init_recursive>:
 800a8b4:	4770      	bx	lr

0800a8b6 <__retarget_lock_acquire_recursive>:
 800a8b6:	4770      	bx	lr

0800a8b8 <__retarget_lock_release_recursive>:
 800a8b8:	4770      	bx	lr

0800a8ba <memchr>:
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	b2c9      	uxtb	r1, r1
 800a8c0:	4402      	add	r2, r0
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	d101      	bne.n	800a8cc <memchr+0x12>
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	e003      	b.n	800a8d4 <memchr+0x1a>
 800a8cc:	7804      	ldrb	r4, [r0, #0]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	428c      	cmp	r4, r1
 800a8d2:	d1f6      	bne.n	800a8c2 <memchr+0x8>
 800a8d4:	bd10      	pop	{r4, pc}

0800a8d6 <memcpy>:
 800a8d6:	440a      	add	r2, r1
 800a8d8:	4291      	cmp	r1, r2
 800a8da:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8de:	d100      	bne.n	800a8e2 <memcpy+0xc>
 800a8e0:	4770      	bx	lr
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e8:	4291      	cmp	r1, r2
 800a8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ee:	d1f9      	bne.n	800a8e4 <memcpy+0xe>
 800a8f0:	bd10      	pop	{r4, pc}
	...

0800a8f4 <nanf>:
 800a8f4:	4800      	ldr	r0, [pc, #0]	@ (800a8f8 <nanf+0x4>)
 800a8f6:	4770      	bx	lr
 800a8f8:	7fc00000 	.word	0x7fc00000

0800a8fc <quorem>:
 800a8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	6903      	ldr	r3, [r0, #16]
 800a902:	690c      	ldr	r4, [r1, #16]
 800a904:	4607      	mov	r7, r0
 800a906:	42a3      	cmp	r3, r4
 800a908:	db7e      	blt.n	800aa08 <quorem+0x10c>
 800a90a:	3c01      	subs	r4, #1
 800a90c:	00a3      	lsls	r3, r4, #2
 800a90e:	f100 0514 	add.w	r5, r0, #20
 800a912:	f101 0814 	add.w	r8, r1, #20
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a926:	3301      	adds	r3, #1
 800a928:	429a      	cmp	r2, r3
 800a92a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a92e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a932:	d32e      	bcc.n	800a992 <quorem+0x96>
 800a934:	f04f 0a00 	mov.w	sl, #0
 800a938:	46c4      	mov	ip, r8
 800a93a:	46ae      	mov	lr, r5
 800a93c:	46d3      	mov	fp, sl
 800a93e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a942:	b298      	uxth	r0, r3
 800a944:	fb06 a000 	mla	r0, r6, r0, sl
 800a948:	0c1b      	lsrs	r3, r3, #16
 800a94a:	0c02      	lsrs	r2, r0, #16
 800a94c:	fb06 2303 	mla	r3, r6, r3, r2
 800a950:	f8de 2000 	ldr.w	r2, [lr]
 800a954:	b280      	uxth	r0, r0
 800a956:	b292      	uxth	r2, r2
 800a958:	1a12      	subs	r2, r2, r0
 800a95a:	445a      	add	r2, fp
 800a95c:	f8de 0000 	ldr.w	r0, [lr]
 800a960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a964:	b29b      	uxth	r3, r3
 800a966:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a96a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a96e:	b292      	uxth	r2, r2
 800a970:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a974:	45e1      	cmp	r9, ip
 800a976:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a97a:	f84e 2b04 	str.w	r2, [lr], #4
 800a97e:	d2de      	bcs.n	800a93e <quorem+0x42>
 800a980:	9b00      	ldr	r3, [sp, #0]
 800a982:	58eb      	ldr	r3, [r5, r3]
 800a984:	b92b      	cbnz	r3, 800a992 <quorem+0x96>
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	3b04      	subs	r3, #4
 800a98a:	429d      	cmp	r5, r3
 800a98c:	461a      	mov	r2, r3
 800a98e:	d32f      	bcc.n	800a9f0 <quorem+0xf4>
 800a990:	613c      	str	r4, [r7, #16]
 800a992:	4638      	mov	r0, r7
 800a994:	f001 f9c4 	bl	800bd20 <__mcmp>
 800a998:	2800      	cmp	r0, #0
 800a99a:	db25      	blt.n	800a9e8 <quorem+0xec>
 800a99c:	4629      	mov	r1, r5
 800a99e:	2000      	movs	r0, #0
 800a9a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9a4:	f8d1 c000 	ldr.w	ip, [r1]
 800a9a8:	fa1f fe82 	uxth.w	lr, r2
 800a9ac:	fa1f f38c 	uxth.w	r3, ip
 800a9b0:	eba3 030e 	sub.w	r3, r3, lr
 800a9b4:	4403      	add	r3, r0
 800a9b6:	0c12      	lsrs	r2, r2, #16
 800a9b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9c6:	45c1      	cmp	r9, r8
 800a9c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9cc:	f841 3b04 	str.w	r3, [r1], #4
 800a9d0:	d2e6      	bcs.n	800a9a0 <quorem+0xa4>
 800a9d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9da:	b922      	cbnz	r2, 800a9e6 <quorem+0xea>
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	d30b      	bcc.n	800a9fc <quorem+0x100>
 800a9e4:	613c      	str	r4, [r7, #16]
 800a9e6:	3601      	adds	r6, #1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	b003      	add	sp, #12
 800a9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f0:	6812      	ldr	r2, [r2, #0]
 800a9f2:	3b04      	subs	r3, #4
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	d1cb      	bne.n	800a990 <quorem+0x94>
 800a9f8:	3c01      	subs	r4, #1
 800a9fa:	e7c6      	b.n	800a98a <quorem+0x8e>
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	3b04      	subs	r3, #4
 800aa00:	2a00      	cmp	r2, #0
 800aa02:	d1ef      	bne.n	800a9e4 <quorem+0xe8>
 800aa04:	3c01      	subs	r4, #1
 800aa06:	e7ea      	b.n	800a9de <quorem+0xe2>
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7ee      	b.n	800a9ea <quorem+0xee>
 800aa0c:	0000      	movs	r0, r0
	...

0800aa10 <_dtoa_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	4614      	mov	r4, r2
 800aa16:	461d      	mov	r5, r3
 800aa18:	69c7      	ldr	r7, [r0, #28]
 800aa1a:	b097      	sub	sp, #92	@ 0x5c
 800aa1c:	4683      	mov	fp, r0
 800aa1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aa22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800aa24:	b97f      	cbnz	r7, 800aa46 <_dtoa_r+0x36>
 800aa26:	2010      	movs	r0, #16
 800aa28:	f000 fe02 	bl	800b630 <malloc>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa32:	b920      	cbnz	r0, 800aa3e <_dtoa_r+0x2e>
 800aa34:	21ef      	movs	r1, #239	@ 0xef
 800aa36:	4ba8      	ldr	r3, [pc, #672]	@ (800acd8 <_dtoa_r+0x2c8>)
 800aa38:	48a8      	ldr	r0, [pc, #672]	@ (800acdc <_dtoa_r+0x2cc>)
 800aa3a:	f002 fd4b 	bl	800d4d4 <__assert_func>
 800aa3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa42:	6007      	str	r7, [r0, #0]
 800aa44:	60c7      	str	r7, [r0, #12]
 800aa46:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa4a:	6819      	ldr	r1, [r3, #0]
 800aa4c:	b159      	cbz	r1, 800aa66 <_dtoa_r+0x56>
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	2301      	movs	r3, #1
 800aa52:	4093      	lsls	r3, r2
 800aa54:	604a      	str	r2, [r1, #4]
 800aa56:	608b      	str	r3, [r1, #8]
 800aa58:	4658      	mov	r0, fp
 800aa5a:	f000 fedf 	bl	800b81c <_Bfree>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	1e2b      	subs	r3, r5, #0
 800aa68:	bfaf      	iteee	ge
 800aa6a:	2300      	movge	r3, #0
 800aa6c:	2201      	movlt	r2, #1
 800aa6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa72:	9303      	strlt	r3, [sp, #12]
 800aa74:	bfa8      	it	ge
 800aa76:	6033      	strge	r3, [r6, #0]
 800aa78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aa7c:	4b98      	ldr	r3, [pc, #608]	@ (800ace0 <_dtoa_r+0x2d0>)
 800aa7e:	bfb8      	it	lt
 800aa80:	6032      	strlt	r2, [r6, #0]
 800aa82:	ea33 0308 	bics.w	r3, r3, r8
 800aa86:	d112      	bne.n	800aaae <_dtoa_r+0x9e>
 800aa88:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aa94:	4323      	orrs	r3, r4
 800aa96:	f000 8550 	beq.w	800b53a <_dtoa_r+0xb2a>
 800aa9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aa9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800ace4 <_dtoa_r+0x2d4>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 8552 	beq.w	800b54a <_dtoa_r+0xb3a>
 800aaa6:	f10a 0303 	add.w	r3, sl, #3
 800aaaa:	f000 bd4c 	b.w	800b546 <_dtoa_r+0xb36>
 800aaae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aab2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaba:	2200      	movs	r2, #0
 800aabc:	2300      	movs	r3, #0
 800aabe:	f7f5 ff73 	bl	80009a8 <__aeabi_dcmpeq>
 800aac2:	4607      	mov	r7, r0
 800aac4:	b158      	cbz	r0, 800aade <_dtoa_r+0xce>
 800aac6:	2301      	movs	r3, #1
 800aac8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aace:	b113      	cbz	r3, 800aad6 <_dtoa_r+0xc6>
 800aad0:	4b85      	ldr	r3, [pc, #532]	@ (800ace8 <_dtoa_r+0x2d8>)
 800aad2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800acec <_dtoa_r+0x2dc>
 800aada:	f000 bd36 	b.w	800b54a <_dtoa_r+0xb3a>
 800aade:	ab14      	add	r3, sp, #80	@ 0x50
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	ab15      	add	r3, sp, #84	@ 0x54
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	4658      	mov	r0, fp
 800aae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aaec:	f001 fa30 	bl	800bf50 <__d2b>
 800aaf0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800aaf4:	4681      	mov	r9, r0
 800aaf6:	2e00      	cmp	r6, #0
 800aaf8:	d077      	beq.n	800abea <_dtoa_r+0x1da>
 800aafa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aafe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab10:	9712      	str	r7, [sp, #72]	@ 0x48
 800ab12:	4619      	mov	r1, r3
 800ab14:	2200      	movs	r2, #0
 800ab16:	4b76      	ldr	r3, [pc, #472]	@ (800acf0 <_dtoa_r+0x2e0>)
 800ab18:	f7f5 fb26 	bl	8000168 <__aeabi_dsub>
 800ab1c:	a368      	add	r3, pc, #416	@ (adr r3, 800acc0 <_dtoa_r+0x2b0>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f7f5 fcd9 	bl	80004d8 <__aeabi_dmul>
 800ab26:	a368      	add	r3, pc, #416	@ (adr r3, 800acc8 <_dtoa_r+0x2b8>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f7f5 fb1e 	bl	800016c <__adddf3>
 800ab30:	4604      	mov	r4, r0
 800ab32:	4630      	mov	r0, r6
 800ab34:	460d      	mov	r5, r1
 800ab36:	f7f5 fc65 	bl	8000404 <__aeabi_i2d>
 800ab3a:	a365      	add	r3, pc, #404	@ (adr r3, 800acd0 <_dtoa_r+0x2c0>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fcca 	bl	80004d8 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fb0e 	bl	800016c <__adddf3>
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	f7f5 ff70 	bl	8000a38 <__aeabi_d2iz>
 800ab58:	2200      	movs	r2, #0
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4629      	mov	r1, r5
 800ab62:	f7f5 ff2b 	bl	80009bc <__aeabi_dcmplt>
 800ab66:	b140      	cbz	r0, 800ab7a <_dtoa_r+0x16a>
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f7f5 fc4b 	bl	8000404 <__aeabi_i2d>
 800ab6e:	4622      	mov	r2, r4
 800ab70:	462b      	mov	r3, r5
 800ab72:	f7f5 ff19 	bl	80009a8 <__aeabi_dcmpeq>
 800ab76:	b900      	cbnz	r0, 800ab7a <_dtoa_r+0x16a>
 800ab78:	3f01      	subs	r7, #1
 800ab7a:	2f16      	cmp	r7, #22
 800ab7c:	d853      	bhi.n	800ac26 <_dtoa_r+0x216>
 800ab7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab82:	4b5c      	ldr	r3, [pc, #368]	@ (800acf4 <_dtoa_r+0x2e4>)
 800ab84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 ff16 	bl	80009bc <__aeabi_dcmplt>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d04a      	beq.n	800ac2a <_dtoa_r+0x21a>
 800ab94:	2300      	movs	r3, #0
 800ab96:	3f01      	subs	r7, #1
 800ab98:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab9c:	1b9b      	subs	r3, r3, r6
 800ab9e:	1e5a      	subs	r2, r3, #1
 800aba0:	bf46      	itte	mi
 800aba2:	f1c3 0801 	rsbmi	r8, r3, #1
 800aba6:	2300      	movmi	r3, #0
 800aba8:	f04f 0800 	movpl.w	r8, #0
 800abac:	9209      	str	r2, [sp, #36]	@ 0x24
 800abae:	bf48      	it	mi
 800abb0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800abb2:	2f00      	cmp	r7, #0
 800abb4:	db3b      	blt.n	800ac2e <_dtoa_r+0x21e>
 800abb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb8:	970e      	str	r7, [sp, #56]	@ 0x38
 800abba:	443b      	add	r3, r7
 800abbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800abbe:	2300      	movs	r3, #0
 800abc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abc4:	2b09      	cmp	r3, #9
 800abc6:	d866      	bhi.n	800ac96 <_dtoa_r+0x286>
 800abc8:	2b05      	cmp	r3, #5
 800abca:	bfc4      	itt	gt
 800abcc:	3b04      	subgt	r3, #4
 800abce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800abd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abd2:	bfc8      	it	gt
 800abd4:	2400      	movgt	r4, #0
 800abd6:	f1a3 0302 	sub.w	r3, r3, #2
 800abda:	bfd8      	it	le
 800abdc:	2401      	movle	r4, #1
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d864      	bhi.n	800acac <_dtoa_r+0x29c>
 800abe2:	e8df f003 	tbb	[pc, r3]
 800abe6:	382b      	.short	0x382b
 800abe8:	5636      	.short	0x5636
 800abea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800abee:	441e      	add	r6, r3
 800abf0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	bfc1      	itttt	gt
 800abf8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abfc:	fa08 f803 	lslgt.w	r8, r8, r3
 800ac00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac04:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac08:	bfd6      	itet	le
 800ac0a:	f1c3 0320 	rsble	r3, r3, #32
 800ac0e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ac12:	fa04 f003 	lslle.w	r0, r4, r3
 800ac16:	f7f5 fbe5 	bl	80003e4 <__aeabi_ui2d>
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac20:	3e01      	subs	r6, #1
 800ac22:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac24:	e775      	b.n	800ab12 <_dtoa_r+0x102>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e7b6      	b.n	800ab98 <_dtoa_r+0x188>
 800ac2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ac2c:	e7b5      	b.n	800ab9a <_dtoa_r+0x18a>
 800ac2e:	427b      	negs	r3, r7
 800ac30:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac32:	2300      	movs	r3, #0
 800ac34:	eba8 0807 	sub.w	r8, r8, r7
 800ac38:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac3a:	e7c2      	b.n	800abc2 <_dtoa_r+0x1b2>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dc35      	bgt.n	800acb2 <_dtoa_r+0x2a2>
 800ac46:	2301      	movs	r3, #1
 800ac48:	461a      	mov	r2, r3
 800ac4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ac4e:	9221      	str	r2, [sp, #132]	@ 0x84
 800ac50:	e00b      	b.n	800ac6a <_dtoa_r+0x25a>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e7f3      	b.n	800ac3e <_dtoa_r+0x22e>
 800ac56:	2300      	movs	r3, #0
 800ac58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac5c:	18fb      	adds	r3, r7, r3
 800ac5e:	9308      	str	r3, [sp, #32]
 800ac60:	3301      	adds	r3, #1
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	9307      	str	r3, [sp, #28]
 800ac66:	bfb8      	it	lt
 800ac68:	2301      	movlt	r3, #1
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	2204      	movs	r2, #4
 800ac6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac72:	f102 0514 	add.w	r5, r2, #20
 800ac76:	429d      	cmp	r5, r3
 800ac78:	d91f      	bls.n	800acba <_dtoa_r+0x2aa>
 800ac7a:	6041      	str	r1, [r0, #4]
 800ac7c:	4658      	mov	r0, fp
 800ac7e:	f000 fd8d 	bl	800b79c <_Balloc>
 800ac82:	4682      	mov	sl, r0
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d139      	bne.n	800acfc <_dtoa_r+0x2ec>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac8e:	4b1a      	ldr	r3, [pc, #104]	@ (800acf8 <_dtoa_r+0x2e8>)
 800ac90:	e6d2      	b.n	800aa38 <_dtoa_r+0x28>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e7e0      	b.n	800ac58 <_dtoa_r+0x248>
 800ac96:	2401      	movs	r4, #1
 800ac98:	2300      	movs	r3, #0
 800ac9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac9c:	9320      	str	r3, [sp, #128]	@ 0x80
 800ac9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aca2:	2200      	movs	r2, #0
 800aca4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aca8:	2312      	movs	r3, #18
 800acaa:	e7d0      	b.n	800ac4e <_dtoa_r+0x23e>
 800acac:	2301      	movs	r3, #1
 800acae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acb0:	e7f5      	b.n	800ac9e <_dtoa_r+0x28e>
 800acb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800acb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800acb8:	e7d7      	b.n	800ac6a <_dtoa_r+0x25a>
 800acba:	3101      	adds	r1, #1
 800acbc:	0052      	lsls	r2, r2, #1
 800acbe:	e7d8      	b.n	800ac72 <_dtoa_r+0x262>
 800acc0:	636f4361 	.word	0x636f4361
 800acc4:	3fd287a7 	.word	0x3fd287a7
 800acc8:	8b60c8b3 	.word	0x8b60c8b3
 800accc:	3fc68a28 	.word	0x3fc68a28
 800acd0:	509f79fb 	.word	0x509f79fb
 800acd4:	3fd34413 	.word	0x3fd34413
 800acd8:	0800e0ed 	.word	0x0800e0ed
 800acdc:	0800e104 	.word	0x0800e104
 800ace0:	7ff00000 	.word	0x7ff00000
 800ace4:	0800e0e9 	.word	0x0800e0e9
 800ace8:	0800e0b8 	.word	0x0800e0b8
 800acec:	0800e0b7 	.word	0x0800e0b7
 800acf0:	3ff80000 	.word	0x3ff80000
 800acf4:	0800e200 	.word	0x0800e200
 800acf8:	0800e15c 	.word	0x0800e15c
 800acfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad00:	6018      	str	r0, [r3, #0]
 800ad02:	9b07      	ldr	r3, [sp, #28]
 800ad04:	2b0e      	cmp	r3, #14
 800ad06:	f200 80a4 	bhi.w	800ae52 <_dtoa_r+0x442>
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	f000 80a1 	beq.w	800ae52 <_dtoa_r+0x442>
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	dd33      	ble.n	800ad7c <_dtoa_r+0x36c>
 800ad14:	4b86      	ldr	r3, [pc, #536]	@ (800af30 <_dtoa_r+0x520>)
 800ad16:	f007 020f 	and.w	r2, r7, #15
 800ad1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad1e:	05f8      	lsls	r0, r7, #23
 800ad20:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad2c:	d516      	bpl.n	800ad5c <_dtoa_r+0x34c>
 800ad2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad32:	4b80      	ldr	r3, [pc, #512]	@ (800af34 <_dtoa_r+0x524>)
 800ad34:	2603      	movs	r6, #3
 800ad36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad3a:	f7f5 fcf7 	bl	800072c <__aeabi_ddiv>
 800ad3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad42:	f004 040f 	and.w	r4, r4, #15
 800ad46:	4d7b      	ldr	r5, [pc, #492]	@ (800af34 <_dtoa_r+0x524>)
 800ad48:	b954      	cbnz	r4, 800ad60 <_dtoa_r+0x350>
 800ad4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad52:	f7f5 fceb 	bl	800072c <__aeabi_ddiv>
 800ad56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad5a:	e028      	b.n	800adae <_dtoa_r+0x39e>
 800ad5c:	2602      	movs	r6, #2
 800ad5e:	e7f2      	b.n	800ad46 <_dtoa_r+0x336>
 800ad60:	07e1      	lsls	r1, r4, #31
 800ad62:	d508      	bpl.n	800ad76 <_dtoa_r+0x366>
 800ad64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad6c:	f7f5 fbb4 	bl	80004d8 <__aeabi_dmul>
 800ad70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad74:	3601      	adds	r6, #1
 800ad76:	1064      	asrs	r4, r4, #1
 800ad78:	3508      	adds	r5, #8
 800ad7a:	e7e5      	b.n	800ad48 <_dtoa_r+0x338>
 800ad7c:	f000 80d2 	beq.w	800af24 <_dtoa_r+0x514>
 800ad80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad84:	427c      	negs	r4, r7
 800ad86:	4b6a      	ldr	r3, [pc, #424]	@ (800af30 <_dtoa_r+0x520>)
 800ad88:	f004 020f 	and.w	r2, r4, #15
 800ad8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	f7f5 fba0 	bl	80004d8 <__aeabi_dmul>
 800ad98:	2602      	movs	r6, #2
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada0:	4d64      	ldr	r5, [pc, #400]	@ (800af34 <_dtoa_r+0x524>)
 800ada2:	1124      	asrs	r4, r4, #4
 800ada4:	2c00      	cmp	r4, #0
 800ada6:	f040 80b2 	bne.w	800af0e <_dtoa_r+0x4fe>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1d3      	bne.n	800ad56 <_dtoa_r+0x346>
 800adae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800adb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80b7 	beq.w	800af28 <_dtoa_r+0x518>
 800adba:	2200      	movs	r2, #0
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	4b5d      	ldr	r3, [pc, #372]	@ (800af38 <_dtoa_r+0x528>)
 800adc2:	f7f5 fdfb 	bl	80009bc <__aeabi_dcmplt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f000 80ae 	beq.w	800af28 <_dtoa_r+0x518>
 800adcc:	9b07      	ldr	r3, [sp, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 80aa 	beq.w	800af28 <_dtoa_r+0x518>
 800add4:	9b08      	ldr	r3, [sp, #32]
 800add6:	2b00      	cmp	r3, #0
 800add8:	dd37      	ble.n	800ae4a <_dtoa_r+0x43a>
 800adda:	1e7b      	subs	r3, r7, #1
 800addc:	4620      	mov	r0, r4
 800adde:	9304      	str	r3, [sp, #16]
 800ade0:	2200      	movs	r2, #0
 800ade2:	4629      	mov	r1, r5
 800ade4:	4b55      	ldr	r3, [pc, #340]	@ (800af3c <_dtoa_r+0x52c>)
 800ade6:	f7f5 fb77 	bl	80004d8 <__aeabi_dmul>
 800adea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adee:	9c08      	ldr	r4, [sp, #32]
 800adf0:	3601      	adds	r6, #1
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7f5 fb06 	bl	8000404 <__aeabi_i2d>
 800adf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adfc:	f7f5 fb6c 	bl	80004d8 <__aeabi_dmul>
 800ae00:	2200      	movs	r2, #0
 800ae02:	4b4f      	ldr	r3, [pc, #316]	@ (800af40 <_dtoa_r+0x530>)
 800ae04:	f7f5 f9b2 	bl	800016c <__adddf3>
 800ae08:	4605      	mov	r5, r0
 800ae0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	f040 809a 	bne.w	800af48 <_dtoa_r+0x538>
 800ae14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4b4a      	ldr	r3, [pc, #296]	@ (800af44 <_dtoa_r+0x534>)
 800ae1c:	f7f5 f9a4 	bl	8000168 <__aeabi_dsub>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4633      	mov	r3, r6
 800ae2c:	f7f5 fde4 	bl	80009f8 <__aeabi_dcmpgt>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	f040 828e 	bne.w	800b352 <_dtoa_r+0x942>
 800ae36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae40:	f7f5 fdbc 	bl	80009bc <__aeabi_dcmplt>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	f040 8127 	bne.w	800b098 <_dtoa_r+0x688>
 800ae4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ae52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f2c0 8163 	blt.w	800b120 <_dtoa_r+0x710>
 800ae5a:	2f0e      	cmp	r7, #14
 800ae5c:	f300 8160 	bgt.w	800b120 <_dtoa_r+0x710>
 800ae60:	4b33      	ldr	r3, [pc, #204]	@ (800af30 <_dtoa_r+0x520>)
 800ae62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae66:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	da03      	bge.n	800ae7c <_dtoa_r+0x46c>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f340 8100 	ble.w	800b07c <_dtoa_r+0x66c>
 800ae7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae80:	4656      	mov	r6, sl
 800ae82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 fc4f 	bl	800072c <__aeabi_ddiv>
 800ae8e:	f7f5 fdd3 	bl	8000a38 <__aeabi_d2iz>
 800ae92:	4680      	mov	r8, r0
 800ae94:	f7f5 fab6 	bl	8000404 <__aeabi_i2d>
 800ae98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae9c:	f7f5 fb1c 	bl	80004d8 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 f95e 	bl	8000168 <__aeabi_dsub>
 800aeac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aeb0:	9d07      	ldr	r5, [sp, #28]
 800aeb2:	f806 4b01 	strb.w	r4, [r6], #1
 800aeb6:	eba6 040a 	sub.w	r4, r6, sl
 800aeba:	42a5      	cmp	r5, r4
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	f040 8116 	bne.w	800b0f0 <_dtoa_r+0x6e0>
 800aec4:	f7f5 f952 	bl	800016c <__adddf3>
 800aec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	f7f5 fd92 	bl	80009f8 <__aeabi_dcmpgt>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	f040 80f8 	bne.w	800b0ca <_dtoa_r+0x6ba>
 800aeda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 fd61 	bl	80009a8 <__aeabi_dcmpeq>
 800aee6:	b118      	cbz	r0, 800aef0 <_dtoa_r+0x4e0>
 800aee8:	f018 0f01 	tst.w	r8, #1
 800aeec:	f040 80ed 	bne.w	800b0ca <_dtoa_r+0x6ba>
 800aef0:	4649      	mov	r1, r9
 800aef2:	4658      	mov	r0, fp
 800aef4:	f000 fc92 	bl	800b81c <_Bfree>
 800aef8:	2300      	movs	r3, #0
 800aefa:	7033      	strb	r3, [r6, #0]
 800aefc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aefe:	3701      	adds	r7, #1
 800af00:	601f      	str	r7, [r3, #0]
 800af02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 8320 	beq.w	800b54a <_dtoa_r+0xb3a>
 800af0a:	601e      	str	r6, [r3, #0]
 800af0c:	e31d      	b.n	800b54a <_dtoa_r+0xb3a>
 800af0e:	07e2      	lsls	r2, r4, #31
 800af10:	d505      	bpl.n	800af1e <_dtoa_r+0x50e>
 800af12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af16:	f7f5 fadf 	bl	80004d8 <__aeabi_dmul>
 800af1a:	2301      	movs	r3, #1
 800af1c:	3601      	adds	r6, #1
 800af1e:	1064      	asrs	r4, r4, #1
 800af20:	3508      	adds	r5, #8
 800af22:	e73f      	b.n	800ada4 <_dtoa_r+0x394>
 800af24:	2602      	movs	r6, #2
 800af26:	e742      	b.n	800adae <_dtoa_r+0x39e>
 800af28:	9c07      	ldr	r4, [sp, #28]
 800af2a:	9704      	str	r7, [sp, #16]
 800af2c:	e761      	b.n	800adf2 <_dtoa_r+0x3e2>
 800af2e:	bf00      	nop
 800af30:	0800e200 	.word	0x0800e200
 800af34:	0800e1d8 	.word	0x0800e1d8
 800af38:	3ff00000 	.word	0x3ff00000
 800af3c:	40240000 	.word	0x40240000
 800af40:	401c0000 	.word	0x401c0000
 800af44:	40140000 	.word	0x40140000
 800af48:	4b70      	ldr	r3, [pc, #448]	@ (800b10c <_dtoa_r+0x6fc>)
 800af4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af54:	4454      	add	r4, sl
 800af56:	2900      	cmp	r1, #0
 800af58:	d045      	beq.n	800afe6 <_dtoa_r+0x5d6>
 800af5a:	2000      	movs	r0, #0
 800af5c:	496c      	ldr	r1, [pc, #432]	@ (800b110 <_dtoa_r+0x700>)
 800af5e:	f7f5 fbe5 	bl	800072c <__aeabi_ddiv>
 800af62:	4633      	mov	r3, r6
 800af64:	462a      	mov	r2, r5
 800af66:	f7f5 f8ff 	bl	8000168 <__aeabi_dsub>
 800af6a:	4656      	mov	r6, sl
 800af6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af74:	f7f5 fd60 	bl	8000a38 <__aeabi_d2iz>
 800af78:	4605      	mov	r5, r0
 800af7a:	f7f5 fa43 	bl	8000404 <__aeabi_i2d>
 800af7e:	4602      	mov	r2, r0
 800af80:	460b      	mov	r3, r1
 800af82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af86:	f7f5 f8ef 	bl	8000168 <__aeabi_dsub>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	3530      	adds	r5, #48	@ 0x30
 800af90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af98:	f806 5b01 	strb.w	r5, [r6], #1
 800af9c:	f7f5 fd0e 	bl	80009bc <__aeabi_dcmplt>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d163      	bne.n	800b06c <_dtoa_r+0x65c>
 800afa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afa8:	2000      	movs	r0, #0
 800afaa:	495a      	ldr	r1, [pc, #360]	@ (800b114 <_dtoa_r+0x704>)
 800afac:	f7f5 f8dc 	bl	8000168 <__aeabi_dsub>
 800afb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800afb4:	f7f5 fd02 	bl	80009bc <__aeabi_dcmplt>
 800afb8:	2800      	cmp	r0, #0
 800afba:	f040 8087 	bne.w	800b0cc <_dtoa_r+0x6bc>
 800afbe:	42a6      	cmp	r6, r4
 800afc0:	f43f af43 	beq.w	800ae4a <_dtoa_r+0x43a>
 800afc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afc8:	2200      	movs	r2, #0
 800afca:	4b53      	ldr	r3, [pc, #332]	@ (800b118 <_dtoa_r+0x708>)
 800afcc:	f7f5 fa84 	bl	80004d8 <__aeabi_dmul>
 800afd0:	2200      	movs	r2, #0
 800afd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afda:	4b4f      	ldr	r3, [pc, #316]	@ (800b118 <_dtoa_r+0x708>)
 800afdc:	f7f5 fa7c 	bl	80004d8 <__aeabi_dmul>
 800afe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe4:	e7c4      	b.n	800af70 <_dtoa_r+0x560>
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	f7f5 fa75 	bl	80004d8 <__aeabi_dmul>
 800afee:	4656      	mov	r6, sl
 800aff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aff4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800affa:	f7f5 fd1d 	bl	8000a38 <__aeabi_d2iz>
 800affe:	4605      	mov	r5, r0
 800b000:	f7f5 fa00 	bl	8000404 <__aeabi_i2d>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b00c:	f7f5 f8ac 	bl	8000168 <__aeabi_dsub>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	3530      	adds	r5, #48	@ 0x30
 800b016:	f806 5b01 	strb.w	r5, [r6], #1
 800b01a:	42a6      	cmp	r6, r4
 800b01c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b020:	f04f 0200 	mov.w	r2, #0
 800b024:	d124      	bne.n	800b070 <_dtoa_r+0x660>
 800b026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b02a:	4b39      	ldr	r3, [pc, #228]	@ (800b110 <_dtoa_r+0x700>)
 800b02c:	f7f5 f89e 	bl	800016c <__adddf3>
 800b030:	4602      	mov	r2, r0
 800b032:	460b      	mov	r3, r1
 800b034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b038:	f7f5 fcde 	bl	80009f8 <__aeabi_dcmpgt>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d145      	bne.n	800b0cc <_dtoa_r+0x6bc>
 800b040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b044:	2000      	movs	r0, #0
 800b046:	4932      	ldr	r1, [pc, #200]	@ (800b110 <_dtoa_r+0x700>)
 800b048:	f7f5 f88e 	bl	8000168 <__aeabi_dsub>
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b054:	f7f5 fcb2 	bl	80009bc <__aeabi_dcmplt>
 800b058:	2800      	cmp	r0, #0
 800b05a:	f43f aef6 	beq.w	800ae4a <_dtoa_r+0x43a>
 800b05e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b060:	1e73      	subs	r3, r6, #1
 800b062:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b064:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b068:	2b30      	cmp	r3, #48	@ 0x30
 800b06a:	d0f8      	beq.n	800b05e <_dtoa_r+0x64e>
 800b06c:	9f04      	ldr	r7, [sp, #16]
 800b06e:	e73f      	b.n	800aef0 <_dtoa_r+0x4e0>
 800b070:	4b29      	ldr	r3, [pc, #164]	@ (800b118 <_dtoa_r+0x708>)
 800b072:	f7f5 fa31 	bl	80004d8 <__aeabi_dmul>
 800b076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b07a:	e7bc      	b.n	800aff6 <_dtoa_r+0x5e6>
 800b07c:	d10c      	bne.n	800b098 <_dtoa_r+0x688>
 800b07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b082:	2200      	movs	r2, #0
 800b084:	4b25      	ldr	r3, [pc, #148]	@ (800b11c <_dtoa_r+0x70c>)
 800b086:	f7f5 fa27 	bl	80004d8 <__aeabi_dmul>
 800b08a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b08e:	f7f5 fca9 	bl	80009e4 <__aeabi_dcmpge>
 800b092:	2800      	cmp	r0, #0
 800b094:	f000 815b 	beq.w	800b34e <_dtoa_r+0x93e>
 800b098:	2400      	movs	r4, #0
 800b09a:	4625      	mov	r5, r4
 800b09c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b09e:	4656      	mov	r6, sl
 800b0a0:	43db      	mvns	r3, r3
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	2700      	movs	r7, #0
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4658      	mov	r0, fp
 800b0aa:	f000 fbb7 	bl	800b81c <_Bfree>
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	d0dc      	beq.n	800b06c <_dtoa_r+0x65c>
 800b0b2:	b12f      	cbz	r7, 800b0c0 <_dtoa_r+0x6b0>
 800b0b4:	42af      	cmp	r7, r5
 800b0b6:	d003      	beq.n	800b0c0 <_dtoa_r+0x6b0>
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	4658      	mov	r0, fp
 800b0bc:	f000 fbae 	bl	800b81c <_Bfree>
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	f000 fbaa 	bl	800b81c <_Bfree>
 800b0c8:	e7d0      	b.n	800b06c <_dtoa_r+0x65c>
 800b0ca:	9704      	str	r7, [sp, #16]
 800b0cc:	4633      	mov	r3, r6
 800b0ce:	461e      	mov	r6, r3
 800b0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d4:	2a39      	cmp	r2, #57	@ 0x39
 800b0d6:	d107      	bne.n	800b0e8 <_dtoa_r+0x6d8>
 800b0d8:	459a      	cmp	sl, r3
 800b0da:	d1f8      	bne.n	800b0ce <_dtoa_r+0x6be>
 800b0dc:	9a04      	ldr	r2, [sp, #16]
 800b0de:	3201      	adds	r2, #1
 800b0e0:	9204      	str	r2, [sp, #16]
 800b0e2:	2230      	movs	r2, #48	@ 0x30
 800b0e4:	f88a 2000 	strb.w	r2, [sl]
 800b0e8:	781a      	ldrb	r2, [r3, #0]
 800b0ea:	3201      	adds	r2, #1
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	e7bd      	b.n	800b06c <_dtoa_r+0x65c>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4b09      	ldr	r3, [pc, #36]	@ (800b118 <_dtoa_r+0x708>)
 800b0f4:	f7f5 f9f0 	bl	80004d8 <__aeabi_dmul>
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	460d      	mov	r5, r1
 800b100:	f7f5 fc52 	bl	80009a8 <__aeabi_dcmpeq>
 800b104:	2800      	cmp	r0, #0
 800b106:	f43f aebc 	beq.w	800ae82 <_dtoa_r+0x472>
 800b10a:	e6f1      	b.n	800aef0 <_dtoa_r+0x4e0>
 800b10c:	0800e200 	.word	0x0800e200
 800b110:	3fe00000 	.word	0x3fe00000
 800b114:	3ff00000 	.word	0x3ff00000
 800b118:	40240000 	.word	0x40240000
 800b11c:	40140000 	.word	0x40140000
 800b120:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b122:	2a00      	cmp	r2, #0
 800b124:	f000 80db 	beq.w	800b2de <_dtoa_r+0x8ce>
 800b128:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b12a:	2a01      	cmp	r2, #1
 800b12c:	f300 80bf 	bgt.w	800b2ae <_dtoa_r+0x89e>
 800b130:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b132:	2a00      	cmp	r2, #0
 800b134:	f000 80b7 	beq.w	800b2a6 <_dtoa_r+0x896>
 800b138:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b13c:	4646      	mov	r6, r8
 800b13e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b142:	2101      	movs	r1, #1
 800b144:	441a      	add	r2, r3
 800b146:	4658      	mov	r0, fp
 800b148:	4498      	add	r8, r3
 800b14a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b14c:	f000 fc64 	bl	800ba18 <__i2b>
 800b150:	4605      	mov	r5, r0
 800b152:	b15e      	cbz	r6, 800b16c <_dtoa_r+0x75c>
 800b154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b156:	2b00      	cmp	r3, #0
 800b158:	dd08      	ble.n	800b16c <_dtoa_r+0x75c>
 800b15a:	42b3      	cmp	r3, r6
 800b15c:	bfa8      	it	ge
 800b15e:	4633      	movge	r3, r6
 800b160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b162:	eba8 0803 	sub.w	r8, r8, r3
 800b166:	1af6      	subs	r6, r6, r3
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b16e:	b1f3      	cbz	r3, 800b1ae <_dtoa_r+0x79e>
 800b170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 80b7 	beq.w	800b2e6 <_dtoa_r+0x8d6>
 800b178:	b18c      	cbz	r4, 800b19e <_dtoa_r+0x78e>
 800b17a:	4629      	mov	r1, r5
 800b17c:	4622      	mov	r2, r4
 800b17e:	4658      	mov	r0, fp
 800b180:	f000 fd08 	bl	800bb94 <__pow5mult>
 800b184:	464a      	mov	r2, r9
 800b186:	4601      	mov	r1, r0
 800b188:	4605      	mov	r5, r0
 800b18a:	4658      	mov	r0, fp
 800b18c:	f000 fc5a 	bl	800ba44 <__multiply>
 800b190:	4649      	mov	r1, r9
 800b192:	9004      	str	r0, [sp, #16]
 800b194:	4658      	mov	r0, fp
 800b196:	f000 fb41 	bl	800b81c <_Bfree>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	4699      	mov	r9, r3
 800b19e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1a0:	1b1a      	subs	r2, r3, r4
 800b1a2:	d004      	beq.n	800b1ae <_dtoa_r+0x79e>
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	4658      	mov	r0, fp
 800b1a8:	f000 fcf4 	bl	800bb94 <__pow5mult>
 800b1ac:	4681      	mov	r9, r0
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4658      	mov	r0, fp
 800b1b2:	f000 fc31 	bl	800ba18 <__i2b>
 800b1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f000 81c9 	beq.w	800b552 <_dtoa_r+0xb42>
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	4658      	mov	r0, fp
 800b1c6:	f000 fce5 	bl	800bb94 <__pow5mult>
 800b1ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	f300 808f 	bgt.w	800b2f2 <_dtoa_r+0x8e2>
 800b1d4:	9b02      	ldr	r3, [sp, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f040 8087 	bne.w	800b2ea <_dtoa_r+0x8da>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f040 8083 	bne.w	800b2ee <_dtoa_r+0x8de>
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1ee:	0d1b      	lsrs	r3, r3, #20
 800b1f0:	051b      	lsls	r3, r3, #20
 800b1f2:	b12b      	cbz	r3, 800b200 <_dtoa_r+0x7f0>
 800b1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1f6:	f108 0801 	add.w	r8, r8, #1
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1fe:	2301      	movs	r3, #1
 800b200:	930a      	str	r3, [sp, #40]	@ 0x28
 800b202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 81aa 	beq.w	800b55e <_dtoa_r+0xb4e>
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b210:	6918      	ldr	r0, [r3, #16]
 800b212:	f000 fbb5 	bl	800b980 <__hi0bits>
 800b216:	f1c0 0020 	rsb	r0, r0, #32
 800b21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b21c:	4418      	add	r0, r3
 800b21e:	f010 001f 	ands.w	r0, r0, #31
 800b222:	d071      	beq.n	800b308 <_dtoa_r+0x8f8>
 800b224:	f1c0 0320 	rsb	r3, r0, #32
 800b228:	2b04      	cmp	r3, #4
 800b22a:	dd65      	ble.n	800b2f8 <_dtoa_r+0x8e8>
 800b22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22e:	f1c0 001c 	rsb	r0, r0, #28
 800b232:	4403      	add	r3, r0
 800b234:	4480      	add	r8, r0
 800b236:	4406      	add	r6, r0
 800b238:	9309      	str	r3, [sp, #36]	@ 0x24
 800b23a:	f1b8 0f00 	cmp.w	r8, #0
 800b23e:	dd05      	ble.n	800b24c <_dtoa_r+0x83c>
 800b240:	4649      	mov	r1, r9
 800b242:	4642      	mov	r2, r8
 800b244:	4658      	mov	r0, fp
 800b246:	f000 fcff 	bl	800bc48 <__lshift>
 800b24a:	4681      	mov	r9, r0
 800b24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24e:	2b00      	cmp	r3, #0
 800b250:	dd05      	ble.n	800b25e <_dtoa_r+0x84e>
 800b252:	4621      	mov	r1, r4
 800b254:	461a      	mov	r2, r3
 800b256:	4658      	mov	r0, fp
 800b258:	f000 fcf6 	bl	800bc48 <__lshift>
 800b25c:	4604      	mov	r4, r0
 800b25e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d053      	beq.n	800b30c <_dtoa_r+0x8fc>
 800b264:	4621      	mov	r1, r4
 800b266:	4648      	mov	r0, r9
 800b268:	f000 fd5a 	bl	800bd20 <__mcmp>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	da4d      	bge.n	800b30c <_dtoa_r+0x8fc>
 800b270:	1e7b      	subs	r3, r7, #1
 800b272:	4649      	mov	r1, r9
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	220a      	movs	r2, #10
 800b278:	2300      	movs	r3, #0
 800b27a:	4658      	mov	r0, fp
 800b27c:	f000 faf0 	bl	800b860 <__multadd>
 800b280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b282:	4681      	mov	r9, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 816c 	beq.w	800b562 <_dtoa_r+0xb52>
 800b28a:	2300      	movs	r3, #0
 800b28c:	4629      	mov	r1, r5
 800b28e:	220a      	movs	r2, #10
 800b290:	4658      	mov	r0, fp
 800b292:	f000 fae5 	bl	800b860 <__multadd>
 800b296:	9b08      	ldr	r3, [sp, #32]
 800b298:	4605      	mov	r5, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dc61      	bgt.n	800b362 <_dtoa_r+0x952>
 800b29e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	dc3b      	bgt.n	800b31c <_dtoa_r+0x90c>
 800b2a4:	e05d      	b.n	800b362 <_dtoa_r+0x952>
 800b2a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b2ac:	e746      	b.n	800b13c <_dtoa_r+0x72c>
 800b2ae:	9b07      	ldr	r3, [sp, #28]
 800b2b0:	1e5c      	subs	r4, r3, #1
 800b2b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	bfbf      	itttt	lt
 800b2b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b2ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b2bc:	1ae3      	sublt	r3, r4, r3
 800b2be:	18d2      	addlt	r2, r2, r3
 800b2c0:	bfa8      	it	ge
 800b2c2:	1b1c      	subge	r4, r3, r4
 800b2c4:	9b07      	ldr	r3, [sp, #28]
 800b2c6:	bfbe      	ittt	lt
 800b2c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b2ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b2cc:	2400      	movlt	r4, #0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfb5      	itete	lt
 800b2d2:	eba8 0603 	sublt.w	r6, r8, r3
 800b2d6:	4646      	movge	r6, r8
 800b2d8:	2300      	movlt	r3, #0
 800b2da:	9b07      	ldrge	r3, [sp, #28]
 800b2dc:	e730      	b.n	800b140 <_dtoa_r+0x730>
 800b2de:	4646      	mov	r6, r8
 800b2e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b2e4:	e735      	b.n	800b152 <_dtoa_r+0x742>
 800b2e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2e8:	e75c      	b.n	800b1a4 <_dtoa_r+0x794>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e788      	b.n	800b200 <_dtoa_r+0x7f0>
 800b2ee:	9b02      	ldr	r3, [sp, #8]
 800b2f0:	e786      	b.n	800b200 <_dtoa_r+0x7f0>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f6:	e788      	b.n	800b20a <_dtoa_r+0x7fa>
 800b2f8:	d09f      	beq.n	800b23a <_dtoa_r+0x82a>
 800b2fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2fc:	331c      	adds	r3, #28
 800b2fe:	441a      	add	r2, r3
 800b300:	4498      	add	r8, r3
 800b302:	441e      	add	r6, r3
 800b304:	9209      	str	r2, [sp, #36]	@ 0x24
 800b306:	e798      	b.n	800b23a <_dtoa_r+0x82a>
 800b308:	4603      	mov	r3, r0
 800b30a:	e7f6      	b.n	800b2fa <_dtoa_r+0x8ea>
 800b30c:	9b07      	ldr	r3, [sp, #28]
 800b30e:	9704      	str	r7, [sp, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	dc20      	bgt.n	800b356 <_dtoa_r+0x946>
 800b314:	9308      	str	r3, [sp, #32]
 800b316:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b318:	2b02      	cmp	r3, #2
 800b31a:	dd1e      	ble.n	800b35a <_dtoa_r+0x94a>
 800b31c:	9b08      	ldr	r3, [sp, #32]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f47f aebc 	bne.w	800b09c <_dtoa_r+0x68c>
 800b324:	4621      	mov	r1, r4
 800b326:	2205      	movs	r2, #5
 800b328:	4658      	mov	r0, fp
 800b32a:	f000 fa99 	bl	800b860 <__multadd>
 800b32e:	4601      	mov	r1, r0
 800b330:	4604      	mov	r4, r0
 800b332:	4648      	mov	r0, r9
 800b334:	f000 fcf4 	bl	800bd20 <__mcmp>
 800b338:	2800      	cmp	r0, #0
 800b33a:	f77f aeaf 	ble.w	800b09c <_dtoa_r+0x68c>
 800b33e:	2331      	movs	r3, #49	@ 0x31
 800b340:	4656      	mov	r6, sl
 800b342:	f806 3b01 	strb.w	r3, [r6], #1
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	3301      	adds	r3, #1
 800b34a:	9304      	str	r3, [sp, #16]
 800b34c:	e6aa      	b.n	800b0a4 <_dtoa_r+0x694>
 800b34e:	9c07      	ldr	r4, [sp, #28]
 800b350:	9704      	str	r7, [sp, #16]
 800b352:	4625      	mov	r5, r4
 800b354:	e7f3      	b.n	800b33e <_dtoa_r+0x92e>
 800b356:	9b07      	ldr	r3, [sp, #28]
 800b358:	9308      	str	r3, [sp, #32]
 800b35a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 8104 	beq.w	800b56a <_dtoa_r+0xb5a>
 800b362:	2e00      	cmp	r6, #0
 800b364:	dd05      	ble.n	800b372 <_dtoa_r+0x962>
 800b366:	4629      	mov	r1, r5
 800b368:	4632      	mov	r2, r6
 800b36a:	4658      	mov	r0, fp
 800b36c:	f000 fc6c 	bl	800bc48 <__lshift>
 800b370:	4605      	mov	r5, r0
 800b372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b374:	2b00      	cmp	r3, #0
 800b376:	d05a      	beq.n	800b42e <_dtoa_r+0xa1e>
 800b378:	4658      	mov	r0, fp
 800b37a:	6869      	ldr	r1, [r5, #4]
 800b37c:	f000 fa0e 	bl	800b79c <_Balloc>
 800b380:	4606      	mov	r6, r0
 800b382:	b928      	cbnz	r0, 800b390 <_dtoa_r+0x980>
 800b384:	4602      	mov	r2, r0
 800b386:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b38a:	4b83      	ldr	r3, [pc, #524]	@ (800b598 <_dtoa_r+0xb88>)
 800b38c:	f7ff bb54 	b.w	800aa38 <_dtoa_r+0x28>
 800b390:	692a      	ldr	r2, [r5, #16]
 800b392:	f105 010c 	add.w	r1, r5, #12
 800b396:	3202      	adds	r2, #2
 800b398:	0092      	lsls	r2, r2, #2
 800b39a:	300c      	adds	r0, #12
 800b39c:	f7ff fa9b 	bl	800a8d6 <memcpy>
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4658      	mov	r0, fp
 800b3a6:	f000 fc4f 	bl	800bc48 <__lshift>
 800b3aa:	462f      	mov	r7, r5
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	f10a 0301 	add.w	r3, sl, #1
 800b3b2:	9307      	str	r3, [sp, #28]
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	4453      	add	r3, sl
 800b3b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3c2:	9b07      	ldr	r3, [sp, #28]
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	9302      	str	r3, [sp, #8]
 800b3cc:	f7ff fa96 	bl	800a8fc <quorem>
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	9008      	str	r0, [sp, #32]
 800b3d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3d8:	4648      	mov	r0, r9
 800b3da:	f000 fca1 	bl	800bd20 <__mcmp>
 800b3de:	462a      	mov	r2, r5
 800b3e0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4658      	mov	r0, fp
 800b3e6:	f000 fcb7 	bl	800bd58 <__mdiff>
 800b3ea:	68c2      	ldr	r2, [r0, #12]
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	bb02      	cbnz	r2, 800b432 <_dtoa_r+0xa22>
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	4648      	mov	r0, r9
 800b3f4:	f000 fc94 	bl	800bd20 <__mcmp>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	4631      	mov	r1, r6
 800b3fc:	4658      	mov	r0, fp
 800b3fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800b400:	f000 fa0c 	bl	800b81c <_Bfree>
 800b404:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b406:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b408:	9e07      	ldr	r6, [sp, #28]
 800b40a:	ea43 0102 	orr.w	r1, r3, r2
 800b40e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b410:	4319      	orrs	r1, r3
 800b412:	d110      	bne.n	800b436 <_dtoa_r+0xa26>
 800b414:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b418:	d029      	beq.n	800b46e <_dtoa_r+0xa5e>
 800b41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dd02      	ble.n	800b426 <_dtoa_r+0xa16>
 800b420:	9b08      	ldr	r3, [sp, #32]
 800b422:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b426:	9b02      	ldr	r3, [sp, #8]
 800b428:	f883 8000 	strb.w	r8, [r3]
 800b42c:	e63b      	b.n	800b0a6 <_dtoa_r+0x696>
 800b42e:	4628      	mov	r0, r5
 800b430:	e7bb      	b.n	800b3aa <_dtoa_r+0x99a>
 800b432:	2201      	movs	r2, #1
 800b434:	e7e1      	b.n	800b3fa <_dtoa_r+0x9ea>
 800b436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	db04      	blt.n	800b446 <_dtoa_r+0xa36>
 800b43c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b43e:	430b      	orrs	r3, r1
 800b440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b442:	430b      	orrs	r3, r1
 800b444:	d120      	bne.n	800b488 <_dtoa_r+0xa78>
 800b446:	2a00      	cmp	r2, #0
 800b448:	dded      	ble.n	800b426 <_dtoa_r+0xa16>
 800b44a:	4649      	mov	r1, r9
 800b44c:	2201      	movs	r2, #1
 800b44e:	4658      	mov	r0, fp
 800b450:	f000 fbfa 	bl	800bc48 <__lshift>
 800b454:	4621      	mov	r1, r4
 800b456:	4681      	mov	r9, r0
 800b458:	f000 fc62 	bl	800bd20 <__mcmp>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	dc03      	bgt.n	800b468 <_dtoa_r+0xa58>
 800b460:	d1e1      	bne.n	800b426 <_dtoa_r+0xa16>
 800b462:	f018 0f01 	tst.w	r8, #1
 800b466:	d0de      	beq.n	800b426 <_dtoa_r+0xa16>
 800b468:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b46c:	d1d8      	bne.n	800b420 <_dtoa_r+0xa10>
 800b46e:	2339      	movs	r3, #57	@ 0x39
 800b470:	9a02      	ldr	r2, [sp, #8]
 800b472:	7013      	strb	r3, [r2, #0]
 800b474:	4633      	mov	r3, r6
 800b476:	461e      	mov	r6, r3
 800b478:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	2a39      	cmp	r2, #57	@ 0x39
 800b480:	d052      	beq.n	800b528 <_dtoa_r+0xb18>
 800b482:	3201      	adds	r2, #1
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	e60e      	b.n	800b0a6 <_dtoa_r+0x696>
 800b488:	2a00      	cmp	r2, #0
 800b48a:	dd07      	ble.n	800b49c <_dtoa_r+0xa8c>
 800b48c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b490:	d0ed      	beq.n	800b46e <_dtoa_r+0xa5e>
 800b492:	9a02      	ldr	r2, [sp, #8]
 800b494:	f108 0301 	add.w	r3, r8, #1
 800b498:	7013      	strb	r3, [r2, #0]
 800b49a:	e604      	b.n	800b0a6 <_dtoa_r+0x696>
 800b49c:	9b07      	ldr	r3, [sp, #28]
 800b49e:	9a07      	ldr	r2, [sp, #28]
 800b4a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b4a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d028      	beq.n	800b4fc <_dtoa_r+0xaec>
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	220a      	movs	r2, #10
 800b4b0:	4658      	mov	r0, fp
 800b4b2:	f000 f9d5 	bl	800b860 <__multadd>
 800b4b6:	42af      	cmp	r7, r5
 800b4b8:	4681      	mov	r9, r0
 800b4ba:	f04f 0300 	mov.w	r3, #0
 800b4be:	f04f 020a 	mov.w	r2, #10
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4658      	mov	r0, fp
 800b4c6:	d107      	bne.n	800b4d8 <_dtoa_r+0xac8>
 800b4c8:	f000 f9ca 	bl	800b860 <__multadd>
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	9b07      	ldr	r3, [sp, #28]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	9307      	str	r3, [sp, #28]
 800b4d6:	e774      	b.n	800b3c2 <_dtoa_r+0x9b2>
 800b4d8:	f000 f9c2 	bl	800b860 <__multadd>
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4607      	mov	r7, r0
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	220a      	movs	r2, #10
 800b4e4:	4658      	mov	r0, fp
 800b4e6:	f000 f9bb 	bl	800b860 <__multadd>
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	e7f0      	b.n	800b4d0 <_dtoa_r+0xac0>
 800b4ee:	9b08      	ldr	r3, [sp, #32]
 800b4f0:	2700      	movs	r7, #0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	bfcc      	ite	gt
 800b4f6:	461e      	movgt	r6, r3
 800b4f8:	2601      	movle	r6, #1
 800b4fa:	4456      	add	r6, sl
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	2201      	movs	r2, #1
 800b500:	4658      	mov	r0, fp
 800b502:	f000 fba1 	bl	800bc48 <__lshift>
 800b506:	4621      	mov	r1, r4
 800b508:	4681      	mov	r9, r0
 800b50a:	f000 fc09 	bl	800bd20 <__mcmp>
 800b50e:	2800      	cmp	r0, #0
 800b510:	dcb0      	bgt.n	800b474 <_dtoa_r+0xa64>
 800b512:	d102      	bne.n	800b51a <_dtoa_r+0xb0a>
 800b514:	f018 0f01 	tst.w	r8, #1
 800b518:	d1ac      	bne.n	800b474 <_dtoa_r+0xa64>
 800b51a:	4633      	mov	r3, r6
 800b51c:	461e      	mov	r6, r3
 800b51e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b522:	2a30      	cmp	r2, #48	@ 0x30
 800b524:	d0fa      	beq.n	800b51c <_dtoa_r+0xb0c>
 800b526:	e5be      	b.n	800b0a6 <_dtoa_r+0x696>
 800b528:	459a      	cmp	sl, r3
 800b52a:	d1a4      	bne.n	800b476 <_dtoa_r+0xa66>
 800b52c:	9b04      	ldr	r3, [sp, #16]
 800b52e:	3301      	adds	r3, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	2331      	movs	r3, #49	@ 0x31
 800b534:	f88a 3000 	strb.w	r3, [sl]
 800b538:	e5b5      	b.n	800b0a6 <_dtoa_r+0x696>
 800b53a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b53c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b59c <_dtoa_r+0xb8c>
 800b540:	b11b      	cbz	r3, 800b54a <_dtoa_r+0xb3a>
 800b542:	f10a 0308 	add.w	r3, sl, #8
 800b546:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	4650      	mov	r0, sl
 800b54c:	b017      	add	sp, #92	@ 0x5c
 800b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b552:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b554:	2b01      	cmp	r3, #1
 800b556:	f77f ae3d 	ble.w	800b1d4 <_dtoa_r+0x7c4>
 800b55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b55c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b55e:	2001      	movs	r0, #1
 800b560:	e65b      	b.n	800b21a <_dtoa_r+0x80a>
 800b562:	9b08      	ldr	r3, [sp, #32]
 800b564:	2b00      	cmp	r3, #0
 800b566:	f77f aed6 	ble.w	800b316 <_dtoa_r+0x906>
 800b56a:	4656      	mov	r6, sl
 800b56c:	4621      	mov	r1, r4
 800b56e:	4648      	mov	r0, r9
 800b570:	f7ff f9c4 	bl	800a8fc <quorem>
 800b574:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b578:	9b08      	ldr	r3, [sp, #32]
 800b57a:	f806 8b01 	strb.w	r8, [r6], #1
 800b57e:	eba6 020a 	sub.w	r2, r6, sl
 800b582:	4293      	cmp	r3, r2
 800b584:	ddb3      	ble.n	800b4ee <_dtoa_r+0xade>
 800b586:	4649      	mov	r1, r9
 800b588:	2300      	movs	r3, #0
 800b58a:	220a      	movs	r2, #10
 800b58c:	4658      	mov	r0, fp
 800b58e:	f000 f967 	bl	800b860 <__multadd>
 800b592:	4681      	mov	r9, r0
 800b594:	e7ea      	b.n	800b56c <_dtoa_r+0xb5c>
 800b596:	bf00      	nop
 800b598:	0800e15c 	.word	0x0800e15c
 800b59c:	0800e0e0 	.word	0x0800e0e0

0800b5a0 <_free_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d040      	beq.n	800b62a <_free_r+0x8a>
 800b5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ac:	1f0c      	subs	r4, r1, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	bfb8      	it	lt
 800b5b2:	18e4      	addlt	r4, r4, r3
 800b5b4:	f000 f8e6 	bl	800b784 <__malloc_lock>
 800b5b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b62c <_free_r+0x8c>)
 800b5ba:	6813      	ldr	r3, [r2, #0]
 800b5bc:	b933      	cbnz	r3, 800b5cc <_free_r+0x2c>
 800b5be:	6063      	str	r3, [r4, #4]
 800b5c0:	6014      	str	r4, [r2, #0]
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c8:	f000 b8e2 	b.w	800b790 <__malloc_unlock>
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	d908      	bls.n	800b5e2 <_free_r+0x42>
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	1821      	adds	r1, r4, r0
 800b5d4:	428b      	cmp	r3, r1
 800b5d6:	bf01      	itttt	eq
 800b5d8:	6819      	ldreq	r1, [r3, #0]
 800b5da:	685b      	ldreq	r3, [r3, #4]
 800b5dc:	1809      	addeq	r1, r1, r0
 800b5de:	6021      	streq	r1, [r4, #0]
 800b5e0:	e7ed      	b.n	800b5be <_free_r+0x1e>
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	b10b      	cbz	r3, 800b5ec <_free_r+0x4c>
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	d9fa      	bls.n	800b5e2 <_free_r+0x42>
 800b5ec:	6811      	ldr	r1, [r2, #0]
 800b5ee:	1850      	adds	r0, r2, r1
 800b5f0:	42a0      	cmp	r0, r4
 800b5f2:	d10b      	bne.n	800b60c <_free_r+0x6c>
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	4401      	add	r1, r0
 800b5f8:	1850      	adds	r0, r2, r1
 800b5fa:	4283      	cmp	r3, r0
 800b5fc:	6011      	str	r1, [r2, #0]
 800b5fe:	d1e0      	bne.n	800b5c2 <_free_r+0x22>
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4408      	add	r0, r1
 800b606:	6010      	str	r0, [r2, #0]
 800b608:	6053      	str	r3, [r2, #4]
 800b60a:	e7da      	b.n	800b5c2 <_free_r+0x22>
 800b60c:	d902      	bls.n	800b614 <_free_r+0x74>
 800b60e:	230c      	movs	r3, #12
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	e7d6      	b.n	800b5c2 <_free_r+0x22>
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	1821      	adds	r1, r4, r0
 800b618:	428b      	cmp	r3, r1
 800b61a:	bf01      	itttt	eq
 800b61c:	6819      	ldreq	r1, [r3, #0]
 800b61e:	685b      	ldreq	r3, [r3, #4]
 800b620:	1809      	addeq	r1, r1, r0
 800b622:	6021      	streq	r1, [r4, #0]
 800b624:	6063      	str	r3, [r4, #4]
 800b626:	6054      	str	r4, [r2, #4]
 800b628:	e7cb      	b.n	800b5c2 <_free_r+0x22>
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	20002384 	.word	0x20002384

0800b630 <malloc>:
 800b630:	4b02      	ldr	r3, [pc, #8]	@ (800b63c <malloc+0xc>)
 800b632:	4601      	mov	r1, r0
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f000 b825 	b.w	800b684 <_malloc_r>
 800b63a:	bf00      	nop
 800b63c:	2000001c 	.word	0x2000001c

0800b640 <sbrk_aligned>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	4e0f      	ldr	r6, [pc, #60]	@ (800b680 <sbrk_aligned+0x40>)
 800b644:	460c      	mov	r4, r1
 800b646:	6831      	ldr	r1, [r6, #0]
 800b648:	4605      	mov	r5, r0
 800b64a:	b911      	cbnz	r1, 800b652 <sbrk_aligned+0x12>
 800b64c:	f001 ff2c 	bl	800d4a8 <_sbrk_r>
 800b650:	6030      	str	r0, [r6, #0]
 800b652:	4621      	mov	r1, r4
 800b654:	4628      	mov	r0, r5
 800b656:	f001 ff27 	bl	800d4a8 <_sbrk_r>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d103      	bne.n	800b666 <sbrk_aligned+0x26>
 800b65e:	f04f 34ff 	mov.w	r4, #4294967295
 800b662:	4620      	mov	r0, r4
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	1cc4      	adds	r4, r0, #3
 800b668:	f024 0403 	bic.w	r4, r4, #3
 800b66c:	42a0      	cmp	r0, r4
 800b66e:	d0f8      	beq.n	800b662 <sbrk_aligned+0x22>
 800b670:	1a21      	subs	r1, r4, r0
 800b672:	4628      	mov	r0, r5
 800b674:	f001 ff18 	bl	800d4a8 <_sbrk_r>
 800b678:	3001      	adds	r0, #1
 800b67a:	d1f2      	bne.n	800b662 <sbrk_aligned+0x22>
 800b67c:	e7ef      	b.n	800b65e <sbrk_aligned+0x1e>
 800b67e:	bf00      	nop
 800b680:	20002380 	.word	0x20002380

0800b684 <_malloc_r>:
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	1ccd      	adds	r5, r1, #3
 800b68a:	f025 0503 	bic.w	r5, r5, #3
 800b68e:	3508      	adds	r5, #8
 800b690:	2d0c      	cmp	r5, #12
 800b692:	bf38      	it	cc
 800b694:	250c      	movcc	r5, #12
 800b696:	2d00      	cmp	r5, #0
 800b698:	4606      	mov	r6, r0
 800b69a:	db01      	blt.n	800b6a0 <_malloc_r+0x1c>
 800b69c:	42a9      	cmp	r1, r5
 800b69e:	d904      	bls.n	800b6aa <_malloc_r+0x26>
 800b6a0:	230c      	movs	r3, #12
 800b6a2:	6033      	str	r3, [r6, #0]
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b780 <_malloc_r+0xfc>
 800b6ae:	f000 f869 	bl	800b784 <__malloc_lock>
 800b6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6b6:	461c      	mov	r4, r3
 800b6b8:	bb44      	cbnz	r4, 800b70c <_malloc_r+0x88>
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7ff ffbf 	bl	800b640 <sbrk_aligned>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	d158      	bne.n	800b77a <_malloc_r+0xf6>
 800b6c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b6cc:	4627      	mov	r7, r4
 800b6ce:	2f00      	cmp	r7, #0
 800b6d0:	d143      	bne.n	800b75a <_malloc_r+0xd6>
 800b6d2:	2c00      	cmp	r4, #0
 800b6d4:	d04b      	beq.n	800b76e <_malloc_r+0xea>
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4630      	mov	r0, r6
 800b6dc:	eb04 0903 	add.w	r9, r4, r3
 800b6e0:	f001 fee2 	bl	800d4a8 <_sbrk_r>
 800b6e4:	4581      	cmp	r9, r0
 800b6e6:	d142      	bne.n	800b76e <_malloc_r+0xea>
 800b6e8:	6821      	ldr	r1, [r4, #0]
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	1a6d      	subs	r5, r5, r1
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7ff ffa6 	bl	800b640 <sbrk_aligned>
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d03a      	beq.n	800b76e <_malloc_r+0xea>
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	442b      	add	r3, r5
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	bb62      	cbnz	r2, 800b760 <_malloc_r+0xdc>
 800b706:	f8c8 7000 	str.w	r7, [r8]
 800b70a:	e00f      	b.n	800b72c <_malloc_r+0xa8>
 800b70c:	6822      	ldr	r2, [r4, #0]
 800b70e:	1b52      	subs	r2, r2, r5
 800b710:	d420      	bmi.n	800b754 <_malloc_r+0xd0>
 800b712:	2a0b      	cmp	r2, #11
 800b714:	d917      	bls.n	800b746 <_malloc_r+0xc2>
 800b716:	1961      	adds	r1, r4, r5
 800b718:	42a3      	cmp	r3, r4
 800b71a:	6025      	str	r5, [r4, #0]
 800b71c:	bf18      	it	ne
 800b71e:	6059      	strne	r1, [r3, #4]
 800b720:	6863      	ldr	r3, [r4, #4]
 800b722:	bf08      	it	eq
 800b724:	f8c8 1000 	streq.w	r1, [r8]
 800b728:	5162      	str	r2, [r4, r5]
 800b72a:	604b      	str	r3, [r1, #4]
 800b72c:	4630      	mov	r0, r6
 800b72e:	f000 f82f 	bl	800b790 <__malloc_unlock>
 800b732:	f104 000b 	add.w	r0, r4, #11
 800b736:	1d23      	adds	r3, r4, #4
 800b738:	f020 0007 	bic.w	r0, r0, #7
 800b73c:	1ac2      	subs	r2, r0, r3
 800b73e:	bf1c      	itt	ne
 800b740:	1a1b      	subne	r3, r3, r0
 800b742:	50a3      	strne	r3, [r4, r2]
 800b744:	e7af      	b.n	800b6a6 <_malloc_r+0x22>
 800b746:	6862      	ldr	r2, [r4, #4]
 800b748:	42a3      	cmp	r3, r4
 800b74a:	bf0c      	ite	eq
 800b74c:	f8c8 2000 	streq.w	r2, [r8]
 800b750:	605a      	strne	r2, [r3, #4]
 800b752:	e7eb      	b.n	800b72c <_malloc_r+0xa8>
 800b754:	4623      	mov	r3, r4
 800b756:	6864      	ldr	r4, [r4, #4]
 800b758:	e7ae      	b.n	800b6b8 <_malloc_r+0x34>
 800b75a:	463c      	mov	r4, r7
 800b75c:	687f      	ldr	r7, [r7, #4]
 800b75e:	e7b6      	b.n	800b6ce <_malloc_r+0x4a>
 800b760:	461a      	mov	r2, r3
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	42a3      	cmp	r3, r4
 800b766:	d1fb      	bne.n	800b760 <_malloc_r+0xdc>
 800b768:	2300      	movs	r3, #0
 800b76a:	6053      	str	r3, [r2, #4]
 800b76c:	e7de      	b.n	800b72c <_malloc_r+0xa8>
 800b76e:	230c      	movs	r3, #12
 800b770:	4630      	mov	r0, r6
 800b772:	6033      	str	r3, [r6, #0]
 800b774:	f000 f80c 	bl	800b790 <__malloc_unlock>
 800b778:	e794      	b.n	800b6a4 <_malloc_r+0x20>
 800b77a:	6005      	str	r5, [r0, #0]
 800b77c:	e7d6      	b.n	800b72c <_malloc_r+0xa8>
 800b77e:	bf00      	nop
 800b780:	20002384 	.word	0x20002384

0800b784 <__malloc_lock>:
 800b784:	4801      	ldr	r0, [pc, #4]	@ (800b78c <__malloc_lock+0x8>)
 800b786:	f7ff b896 	b.w	800a8b6 <__retarget_lock_acquire_recursive>
 800b78a:	bf00      	nop
 800b78c:	2000237c 	.word	0x2000237c

0800b790 <__malloc_unlock>:
 800b790:	4801      	ldr	r0, [pc, #4]	@ (800b798 <__malloc_unlock+0x8>)
 800b792:	f7ff b891 	b.w	800a8b8 <__retarget_lock_release_recursive>
 800b796:	bf00      	nop
 800b798:	2000237c 	.word	0x2000237c

0800b79c <_Balloc>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	69c6      	ldr	r6, [r0, #28]
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	b976      	cbnz	r6, 800b7c4 <_Balloc+0x28>
 800b7a6:	2010      	movs	r0, #16
 800b7a8:	f7ff ff42 	bl	800b630 <malloc>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	61e0      	str	r0, [r4, #28]
 800b7b0:	b920      	cbnz	r0, 800b7bc <_Balloc+0x20>
 800b7b2:	216b      	movs	r1, #107	@ 0x6b
 800b7b4:	4b17      	ldr	r3, [pc, #92]	@ (800b814 <_Balloc+0x78>)
 800b7b6:	4818      	ldr	r0, [pc, #96]	@ (800b818 <_Balloc+0x7c>)
 800b7b8:	f001 fe8c 	bl	800d4d4 <__assert_func>
 800b7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7c0:	6006      	str	r6, [r0, #0]
 800b7c2:	60c6      	str	r6, [r0, #12]
 800b7c4:	69e6      	ldr	r6, [r4, #28]
 800b7c6:	68f3      	ldr	r3, [r6, #12]
 800b7c8:	b183      	cbz	r3, 800b7ec <_Balloc+0x50>
 800b7ca:	69e3      	ldr	r3, [r4, #28]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7d2:	b9b8      	cbnz	r0, 800b804 <_Balloc+0x68>
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b7da:	1d72      	adds	r2, r6, #5
 800b7dc:	4620      	mov	r0, r4
 800b7de:	0092      	lsls	r2, r2, #2
 800b7e0:	f001 fe96 	bl	800d510 <_calloc_r>
 800b7e4:	b160      	cbz	r0, 800b800 <_Balloc+0x64>
 800b7e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ea:	e00e      	b.n	800b80a <_Balloc+0x6e>
 800b7ec:	2221      	movs	r2, #33	@ 0x21
 800b7ee:	2104      	movs	r1, #4
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f001 fe8d 	bl	800d510 <_calloc_r>
 800b7f6:	69e3      	ldr	r3, [r4, #28]
 800b7f8:	60f0      	str	r0, [r6, #12]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e4      	bne.n	800b7ca <_Balloc+0x2e>
 800b800:	2000      	movs	r0, #0
 800b802:	bd70      	pop	{r4, r5, r6, pc}
 800b804:	6802      	ldr	r2, [r0, #0]
 800b806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b80a:	2300      	movs	r3, #0
 800b80c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b810:	e7f7      	b.n	800b802 <_Balloc+0x66>
 800b812:	bf00      	nop
 800b814:	0800e0ed 	.word	0x0800e0ed
 800b818:	0800e16d 	.word	0x0800e16d

0800b81c <_Bfree>:
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	69c6      	ldr	r6, [r0, #28]
 800b820:	4605      	mov	r5, r0
 800b822:	460c      	mov	r4, r1
 800b824:	b976      	cbnz	r6, 800b844 <_Bfree+0x28>
 800b826:	2010      	movs	r0, #16
 800b828:	f7ff ff02 	bl	800b630 <malloc>
 800b82c:	4602      	mov	r2, r0
 800b82e:	61e8      	str	r0, [r5, #28]
 800b830:	b920      	cbnz	r0, 800b83c <_Bfree+0x20>
 800b832:	218f      	movs	r1, #143	@ 0x8f
 800b834:	4b08      	ldr	r3, [pc, #32]	@ (800b858 <_Bfree+0x3c>)
 800b836:	4809      	ldr	r0, [pc, #36]	@ (800b85c <_Bfree+0x40>)
 800b838:	f001 fe4c 	bl	800d4d4 <__assert_func>
 800b83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b840:	6006      	str	r6, [r0, #0]
 800b842:	60c6      	str	r6, [r0, #12]
 800b844:	b13c      	cbz	r4, 800b856 <_Bfree+0x3a>
 800b846:	69eb      	ldr	r3, [r5, #28]
 800b848:	6862      	ldr	r2, [r4, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b850:	6021      	str	r1, [r4, #0]
 800b852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b856:	bd70      	pop	{r4, r5, r6, pc}
 800b858:	0800e0ed 	.word	0x0800e0ed
 800b85c:	0800e16d 	.word	0x0800e16d

0800b860 <__multadd>:
 800b860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b864:	4607      	mov	r7, r0
 800b866:	460c      	mov	r4, r1
 800b868:	461e      	mov	r6, r3
 800b86a:	2000      	movs	r0, #0
 800b86c:	690d      	ldr	r5, [r1, #16]
 800b86e:	f101 0c14 	add.w	ip, r1, #20
 800b872:	f8dc 3000 	ldr.w	r3, [ip]
 800b876:	3001      	adds	r0, #1
 800b878:	b299      	uxth	r1, r3
 800b87a:	fb02 6101 	mla	r1, r2, r1, r6
 800b87e:	0c1e      	lsrs	r6, r3, #16
 800b880:	0c0b      	lsrs	r3, r1, #16
 800b882:	fb02 3306 	mla	r3, r2, r6, r3
 800b886:	b289      	uxth	r1, r1
 800b888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b88c:	4285      	cmp	r5, r0
 800b88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b892:	f84c 1b04 	str.w	r1, [ip], #4
 800b896:	dcec      	bgt.n	800b872 <__multadd+0x12>
 800b898:	b30e      	cbz	r6, 800b8de <__multadd+0x7e>
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	42ab      	cmp	r3, r5
 800b89e:	dc19      	bgt.n	800b8d4 <__multadd+0x74>
 800b8a0:	6861      	ldr	r1, [r4, #4]
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	3101      	adds	r1, #1
 800b8a6:	f7ff ff79 	bl	800b79c <_Balloc>
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	b928      	cbnz	r0, 800b8ba <__multadd+0x5a>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	21ba      	movs	r1, #186	@ 0xba
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e4 <__multadd+0x84>)
 800b8b4:	480c      	ldr	r0, [pc, #48]	@ (800b8e8 <__multadd+0x88>)
 800b8b6:	f001 fe0d 	bl	800d4d4 <__assert_func>
 800b8ba:	6922      	ldr	r2, [r4, #16]
 800b8bc:	f104 010c 	add.w	r1, r4, #12
 800b8c0:	3202      	adds	r2, #2
 800b8c2:	0092      	lsls	r2, r2, #2
 800b8c4:	300c      	adds	r0, #12
 800b8c6:	f7ff f806 	bl	800a8d6 <memcpy>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f7ff ffa5 	bl	800b81c <_Bfree>
 800b8d2:	4644      	mov	r4, r8
 800b8d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8d8:	3501      	adds	r5, #1
 800b8da:	615e      	str	r6, [r3, #20]
 800b8dc:	6125      	str	r5, [r4, #16]
 800b8de:	4620      	mov	r0, r4
 800b8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e4:	0800e15c 	.word	0x0800e15c
 800b8e8:	0800e16d 	.word	0x0800e16d

0800b8ec <__s2b>:
 800b8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f0:	4615      	mov	r5, r2
 800b8f2:	2209      	movs	r2, #9
 800b8f4:	461f      	mov	r7, r3
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8fe:	4606      	mov	r6, r0
 800b900:	2201      	movs	r2, #1
 800b902:	2100      	movs	r1, #0
 800b904:	429a      	cmp	r2, r3
 800b906:	db09      	blt.n	800b91c <__s2b+0x30>
 800b908:	4630      	mov	r0, r6
 800b90a:	f7ff ff47 	bl	800b79c <_Balloc>
 800b90e:	b940      	cbnz	r0, 800b922 <__s2b+0x36>
 800b910:	4602      	mov	r2, r0
 800b912:	21d3      	movs	r1, #211	@ 0xd3
 800b914:	4b18      	ldr	r3, [pc, #96]	@ (800b978 <__s2b+0x8c>)
 800b916:	4819      	ldr	r0, [pc, #100]	@ (800b97c <__s2b+0x90>)
 800b918:	f001 fddc 	bl	800d4d4 <__assert_func>
 800b91c:	0052      	lsls	r2, r2, #1
 800b91e:	3101      	adds	r1, #1
 800b920:	e7f0      	b.n	800b904 <__s2b+0x18>
 800b922:	9b08      	ldr	r3, [sp, #32]
 800b924:	2d09      	cmp	r5, #9
 800b926:	6143      	str	r3, [r0, #20]
 800b928:	f04f 0301 	mov.w	r3, #1
 800b92c:	6103      	str	r3, [r0, #16]
 800b92e:	dd16      	ble.n	800b95e <__s2b+0x72>
 800b930:	f104 0909 	add.w	r9, r4, #9
 800b934:	46c8      	mov	r8, r9
 800b936:	442c      	add	r4, r5
 800b938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b93c:	4601      	mov	r1, r0
 800b93e:	220a      	movs	r2, #10
 800b940:	4630      	mov	r0, r6
 800b942:	3b30      	subs	r3, #48	@ 0x30
 800b944:	f7ff ff8c 	bl	800b860 <__multadd>
 800b948:	45a0      	cmp	r8, r4
 800b94a:	d1f5      	bne.n	800b938 <__s2b+0x4c>
 800b94c:	f1a5 0408 	sub.w	r4, r5, #8
 800b950:	444c      	add	r4, r9
 800b952:	1b2d      	subs	r5, r5, r4
 800b954:	1963      	adds	r3, r4, r5
 800b956:	42bb      	cmp	r3, r7
 800b958:	db04      	blt.n	800b964 <__s2b+0x78>
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	2509      	movs	r5, #9
 800b960:	340a      	adds	r4, #10
 800b962:	e7f6      	b.n	800b952 <__s2b+0x66>
 800b964:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b968:	4601      	mov	r1, r0
 800b96a:	220a      	movs	r2, #10
 800b96c:	4630      	mov	r0, r6
 800b96e:	3b30      	subs	r3, #48	@ 0x30
 800b970:	f7ff ff76 	bl	800b860 <__multadd>
 800b974:	e7ee      	b.n	800b954 <__s2b+0x68>
 800b976:	bf00      	nop
 800b978:	0800e15c 	.word	0x0800e15c
 800b97c:	0800e16d 	.word	0x0800e16d

0800b980 <__hi0bits>:
 800b980:	4603      	mov	r3, r0
 800b982:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b986:	bf3a      	itte	cc
 800b988:	0403      	lslcc	r3, r0, #16
 800b98a:	2010      	movcc	r0, #16
 800b98c:	2000      	movcs	r0, #0
 800b98e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b992:	bf3c      	itt	cc
 800b994:	021b      	lslcc	r3, r3, #8
 800b996:	3008      	addcc	r0, #8
 800b998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b99c:	bf3c      	itt	cc
 800b99e:	011b      	lslcc	r3, r3, #4
 800b9a0:	3004      	addcc	r0, #4
 800b9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a6:	bf3c      	itt	cc
 800b9a8:	009b      	lslcc	r3, r3, #2
 800b9aa:	3002      	addcc	r0, #2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	db05      	blt.n	800b9bc <__hi0bits+0x3c>
 800b9b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9b4:	f100 0001 	add.w	r0, r0, #1
 800b9b8:	bf08      	it	eq
 800b9ba:	2020      	moveq	r0, #32
 800b9bc:	4770      	bx	lr

0800b9be <__lo0bits>:
 800b9be:	6803      	ldr	r3, [r0, #0]
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	f013 0007 	ands.w	r0, r3, #7
 800b9c6:	d00b      	beq.n	800b9e0 <__lo0bits+0x22>
 800b9c8:	07d9      	lsls	r1, r3, #31
 800b9ca:	d421      	bmi.n	800ba10 <__lo0bits+0x52>
 800b9cc:	0798      	lsls	r0, r3, #30
 800b9ce:	bf49      	itett	mi
 800b9d0:	085b      	lsrmi	r3, r3, #1
 800b9d2:	089b      	lsrpl	r3, r3, #2
 800b9d4:	2001      	movmi	r0, #1
 800b9d6:	6013      	strmi	r3, [r2, #0]
 800b9d8:	bf5c      	itt	pl
 800b9da:	2002      	movpl	r0, #2
 800b9dc:	6013      	strpl	r3, [r2, #0]
 800b9de:	4770      	bx	lr
 800b9e0:	b299      	uxth	r1, r3
 800b9e2:	b909      	cbnz	r1, 800b9e8 <__lo0bits+0x2a>
 800b9e4:	2010      	movs	r0, #16
 800b9e6:	0c1b      	lsrs	r3, r3, #16
 800b9e8:	b2d9      	uxtb	r1, r3
 800b9ea:	b909      	cbnz	r1, 800b9f0 <__lo0bits+0x32>
 800b9ec:	3008      	adds	r0, #8
 800b9ee:	0a1b      	lsrs	r3, r3, #8
 800b9f0:	0719      	lsls	r1, r3, #28
 800b9f2:	bf04      	itt	eq
 800b9f4:	091b      	lsreq	r3, r3, #4
 800b9f6:	3004      	addeq	r0, #4
 800b9f8:	0799      	lsls	r1, r3, #30
 800b9fa:	bf04      	itt	eq
 800b9fc:	089b      	lsreq	r3, r3, #2
 800b9fe:	3002      	addeq	r0, #2
 800ba00:	07d9      	lsls	r1, r3, #31
 800ba02:	d403      	bmi.n	800ba0c <__lo0bits+0x4e>
 800ba04:	085b      	lsrs	r3, r3, #1
 800ba06:	f100 0001 	add.w	r0, r0, #1
 800ba0a:	d003      	beq.n	800ba14 <__lo0bits+0x56>
 800ba0c:	6013      	str	r3, [r2, #0]
 800ba0e:	4770      	bx	lr
 800ba10:	2000      	movs	r0, #0
 800ba12:	4770      	bx	lr
 800ba14:	2020      	movs	r0, #32
 800ba16:	4770      	bx	lr

0800ba18 <__i2b>:
 800ba18:	b510      	push	{r4, lr}
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	f7ff febd 	bl	800b79c <_Balloc>
 800ba22:	4602      	mov	r2, r0
 800ba24:	b928      	cbnz	r0, 800ba32 <__i2b+0x1a>
 800ba26:	f240 1145 	movw	r1, #325	@ 0x145
 800ba2a:	4b04      	ldr	r3, [pc, #16]	@ (800ba3c <__i2b+0x24>)
 800ba2c:	4804      	ldr	r0, [pc, #16]	@ (800ba40 <__i2b+0x28>)
 800ba2e:	f001 fd51 	bl	800d4d4 <__assert_func>
 800ba32:	2301      	movs	r3, #1
 800ba34:	6144      	str	r4, [r0, #20]
 800ba36:	6103      	str	r3, [r0, #16]
 800ba38:	bd10      	pop	{r4, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0800e15c 	.word	0x0800e15c
 800ba40:	0800e16d 	.word	0x0800e16d

0800ba44 <__multiply>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	4614      	mov	r4, r2
 800ba4a:	690a      	ldr	r2, [r1, #16]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	460f      	mov	r7, r1
 800ba50:	429a      	cmp	r2, r3
 800ba52:	bfa2      	ittt	ge
 800ba54:	4623      	movge	r3, r4
 800ba56:	460c      	movge	r4, r1
 800ba58:	461f      	movge	r7, r3
 800ba5a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	6861      	ldr	r1, [r4, #4]
 800ba66:	eb0a 0609 	add.w	r6, sl, r9
 800ba6a:	42b3      	cmp	r3, r6
 800ba6c:	b085      	sub	sp, #20
 800ba6e:	bfb8      	it	lt
 800ba70:	3101      	addlt	r1, #1
 800ba72:	f7ff fe93 	bl	800b79c <_Balloc>
 800ba76:	b930      	cbnz	r0, 800ba86 <__multiply+0x42>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba7e:	4b43      	ldr	r3, [pc, #268]	@ (800bb8c <__multiply+0x148>)
 800ba80:	4843      	ldr	r0, [pc, #268]	@ (800bb90 <__multiply+0x14c>)
 800ba82:	f001 fd27 	bl	800d4d4 <__assert_func>
 800ba86:	f100 0514 	add.w	r5, r0, #20
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba92:	4543      	cmp	r3, r8
 800ba94:	d321      	bcc.n	800bada <__multiply+0x96>
 800ba96:	f107 0114 	add.w	r1, r7, #20
 800ba9a:	f104 0214 	add.w	r2, r4, #20
 800ba9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800baa2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	1b13      	subs	r3, r2, r4
 800baaa:	3b15      	subs	r3, #21
 800baac:	f023 0303 	bic.w	r3, r3, #3
 800bab0:	3304      	adds	r3, #4
 800bab2:	f104 0715 	add.w	r7, r4, #21
 800bab6:	42ba      	cmp	r2, r7
 800bab8:	bf38      	it	cc
 800baba:	2304      	movcc	r3, #4
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	9b02      	ldr	r3, [sp, #8]
 800bac0:	9103      	str	r1, [sp, #12]
 800bac2:	428b      	cmp	r3, r1
 800bac4:	d80c      	bhi.n	800bae0 <__multiply+0x9c>
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	dd03      	ble.n	800bad2 <__multiply+0x8e>
 800baca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d05a      	beq.n	800bb88 <__multiply+0x144>
 800bad2:	6106      	str	r6, [r0, #16]
 800bad4:	b005      	add	sp, #20
 800bad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bada:	f843 2b04 	str.w	r2, [r3], #4
 800bade:	e7d8      	b.n	800ba92 <__multiply+0x4e>
 800bae0:	f8b1 a000 	ldrh.w	sl, [r1]
 800bae4:	f1ba 0f00 	cmp.w	sl, #0
 800bae8:	d023      	beq.n	800bb32 <__multiply+0xee>
 800baea:	46a9      	mov	r9, r5
 800baec:	f04f 0c00 	mov.w	ip, #0
 800baf0:	f104 0e14 	add.w	lr, r4, #20
 800baf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800baf8:	f8d9 3000 	ldr.w	r3, [r9]
 800bafc:	fa1f fb87 	uxth.w	fp, r7
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb06:	4463      	add	r3, ip
 800bb08:	f8d9 c000 	ldr.w	ip, [r9]
 800bb0c:	0c3f      	lsrs	r7, r7, #16
 800bb0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bb12:	fb0a c707 	mla	r7, sl, r7, ip
 800bb16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb20:	4572      	cmp	r2, lr
 800bb22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb26:	f849 3b04 	str.w	r3, [r9], #4
 800bb2a:	d8e3      	bhi.n	800baf4 <__multiply+0xb0>
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	f845 c003 	str.w	ip, [r5, r3]
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	3104      	adds	r1, #4
 800bb36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb3a:	f1b9 0f00 	cmp.w	r9, #0
 800bb3e:	d021      	beq.n	800bb84 <__multiply+0x140>
 800bb40:	46ae      	mov	lr, r5
 800bb42:	f04f 0a00 	mov.w	sl, #0
 800bb46:	682b      	ldr	r3, [r5, #0]
 800bb48:	f104 0c14 	add.w	ip, r4, #20
 800bb4c:	f8bc b000 	ldrh.w	fp, [ip]
 800bb50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	fb09 770b 	mla	r7, r9, fp, r7
 800bb5a:	4457      	add	r7, sl
 800bb5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb60:	f84e 3b04 	str.w	r3, [lr], #4
 800bb64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb6c:	f8be 3000 	ldrh.w	r3, [lr]
 800bb70:	4562      	cmp	r2, ip
 800bb72:	fb09 330a 	mla	r3, r9, sl, r3
 800bb76:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb7e:	d8e5      	bhi.n	800bb4c <__multiply+0x108>
 800bb80:	9f01      	ldr	r7, [sp, #4]
 800bb82:	51eb      	str	r3, [r5, r7]
 800bb84:	3504      	adds	r5, #4
 800bb86:	e79a      	b.n	800babe <__multiply+0x7a>
 800bb88:	3e01      	subs	r6, #1
 800bb8a:	e79c      	b.n	800bac6 <__multiply+0x82>
 800bb8c:	0800e15c 	.word	0x0800e15c
 800bb90:	0800e16d 	.word	0x0800e16d

0800bb94 <__pow5mult>:
 800bb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb98:	4615      	mov	r5, r2
 800bb9a:	f012 0203 	ands.w	r2, r2, #3
 800bb9e:	4607      	mov	r7, r0
 800bba0:	460e      	mov	r6, r1
 800bba2:	d007      	beq.n	800bbb4 <__pow5mult+0x20>
 800bba4:	4c25      	ldr	r4, [pc, #148]	@ (800bc3c <__pow5mult+0xa8>)
 800bba6:	3a01      	subs	r2, #1
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbae:	f7ff fe57 	bl	800b860 <__multadd>
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	10ad      	asrs	r5, r5, #2
 800bbb6:	d03d      	beq.n	800bc34 <__pow5mult+0xa0>
 800bbb8:	69fc      	ldr	r4, [r7, #28]
 800bbba:	b97c      	cbnz	r4, 800bbdc <__pow5mult+0x48>
 800bbbc:	2010      	movs	r0, #16
 800bbbe:	f7ff fd37 	bl	800b630 <malloc>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	61f8      	str	r0, [r7, #28]
 800bbc6:	b928      	cbnz	r0, 800bbd4 <__pow5mult+0x40>
 800bbc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbcc:	4b1c      	ldr	r3, [pc, #112]	@ (800bc40 <__pow5mult+0xac>)
 800bbce:	481d      	ldr	r0, [pc, #116]	@ (800bc44 <__pow5mult+0xb0>)
 800bbd0:	f001 fc80 	bl	800d4d4 <__assert_func>
 800bbd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbd8:	6004      	str	r4, [r0, #0]
 800bbda:	60c4      	str	r4, [r0, #12]
 800bbdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbe4:	b94c      	cbnz	r4, 800bbfa <__pow5mult+0x66>
 800bbe6:	f240 2171 	movw	r1, #625	@ 0x271
 800bbea:	4638      	mov	r0, r7
 800bbec:	f7ff ff14 	bl	800ba18 <__i2b>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	f04f 0900 	mov.w	r9, #0
 800bbfe:	07eb      	lsls	r3, r5, #31
 800bc00:	d50a      	bpl.n	800bc18 <__pow5mult+0x84>
 800bc02:	4631      	mov	r1, r6
 800bc04:	4622      	mov	r2, r4
 800bc06:	4638      	mov	r0, r7
 800bc08:	f7ff ff1c 	bl	800ba44 <__multiply>
 800bc0c:	4680      	mov	r8, r0
 800bc0e:	4631      	mov	r1, r6
 800bc10:	4638      	mov	r0, r7
 800bc12:	f7ff fe03 	bl	800b81c <_Bfree>
 800bc16:	4646      	mov	r6, r8
 800bc18:	106d      	asrs	r5, r5, #1
 800bc1a:	d00b      	beq.n	800bc34 <__pow5mult+0xa0>
 800bc1c:	6820      	ldr	r0, [r4, #0]
 800bc1e:	b938      	cbnz	r0, 800bc30 <__pow5mult+0x9c>
 800bc20:	4622      	mov	r2, r4
 800bc22:	4621      	mov	r1, r4
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff ff0d 	bl	800ba44 <__multiply>
 800bc2a:	6020      	str	r0, [r4, #0]
 800bc2c:	f8c0 9000 	str.w	r9, [r0]
 800bc30:	4604      	mov	r4, r0
 800bc32:	e7e4      	b.n	800bbfe <__pow5mult+0x6a>
 800bc34:	4630      	mov	r0, r6
 800bc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	bf00      	nop
 800bc3c:	0800e1c8 	.word	0x0800e1c8
 800bc40:	0800e0ed 	.word	0x0800e0ed
 800bc44:	0800e16d 	.word	0x0800e16d

0800bc48 <__lshift>:
 800bc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	4607      	mov	r7, r0
 800bc50:	4691      	mov	r9, r2
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	6849      	ldr	r1, [r1, #4]
 800bc56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc5a:	68a3      	ldr	r3, [r4, #8]
 800bc5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc60:	f108 0601 	add.w	r6, r8, #1
 800bc64:	42b3      	cmp	r3, r6
 800bc66:	db0b      	blt.n	800bc80 <__lshift+0x38>
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff fd97 	bl	800b79c <_Balloc>
 800bc6e:	4605      	mov	r5, r0
 800bc70:	b948      	cbnz	r0, 800bc86 <__lshift+0x3e>
 800bc72:	4602      	mov	r2, r0
 800bc74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc78:	4b27      	ldr	r3, [pc, #156]	@ (800bd18 <__lshift+0xd0>)
 800bc7a:	4828      	ldr	r0, [pc, #160]	@ (800bd1c <__lshift+0xd4>)
 800bc7c:	f001 fc2a 	bl	800d4d4 <__assert_func>
 800bc80:	3101      	adds	r1, #1
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	e7ee      	b.n	800bc64 <__lshift+0x1c>
 800bc86:	2300      	movs	r3, #0
 800bc88:	f100 0114 	add.w	r1, r0, #20
 800bc8c:	f100 0210 	add.w	r2, r0, #16
 800bc90:	4618      	mov	r0, r3
 800bc92:	4553      	cmp	r3, sl
 800bc94:	db33      	blt.n	800bcfe <__lshift+0xb6>
 800bc96:	6920      	ldr	r0, [r4, #16]
 800bc98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc9c:	f104 0314 	add.w	r3, r4, #20
 800bca0:	f019 091f 	ands.w	r9, r9, #31
 800bca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcac:	d02b      	beq.n	800bd06 <__lshift+0xbe>
 800bcae:	468a      	mov	sl, r1
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f1c9 0e20 	rsb	lr, r9, #32
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	fa00 f009 	lsl.w	r0, r0, r9
 800bcbc:	4310      	orrs	r0, r2
 800bcbe:	f84a 0b04 	str.w	r0, [sl], #4
 800bcc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc6:	459c      	cmp	ip, r3
 800bcc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bccc:	d8f3      	bhi.n	800bcb6 <__lshift+0x6e>
 800bcce:	ebac 0304 	sub.w	r3, ip, r4
 800bcd2:	3b15      	subs	r3, #21
 800bcd4:	f023 0303 	bic.w	r3, r3, #3
 800bcd8:	3304      	adds	r3, #4
 800bcda:	f104 0015 	add.w	r0, r4, #21
 800bcde:	4584      	cmp	ip, r0
 800bce0:	bf38      	it	cc
 800bce2:	2304      	movcc	r3, #4
 800bce4:	50ca      	str	r2, [r1, r3]
 800bce6:	b10a      	cbz	r2, 800bcec <__lshift+0xa4>
 800bce8:	f108 0602 	add.w	r6, r8, #2
 800bcec:	3e01      	subs	r6, #1
 800bcee:	4638      	mov	r0, r7
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	612e      	str	r6, [r5, #16]
 800bcf4:	f7ff fd92 	bl	800b81c <_Bfree>
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd02:	3301      	adds	r3, #1
 800bd04:	e7c5      	b.n	800bc92 <__lshift+0x4a>
 800bd06:	3904      	subs	r1, #4
 800bd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd0c:	459c      	cmp	ip, r3
 800bd0e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd12:	d8f9      	bhi.n	800bd08 <__lshift+0xc0>
 800bd14:	e7ea      	b.n	800bcec <__lshift+0xa4>
 800bd16:	bf00      	nop
 800bd18:	0800e15c 	.word	0x0800e15c
 800bd1c:	0800e16d 	.word	0x0800e16d

0800bd20 <__mcmp>:
 800bd20:	4603      	mov	r3, r0
 800bd22:	690a      	ldr	r2, [r1, #16]
 800bd24:	6900      	ldr	r0, [r0, #16]
 800bd26:	b530      	push	{r4, r5, lr}
 800bd28:	1a80      	subs	r0, r0, r2
 800bd2a:	d10e      	bne.n	800bd4a <__mcmp+0x2a>
 800bd2c:	3314      	adds	r3, #20
 800bd2e:	3114      	adds	r1, #20
 800bd30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd40:	4295      	cmp	r5, r2
 800bd42:	d003      	beq.n	800bd4c <__mcmp+0x2c>
 800bd44:	d205      	bcs.n	800bd52 <__mcmp+0x32>
 800bd46:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4a:	bd30      	pop	{r4, r5, pc}
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	d3f3      	bcc.n	800bd38 <__mcmp+0x18>
 800bd50:	e7fb      	b.n	800bd4a <__mcmp+0x2a>
 800bd52:	2001      	movs	r0, #1
 800bd54:	e7f9      	b.n	800bd4a <__mcmp+0x2a>
	...

0800bd58 <__mdiff>:
 800bd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	4689      	mov	r9, r1
 800bd5e:	4606      	mov	r6, r0
 800bd60:	4611      	mov	r1, r2
 800bd62:	4648      	mov	r0, r9
 800bd64:	4614      	mov	r4, r2
 800bd66:	f7ff ffdb 	bl	800bd20 <__mcmp>
 800bd6a:	1e05      	subs	r5, r0, #0
 800bd6c:	d112      	bne.n	800bd94 <__mdiff+0x3c>
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff fd13 	bl	800b79c <_Balloc>
 800bd76:	4602      	mov	r2, r0
 800bd78:	b928      	cbnz	r0, 800bd86 <__mdiff+0x2e>
 800bd7a:	f240 2137 	movw	r1, #567	@ 0x237
 800bd7e:	4b3e      	ldr	r3, [pc, #248]	@ (800be78 <__mdiff+0x120>)
 800bd80:	483e      	ldr	r0, [pc, #248]	@ (800be7c <__mdiff+0x124>)
 800bd82:	f001 fba7 	bl	800d4d4 <__assert_func>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	b003      	add	sp, #12
 800bd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd94:	bfbc      	itt	lt
 800bd96:	464b      	movlt	r3, r9
 800bd98:	46a1      	movlt	r9, r4
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bda0:	bfba      	itte	lt
 800bda2:	461c      	movlt	r4, r3
 800bda4:	2501      	movlt	r5, #1
 800bda6:	2500      	movge	r5, #0
 800bda8:	f7ff fcf8 	bl	800b79c <_Balloc>
 800bdac:	4602      	mov	r2, r0
 800bdae:	b918      	cbnz	r0, 800bdb8 <__mdiff+0x60>
 800bdb0:	f240 2145 	movw	r1, #581	@ 0x245
 800bdb4:	4b30      	ldr	r3, [pc, #192]	@ (800be78 <__mdiff+0x120>)
 800bdb6:	e7e3      	b.n	800bd80 <__mdiff+0x28>
 800bdb8:	f100 0b14 	add.w	fp, r0, #20
 800bdbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdc0:	f109 0310 	add.w	r3, r9, #16
 800bdc4:	60c5      	str	r5, [r0, #12]
 800bdc6:	f04f 0c00 	mov.w	ip, #0
 800bdca:	f109 0514 	add.w	r5, r9, #20
 800bdce:	46d9      	mov	r9, fp
 800bdd0:	6926      	ldr	r6, [r4, #16]
 800bdd2:	f104 0e14 	add.w	lr, r4, #20
 800bdd6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bdda:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bde6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdea:	b281      	uxth	r1, r0
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	fa1f f38a 	uxth.w	r3, sl
 800bdf2:	1a5b      	subs	r3, r3, r1
 800bdf4:	0c00      	lsrs	r0, r0, #16
 800bdf6:	4463      	add	r3, ip
 800bdf8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdfc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be00:	b29b      	uxth	r3, r3
 800be02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be06:	4576      	cmp	r6, lr
 800be08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be0c:	f849 3b04 	str.w	r3, [r9], #4
 800be10:	d8e6      	bhi.n	800bde0 <__mdiff+0x88>
 800be12:	1b33      	subs	r3, r6, r4
 800be14:	3b15      	subs	r3, #21
 800be16:	f023 0303 	bic.w	r3, r3, #3
 800be1a:	3415      	adds	r4, #21
 800be1c:	3304      	adds	r3, #4
 800be1e:	42a6      	cmp	r6, r4
 800be20:	bf38      	it	cc
 800be22:	2304      	movcc	r3, #4
 800be24:	441d      	add	r5, r3
 800be26:	445b      	add	r3, fp
 800be28:	461e      	mov	r6, r3
 800be2a:	462c      	mov	r4, r5
 800be2c:	4544      	cmp	r4, r8
 800be2e:	d30e      	bcc.n	800be4e <__mdiff+0xf6>
 800be30:	f108 0103 	add.w	r1, r8, #3
 800be34:	1b49      	subs	r1, r1, r5
 800be36:	f021 0103 	bic.w	r1, r1, #3
 800be3a:	3d03      	subs	r5, #3
 800be3c:	45a8      	cmp	r8, r5
 800be3e:	bf38      	it	cc
 800be40:	2100      	movcc	r1, #0
 800be42:	440b      	add	r3, r1
 800be44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be48:	b199      	cbz	r1, 800be72 <__mdiff+0x11a>
 800be4a:	6117      	str	r7, [r2, #16]
 800be4c:	e79e      	b.n	800bd8c <__mdiff+0x34>
 800be4e:	46e6      	mov	lr, ip
 800be50:	f854 1b04 	ldr.w	r1, [r4], #4
 800be54:	fa1f fc81 	uxth.w	ip, r1
 800be58:	44f4      	add	ip, lr
 800be5a:	0c08      	lsrs	r0, r1, #16
 800be5c:	4471      	add	r1, lr
 800be5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be62:	b289      	uxth	r1, r1
 800be64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be6c:	f846 1b04 	str.w	r1, [r6], #4
 800be70:	e7dc      	b.n	800be2c <__mdiff+0xd4>
 800be72:	3f01      	subs	r7, #1
 800be74:	e7e6      	b.n	800be44 <__mdiff+0xec>
 800be76:	bf00      	nop
 800be78:	0800e15c 	.word	0x0800e15c
 800be7c:	0800e16d 	.word	0x0800e16d

0800be80 <__ulp>:
 800be80:	4b0e      	ldr	r3, [pc, #56]	@ (800bebc <__ulp+0x3c>)
 800be82:	400b      	ands	r3, r1
 800be84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dc08      	bgt.n	800be9e <__ulp+0x1e>
 800be8c:	425b      	negs	r3, r3
 800be8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be96:	da04      	bge.n	800bea2 <__ulp+0x22>
 800be98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be9c:	4113      	asrs	r3, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	e008      	b.n	800beb4 <__ulp+0x34>
 800bea2:	f1a2 0314 	sub.w	r3, r2, #20
 800bea6:	2b1e      	cmp	r3, #30
 800bea8:	bfd6      	itet	le
 800beaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800beae:	2201      	movgt	r2, #1
 800beb0:	40da      	lsrle	r2, r3
 800beb2:	2300      	movs	r3, #0
 800beb4:	4619      	mov	r1, r3
 800beb6:	4610      	mov	r0, r2
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	7ff00000 	.word	0x7ff00000

0800bec0 <__b2d>:
 800bec0:	6902      	ldr	r2, [r0, #16]
 800bec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec4:	f100 0614 	add.w	r6, r0, #20
 800bec8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800becc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bed0:	4f1e      	ldr	r7, [pc, #120]	@ (800bf4c <__b2d+0x8c>)
 800bed2:	4620      	mov	r0, r4
 800bed4:	f7ff fd54 	bl	800b980 <__hi0bits>
 800bed8:	4603      	mov	r3, r0
 800beda:	f1c0 0020 	rsb	r0, r0, #32
 800bede:	2b0a      	cmp	r3, #10
 800bee0:	f1a2 0504 	sub.w	r5, r2, #4
 800bee4:	6008      	str	r0, [r1, #0]
 800bee6:	dc12      	bgt.n	800bf0e <__b2d+0x4e>
 800bee8:	42ae      	cmp	r6, r5
 800beea:	bf2c      	ite	cs
 800beec:	2200      	movcs	r2, #0
 800beee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bef2:	f1c3 0c0b 	rsb	ip, r3, #11
 800bef6:	3315      	adds	r3, #21
 800bef8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800befc:	fa04 f303 	lsl.w	r3, r4, r3
 800bf00:	fa22 f20c 	lsr.w	r2, r2, ip
 800bf04:	ea4e 0107 	orr.w	r1, lr, r7
 800bf08:	431a      	orrs	r2, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf0e:	42ae      	cmp	r6, r5
 800bf10:	bf36      	itet	cc
 800bf12:	f1a2 0508 	subcc.w	r5, r2, #8
 800bf16:	2200      	movcs	r2, #0
 800bf18:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bf1c:	3b0b      	subs	r3, #11
 800bf1e:	d012      	beq.n	800bf46 <__b2d+0x86>
 800bf20:	f1c3 0720 	rsb	r7, r3, #32
 800bf24:	fa22 f107 	lsr.w	r1, r2, r7
 800bf28:	409c      	lsls	r4, r3
 800bf2a:	430c      	orrs	r4, r1
 800bf2c:	42b5      	cmp	r5, r6
 800bf2e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800bf32:	bf94      	ite	ls
 800bf34:	2400      	movls	r4, #0
 800bf36:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800bf3a:	409a      	lsls	r2, r3
 800bf3c:	40fc      	lsrs	r4, r7
 800bf3e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bf42:	4322      	orrs	r2, r4
 800bf44:	e7e1      	b.n	800bf0a <__b2d+0x4a>
 800bf46:	ea44 0107 	orr.w	r1, r4, r7
 800bf4a:	e7de      	b.n	800bf0a <__b2d+0x4a>
 800bf4c:	3ff00000 	.word	0x3ff00000

0800bf50 <__d2b>:
 800bf50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bf54:	2101      	movs	r1, #1
 800bf56:	4690      	mov	r8, r2
 800bf58:	4699      	mov	r9, r3
 800bf5a:	9e08      	ldr	r6, [sp, #32]
 800bf5c:	f7ff fc1e 	bl	800b79c <_Balloc>
 800bf60:	4604      	mov	r4, r0
 800bf62:	b930      	cbnz	r0, 800bf72 <__d2b+0x22>
 800bf64:	4602      	mov	r2, r0
 800bf66:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf6a:	4b23      	ldr	r3, [pc, #140]	@ (800bff8 <__d2b+0xa8>)
 800bf6c:	4823      	ldr	r0, [pc, #140]	@ (800bffc <__d2b+0xac>)
 800bf6e:	f001 fab1 	bl	800d4d4 <__assert_func>
 800bf72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf7a:	b10d      	cbz	r5, 800bf80 <__d2b+0x30>
 800bf7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	f1b8 0300 	subs.w	r3, r8, #0
 800bf86:	d024      	beq.n	800bfd2 <__d2b+0x82>
 800bf88:	4668      	mov	r0, sp
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	f7ff fd17 	bl	800b9be <__lo0bits>
 800bf90:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf94:	b1d8      	cbz	r0, 800bfce <__d2b+0x7e>
 800bf96:	f1c0 0320 	rsb	r3, r0, #32
 800bf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	40c2      	lsrs	r2, r0
 800bfa2:	6163      	str	r3, [r4, #20]
 800bfa4:	9201      	str	r2, [sp, #4]
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	bf0c      	ite	eq
 800bfac:	2201      	moveq	r2, #1
 800bfae:	2202      	movne	r2, #2
 800bfb0:	61a3      	str	r3, [r4, #24]
 800bfb2:	6122      	str	r2, [r4, #16]
 800bfb4:	b1ad      	cbz	r5, 800bfe2 <__d2b+0x92>
 800bfb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bfba:	4405      	add	r5, r0
 800bfbc:	6035      	str	r5, [r6, #0]
 800bfbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bfc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfc4:	6018      	str	r0, [r3, #0]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	b002      	add	sp, #8
 800bfca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bfce:	6161      	str	r1, [r4, #20]
 800bfd0:	e7e9      	b.n	800bfa6 <__d2b+0x56>
 800bfd2:	a801      	add	r0, sp, #4
 800bfd4:	f7ff fcf3 	bl	800b9be <__lo0bits>
 800bfd8:	9b01      	ldr	r3, [sp, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	6163      	str	r3, [r4, #20]
 800bfde:	3020      	adds	r0, #32
 800bfe0:	e7e7      	b.n	800bfb2 <__d2b+0x62>
 800bfe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfea:	6030      	str	r0, [r6, #0]
 800bfec:	6918      	ldr	r0, [r3, #16]
 800bfee:	f7ff fcc7 	bl	800b980 <__hi0bits>
 800bff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bff6:	e7e4      	b.n	800bfc2 <__d2b+0x72>
 800bff8:	0800e15c 	.word	0x0800e15c
 800bffc:	0800e16d 	.word	0x0800e16d

0800c000 <__ratio>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	b085      	sub	sp, #20
 800c006:	e9cd 1000 	strd	r1, r0, [sp]
 800c00a:	a902      	add	r1, sp, #8
 800c00c:	f7ff ff58 	bl	800bec0 <__b2d>
 800c010:	468b      	mov	fp, r1
 800c012:	4606      	mov	r6, r0
 800c014:	460f      	mov	r7, r1
 800c016:	9800      	ldr	r0, [sp, #0]
 800c018:	a903      	add	r1, sp, #12
 800c01a:	f7ff ff51 	bl	800bec0 <__b2d>
 800c01e:	460d      	mov	r5, r1
 800c020:	9b01      	ldr	r3, [sp, #4]
 800c022:	4689      	mov	r9, r1
 800c024:	6919      	ldr	r1, [r3, #16]
 800c026:	9b00      	ldr	r3, [sp, #0]
 800c028:	4604      	mov	r4, r0
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	4630      	mov	r0, r6
 800c02e:	1ac9      	subs	r1, r1, r3
 800c030:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c034:	1a9b      	subs	r3, r3, r2
 800c036:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	bfcd      	iteet	gt
 800c03e:	463a      	movgt	r2, r7
 800c040:	462a      	movle	r2, r5
 800c042:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c046:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c04a:	bfd8      	it	le
 800c04c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c050:	464b      	mov	r3, r9
 800c052:	4622      	mov	r2, r4
 800c054:	4659      	mov	r1, fp
 800c056:	f7f4 fb69 	bl	800072c <__aeabi_ddiv>
 800c05a:	b005      	add	sp, #20
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c060 <__copybits>:
 800c060:	3901      	subs	r1, #1
 800c062:	b570      	push	{r4, r5, r6, lr}
 800c064:	1149      	asrs	r1, r1, #5
 800c066:	6914      	ldr	r4, [r2, #16]
 800c068:	3101      	adds	r1, #1
 800c06a:	f102 0314 	add.w	r3, r2, #20
 800c06e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c072:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c076:	1f05      	subs	r5, r0, #4
 800c078:	42a3      	cmp	r3, r4
 800c07a:	d30c      	bcc.n	800c096 <__copybits+0x36>
 800c07c:	1aa3      	subs	r3, r4, r2
 800c07e:	3b11      	subs	r3, #17
 800c080:	f023 0303 	bic.w	r3, r3, #3
 800c084:	3211      	adds	r2, #17
 800c086:	42a2      	cmp	r2, r4
 800c088:	bf88      	it	hi
 800c08a:	2300      	movhi	r3, #0
 800c08c:	4418      	add	r0, r3
 800c08e:	2300      	movs	r3, #0
 800c090:	4288      	cmp	r0, r1
 800c092:	d305      	bcc.n	800c0a0 <__copybits+0x40>
 800c094:	bd70      	pop	{r4, r5, r6, pc}
 800c096:	f853 6b04 	ldr.w	r6, [r3], #4
 800c09a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c09e:	e7eb      	b.n	800c078 <__copybits+0x18>
 800c0a0:	f840 3b04 	str.w	r3, [r0], #4
 800c0a4:	e7f4      	b.n	800c090 <__copybits+0x30>

0800c0a6 <__any_on>:
 800c0a6:	f100 0214 	add.w	r2, r0, #20
 800c0aa:	6900      	ldr	r0, [r0, #16]
 800c0ac:	114b      	asrs	r3, r1, #5
 800c0ae:	4298      	cmp	r0, r3
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	db11      	blt.n	800c0d8 <__any_on+0x32>
 800c0b4:	dd0a      	ble.n	800c0cc <__any_on+0x26>
 800c0b6:	f011 011f 	ands.w	r1, r1, #31
 800c0ba:	d007      	beq.n	800c0cc <__any_on+0x26>
 800c0bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0c0:	fa24 f001 	lsr.w	r0, r4, r1
 800c0c4:	fa00 f101 	lsl.w	r1, r0, r1
 800c0c8:	428c      	cmp	r4, r1
 800c0ca:	d10b      	bne.n	800c0e4 <__any_on+0x3e>
 800c0cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d803      	bhi.n	800c0dc <__any_on+0x36>
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	4603      	mov	r3, r0
 800c0da:	e7f7      	b.n	800c0cc <__any_on+0x26>
 800c0dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0e0:	2900      	cmp	r1, #0
 800c0e2:	d0f5      	beq.n	800c0d0 <__any_on+0x2a>
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	e7f6      	b.n	800c0d6 <__any_on+0x30>

0800c0e8 <sulp>:
 800c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	4690      	mov	r8, r2
 800c0f0:	f7ff fec6 	bl	800be80 <__ulp>
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	460d      	mov	r5, r1
 800c0f8:	f1b8 0f00 	cmp.w	r8, #0
 800c0fc:	d011      	beq.n	800c122 <sulp+0x3a>
 800c0fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c102:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c106:	2b00      	cmp	r3, #0
 800c108:	dd0b      	ble.n	800c122 <sulp+0x3a>
 800c10a:	2400      	movs	r4, #0
 800c10c:	051b      	lsls	r3, r3, #20
 800c10e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c112:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c116:	4622      	mov	r2, r4
 800c118:	462b      	mov	r3, r5
 800c11a:	f7f4 f9dd 	bl	80004d8 <__aeabi_dmul>
 800c11e:	4604      	mov	r4, r0
 800c120:	460d      	mov	r5, r1
 800c122:	4620      	mov	r0, r4
 800c124:	4629      	mov	r1, r5
 800c126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12a:	0000      	movs	r0, r0
 800c12c:	0000      	movs	r0, r0
	...

0800c130 <_strtod_l>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	b09f      	sub	sp, #124	@ 0x7c
 800c136:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c138:	2200      	movs	r2, #0
 800c13a:	460c      	mov	r4, r1
 800c13c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c13e:	f04f 0a00 	mov.w	sl, #0
 800c142:	f04f 0b00 	mov.w	fp, #0
 800c146:	460a      	mov	r2, r1
 800c148:	9005      	str	r0, [sp, #20]
 800c14a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c14c:	7811      	ldrb	r1, [r2, #0]
 800c14e:	292b      	cmp	r1, #43	@ 0x2b
 800c150:	d048      	beq.n	800c1e4 <_strtod_l+0xb4>
 800c152:	d836      	bhi.n	800c1c2 <_strtod_l+0x92>
 800c154:	290d      	cmp	r1, #13
 800c156:	d830      	bhi.n	800c1ba <_strtod_l+0x8a>
 800c158:	2908      	cmp	r1, #8
 800c15a:	d830      	bhi.n	800c1be <_strtod_l+0x8e>
 800c15c:	2900      	cmp	r1, #0
 800c15e:	d039      	beq.n	800c1d4 <_strtod_l+0xa4>
 800c160:	2200      	movs	r2, #0
 800c162:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c164:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c166:	782a      	ldrb	r2, [r5, #0]
 800c168:	2a30      	cmp	r2, #48	@ 0x30
 800c16a:	f040 80b1 	bne.w	800c2d0 <_strtod_l+0x1a0>
 800c16e:	786a      	ldrb	r2, [r5, #1]
 800c170:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c174:	2a58      	cmp	r2, #88	@ 0x58
 800c176:	d16c      	bne.n	800c252 <_strtod_l+0x122>
 800c178:	9302      	str	r3, [sp, #8]
 800c17a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c17c:	4a8e      	ldr	r2, [pc, #568]	@ (800c3b8 <_strtod_l+0x288>)
 800c17e:	9301      	str	r3, [sp, #4]
 800c180:	ab1a      	add	r3, sp, #104	@ 0x68
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	9805      	ldr	r0, [sp, #20]
 800c186:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c188:	a919      	add	r1, sp, #100	@ 0x64
 800c18a:	f001 fa3d 	bl	800d608 <__gethex>
 800c18e:	f010 060f 	ands.w	r6, r0, #15
 800c192:	4604      	mov	r4, r0
 800c194:	d005      	beq.n	800c1a2 <_strtod_l+0x72>
 800c196:	2e06      	cmp	r6, #6
 800c198:	d126      	bne.n	800c1e8 <_strtod_l+0xb8>
 800c19a:	2300      	movs	r3, #0
 800c19c:	3501      	adds	r5, #1
 800c19e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c1a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f040 8584 	bne.w	800ccb2 <_strtod_l+0xb82>
 800c1aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1ac:	b1bb      	cbz	r3, 800c1de <_strtod_l+0xae>
 800c1ae:	4650      	mov	r0, sl
 800c1b0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c1b4:	b01f      	add	sp, #124	@ 0x7c
 800c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ba:	2920      	cmp	r1, #32
 800c1bc:	d1d0      	bne.n	800c160 <_strtod_l+0x30>
 800c1be:	3201      	adds	r2, #1
 800c1c0:	e7c3      	b.n	800c14a <_strtod_l+0x1a>
 800c1c2:	292d      	cmp	r1, #45	@ 0x2d
 800c1c4:	d1cc      	bne.n	800c160 <_strtod_l+0x30>
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c1ca:	1c51      	adds	r1, r2, #1
 800c1cc:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1ce:	7852      	ldrb	r2, [r2, #1]
 800c1d0:	2a00      	cmp	r2, #0
 800c1d2:	d1c7      	bne.n	800c164 <_strtod_l+0x34>
 800c1d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1d6:	9419      	str	r4, [sp, #100]	@ 0x64
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f040 8568 	bne.w	800ccae <_strtod_l+0xb7e>
 800c1de:	4650      	mov	r0, sl
 800c1e0:	4659      	mov	r1, fp
 800c1e2:	e7e7      	b.n	800c1b4 <_strtod_l+0x84>
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	e7ef      	b.n	800c1c8 <_strtod_l+0x98>
 800c1e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1ea:	b13a      	cbz	r2, 800c1fc <_strtod_l+0xcc>
 800c1ec:	2135      	movs	r1, #53	@ 0x35
 800c1ee:	a81c      	add	r0, sp, #112	@ 0x70
 800c1f0:	f7ff ff36 	bl	800c060 <__copybits>
 800c1f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1f6:	9805      	ldr	r0, [sp, #20]
 800c1f8:	f7ff fb10 	bl	800b81c <_Bfree>
 800c1fc:	3e01      	subs	r6, #1
 800c1fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c200:	2e04      	cmp	r6, #4
 800c202:	d806      	bhi.n	800c212 <_strtod_l+0xe2>
 800c204:	e8df f006 	tbb	[pc, r6]
 800c208:	201d0314 	.word	0x201d0314
 800c20c:	14          	.byte	0x14
 800c20d:	00          	.byte	0x00
 800c20e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c212:	05e1      	lsls	r1, r4, #23
 800c214:	bf48      	it	mi
 800c216:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c21a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c21e:	0d1b      	lsrs	r3, r3, #20
 800c220:	051b      	lsls	r3, r3, #20
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1bd      	bne.n	800c1a2 <_strtod_l+0x72>
 800c226:	f7fe fb1b 	bl	800a860 <__errno>
 800c22a:	2322      	movs	r3, #34	@ 0x22
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	e7b8      	b.n	800c1a2 <_strtod_l+0x72>
 800c230:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c234:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c238:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c23c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c240:	e7e7      	b.n	800c212 <_strtod_l+0xe2>
 800c242:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800c3bc <_strtod_l+0x28c>
 800c246:	e7e4      	b.n	800c212 <_strtod_l+0xe2>
 800c248:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c24c:	f04f 3aff 	mov.w	sl, #4294967295
 800c250:	e7df      	b.n	800c212 <_strtod_l+0xe2>
 800c252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	9219      	str	r2, [sp, #100]	@ 0x64
 800c258:	785b      	ldrb	r3, [r3, #1]
 800c25a:	2b30      	cmp	r3, #48	@ 0x30
 800c25c:	d0f9      	beq.n	800c252 <_strtod_l+0x122>
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d09f      	beq.n	800c1a2 <_strtod_l+0x72>
 800c262:	2301      	movs	r3, #1
 800c264:	9309      	str	r3, [sp, #36]	@ 0x24
 800c266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c268:	220a      	movs	r2, #10
 800c26a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c26c:	2300      	movs	r3, #0
 800c26e:	461f      	mov	r7, r3
 800c270:	9308      	str	r3, [sp, #32]
 800c272:	930a      	str	r3, [sp, #40]	@ 0x28
 800c274:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c276:	7805      	ldrb	r5, [r0, #0]
 800c278:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c27c:	b2d9      	uxtb	r1, r3
 800c27e:	2909      	cmp	r1, #9
 800c280:	d928      	bls.n	800c2d4 <_strtod_l+0x1a4>
 800c282:	2201      	movs	r2, #1
 800c284:	494e      	ldr	r1, [pc, #312]	@ (800c3c0 <_strtod_l+0x290>)
 800c286:	f7fe fa39 	bl	800a6fc <strncmp>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d032      	beq.n	800c2f4 <_strtod_l+0x1c4>
 800c28e:	2000      	movs	r0, #0
 800c290:	462a      	mov	r2, r5
 800c292:	4681      	mov	r9, r0
 800c294:	463d      	mov	r5, r7
 800c296:	4603      	mov	r3, r0
 800c298:	2a65      	cmp	r2, #101	@ 0x65
 800c29a:	d001      	beq.n	800c2a0 <_strtod_l+0x170>
 800c29c:	2a45      	cmp	r2, #69	@ 0x45
 800c29e:	d114      	bne.n	800c2ca <_strtod_l+0x19a>
 800c2a0:	b91d      	cbnz	r5, 800c2aa <_strtod_l+0x17a>
 800c2a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2a4:	4302      	orrs	r2, r0
 800c2a6:	d095      	beq.n	800c1d4 <_strtod_l+0xa4>
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c2ac:	1c62      	adds	r2, r4, #1
 800c2ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2b0:	7862      	ldrb	r2, [r4, #1]
 800c2b2:	2a2b      	cmp	r2, #43	@ 0x2b
 800c2b4:	d077      	beq.n	800c3a6 <_strtod_l+0x276>
 800c2b6:	2a2d      	cmp	r2, #45	@ 0x2d
 800c2b8:	d07b      	beq.n	800c3b2 <_strtod_l+0x282>
 800c2ba:	f04f 0c00 	mov.w	ip, #0
 800c2be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c2c2:	2909      	cmp	r1, #9
 800c2c4:	f240 8082 	bls.w	800c3cc <_strtod_l+0x29c>
 800c2c8:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2ca:	f04f 0800 	mov.w	r8, #0
 800c2ce:	e0a2      	b.n	800c416 <_strtod_l+0x2e6>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e7c7      	b.n	800c264 <_strtod_l+0x134>
 800c2d4:	2f08      	cmp	r7, #8
 800c2d6:	bfd5      	itete	le
 800c2d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c2da:	9908      	ldrgt	r1, [sp, #32]
 800c2dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c2e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c2e4:	f100 0001 	add.w	r0, r0, #1
 800c2e8:	bfd4      	ite	le
 800c2ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c2ec:	9308      	strgt	r3, [sp, #32]
 800c2ee:	3701      	adds	r7, #1
 800c2f0:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2f2:	e7bf      	b.n	800c274 <_strtod_l+0x144>
 800c2f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2fa:	785a      	ldrb	r2, [r3, #1]
 800c2fc:	b37f      	cbz	r7, 800c35e <_strtod_l+0x22e>
 800c2fe:	4681      	mov	r9, r0
 800c300:	463d      	mov	r5, r7
 800c302:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c306:	2b09      	cmp	r3, #9
 800c308:	d912      	bls.n	800c330 <_strtod_l+0x200>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e7c4      	b.n	800c298 <_strtod_l+0x168>
 800c30e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c310:	3001      	adds	r0, #1
 800c312:	1c5a      	adds	r2, r3, #1
 800c314:	9219      	str	r2, [sp, #100]	@ 0x64
 800c316:	785a      	ldrb	r2, [r3, #1]
 800c318:	2a30      	cmp	r2, #48	@ 0x30
 800c31a:	d0f8      	beq.n	800c30e <_strtod_l+0x1de>
 800c31c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c320:	2b08      	cmp	r3, #8
 800c322:	f200 84cb 	bhi.w	800ccbc <_strtod_l+0xb8c>
 800c326:	4681      	mov	r9, r0
 800c328:	2000      	movs	r0, #0
 800c32a:	4605      	mov	r5, r0
 800c32c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c32e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c330:	3a30      	subs	r2, #48	@ 0x30
 800c332:	f100 0301 	add.w	r3, r0, #1
 800c336:	d02a      	beq.n	800c38e <_strtod_l+0x25e>
 800c338:	4499      	add	r9, r3
 800c33a:	210a      	movs	r1, #10
 800c33c:	462b      	mov	r3, r5
 800c33e:	eb00 0c05 	add.w	ip, r0, r5
 800c342:	4563      	cmp	r3, ip
 800c344:	d10d      	bne.n	800c362 <_strtod_l+0x232>
 800c346:	1c69      	adds	r1, r5, #1
 800c348:	4401      	add	r1, r0
 800c34a:	4428      	add	r0, r5
 800c34c:	2808      	cmp	r0, #8
 800c34e:	dc16      	bgt.n	800c37e <_strtod_l+0x24e>
 800c350:	230a      	movs	r3, #10
 800c352:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c354:	fb03 2300 	mla	r3, r3, r0, r2
 800c358:	930a      	str	r3, [sp, #40]	@ 0x28
 800c35a:	2300      	movs	r3, #0
 800c35c:	e018      	b.n	800c390 <_strtod_l+0x260>
 800c35e:	4638      	mov	r0, r7
 800c360:	e7da      	b.n	800c318 <_strtod_l+0x1e8>
 800c362:	2b08      	cmp	r3, #8
 800c364:	f103 0301 	add.w	r3, r3, #1
 800c368:	dc03      	bgt.n	800c372 <_strtod_l+0x242>
 800c36a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c36c:	434e      	muls	r6, r1
 800c36e:	960a      	str	r6, [sp, #40]	@ 0x28
 800c370:	e7e7      	b.n	800c342 <_strtod_l+0x212>
 800c372:	2b10      	cmp	r3, #16
 800c374:	bfde      	ittt	le
 800c376:	9e08      	ldrle	r6, [sp, #32]
 800c378:	434e      	mulle	r6, r1
 800c37a:	9608      	strle	r6, [sp, #32]
 800c37c:	e7e1      	b.n	800c342 <_strtod_l+0x212>
 800c37e:	280f      	cmp	r0, #15
 800c380:	dceb      	bgt.n	800c35a <_strtod_l+0x22a>
 800c382:	230a      	movs	r3, #10
 800c384:	9808      	ldr	r0, [sp, #32]
 800c386:	fb03 2300 	mla	r3, r3, r0, r2
 800c38a:	9308      	str	r3, [sp, #32]
 800c38c:	e7e5      	b.n	800c35a <_strtod_l+0x22a>
 800c38e:	4629      	mov	r1, r5
 800c390:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c392:	460d      	mov	r5, r1
 800c394:	1c50      	adds	r0, r2, #1
 800c396:	9019      	str	r0, [sp, #100]	@ 0x64
 800c398:	7852      	ldrb	r2, [r2, #1]
 800c39a:	4618      	mov	r0, r3
 800c39c:	e7b1      	b.n	800c302 <_strtod_l+0x1d2>
 800c39e:	f04f 0900 	mov.w	r9, #0
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e77d      	b.n	800c2a2 <_strtod_l+0x172>
 800c3a6:	f04f 0c00 	mov.w	ip, #0
 800c3aa:	1ca2      	adds	r2, r4, #2
 800c3ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3ae:	78a2      	ldrb	r2, [r4, #2]
 800c3b0:	e785      	b.n	800c2be <_strtod_l+0x18e>
 800c3b2:	f04f 0c01 	mov.w	ip, #1
 800c3b6:	e7f8      	b.n	800c3aa <_strtod_l+0x27a>
 800c3b8:	0800e2e0 	.word	0x0800e2e0
 800c3bc:	7ff00000 	.word	0x7ff00000
 800c3c0:	0800e2c8 	.word	0x0800e2c8
 800c3c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3c6:	1c51      	adds	r1, r2, #1
 800c3c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c3ca:	7852      	ldrb	r2, [r2, #1]
 800c3cc:	2a30      	cmp	r2, #48	@ 0x30
 800c3ce:	d0f9      	beq.n	800c3c4 <_strtod_l+0x294>
 800c3d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c3d4:	2908      	cmp	r1, #8
 800c3d6:	f63f af78 	bhi.w	800c2ca <_strtod_l+0x19a>
 800c3da:	f04f 080a 	mov.w	r8, #10
 800c3de:	3a30      	subs	r2, #48	@ 0x30
 800c3e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c3e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3e8:	1c56      	adds	r6, r2, #1
 800c3ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800c3ec:	7852      	ldrb	r2, [r2, #1]
 800c3ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c3f2:	f1be 0f09 	cmp.w	lr, #9
 800c3f6:	d939      	bls.n	800c46c <_strtod_l+0x33c>
 800c3f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c3fe:	1a76      	subs	r6, r6, r1
 800c400:	2e08      	cmp	r6, #8
 800c402:	dc03      	bgt.n	800c40c <_strtod_l+0x2dc>
 800c404:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c406:	4588      	cmp	r8, r1
 800c408:	bfa8      	it	ge
 800c40a:	4688      	movge	r8, r1
 800c40c:	f1bc 0f00 	cmp.w	ip, #0
 800c410:	d001      	beq.n	800c416 <_strtod_l+0x2e6>
 800c412:	f1c8 0800 	rsb	r8, r8, #0
 800c416:	2d00      	cmp	r5, #0
 800c418:	d14e      	bne.n	800c4b8 <_strtod_l+0x388>
 800c41a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c41c:	4308      	orrs	r0, r1
 800c41e:	f47f aec0 	bne.w	800c1a2 <_strtod_l+0x72>
 800c422:	2b00      	cmp	r3, #0
 800c424:	f47f aed6 	bne.w	800c1d4 <_strtod_l+0xa4>
 800c428:	2a69      	cmp	r2, #105	@ 0x69
 800c42a:	d028      	beq.n	800c47e <_strtod_l+0x34e>
 800c42c:	dc25      	bgt.n	800c47a <_strtod_l+0x34a>
 800c42e:	2a49      	cmp	r2, #73	@ 0x49
 800c430:	d025      	beq.n	800c47e <_strtod_l+0x34e>
 800c432:	2a4e      	cmp	r2, #78	@ 0x4e
 800c434:	f47f aece 	bne.w	800c1d4 <_strtod_l+0xa4>
 800c438:	499a      	ldr	r1, [pc, #616]	@ (800c6a4 <_strtod_l+0x574>)
 800c43a:	a819      	add	r0, sp, #100	@ 0x64
 800c43c:	f001 fb06 	bl	800da4c <__match>
 800c440:	2800      	cmp	r0, #0
 800c442:	f43f aec7 	beq.w	800c1d4 <_strtod_l+0xa4>
 800c446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	2b28      	cmp	r3, #40	@ 0x28
 800c44c:	d12e      	bne.n	800c4ac <_strtod_l+0x37c>
 800c44e:	4996      	ldr	r1, [pc, #600]	@ (800c6a8 <_strtod_l+0x578>)
 800c450:	aa1c      	add	r2, sp, #112	@ 0x70
 800c452:	a819      	add	r0, sp, #100	@ 0x64
 800c454:	f001 fb0e 	bl	800da74 <__hexnan>
 800c458:	2805      	cmp	r0, #5
 800c45a:	d127      	bne.n	800c4ac <_strtod_l+0x37c>
 800c45c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c45e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c462:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c466:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c46a:	e69a      	b.n	800c1a2 <_strtod_l+0x72>
 800c46c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c46e:	fb08 2101 	mla	r1, r8, r1, r2
 800c472:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c476:	920e      	str	r2, [sp, #56]	@ 0x38
 800c478:	e7b5      	b.n	800c3e6 <_strtod_l+0x2b6>
 800c47a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c47c:	e7da      	b.n	800c434 <_strtod_l+0x304>
 800c47e:	498b      	ldr	r1, [pc, #556]	@ (800c6ac <_strtod_l+0x57c>)
 800c480:	a819      	add	r0, sp, #100	@ 0x64
 800c482:	f001 fae3 	bl	800da4c <__match>
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f aea4 	beq.w	800c1d4 <_strtod_l+0xa4>
 800c48c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c48e:	4988      	ldr	r1, [pc, #544]	@ (800c6b0 <_strtod_l+0x580>)
 800c490:	3b01      	subs	r3, #1
 800c492:	a819      	add	r0, sp, #100	@ 0x64
 800c494:	9319      	str	r3, [sp, #100]	@ 0x64
 800c496:	f001 fad9 	bl	800da4c <__match>
 800c49a:	b910      	cbnz	r0, 800c4a2 <_strtod_l+0x372>
 800c49c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c49e:	3301      	adds	r3, #1
 800c4a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c4a2:	f04f 0a00 	mov.w	sl, #0
 800c4a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800c6b4 <_strtod_l+0x584>
 800c4aa:	e67a      	b.n	800c1a2 <_strtod_l+0x72>
 800c4ac:	4882      	ldr	r0, [pc, #520]	@ (800c6b8 <_strtod_l+0x588>)
 800c4ae:	f001 f80b 	bl	800d4c8 <nan>
 800c4b2:	4682      	mov	sl, r0
 800c4b4:	468b      	mov	fp, r1
 800c4b6:	e674      	b.n	800c1a2 <_strtod_l+0x72>
 800c4b8:	eba8 0309 	sub.w	r3, r8, r9
 800c4bc:	2f00      	cmp	r7, #0
 800c4be:	bf08      	it	eq
 800c4c0:	462f      	moveq	r7, r5
 800c4c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c4c4:	2d10      	cmp	r5, #16
 800c4c6:	462c      	mov	r4, r5
 800c4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ca:	bfa8      	it	ge
 800c4cc:	2410      	movge	r4, #16
 800c4ce:	f7f3 ff89 	bl	80003e4 <__aeabi_ui2d>
 800c4d2:	2d09      	cmp	r5, #9
 800c4d4:	4682      	mov	sl, r0
 800c4d6:	468b      	mov	fp, r1
 800c4d8:	dc11      	bgt.n	800c4fe <_strtod_l+0x3ce>
 800c4da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f43f ae60 	beq.w	800c1a2 <_strtod_l+0x72>
 800c4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e4:	dd76      	ble.n	800c5d4 <_strtod_l+0x4a4>
 800c4e6:	2b16      	cmp	r3, #22
 800c4e8:	dc5d      	bgt.n	800c5a6 <_strtod_l+0x476>
 800c4ea:	4974      	ldr	r1, [pc, #464]	@ (800c6bc <_strtod_l+0x58c>)
 800c4ec:	4652      	mov	r2, sl
 800c4ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4f2:	465b      	mov	r3, fp
 800c4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f8:	f7f3 ffee 	bl	80004d8 <__aeabi_dmul>
 800c4fc:	e7d9      	b.n	800c4b2 <_strtod_l+0x382>
 800c4fe:	4b6f      	ldr	r3, [pc, #444]	@ (800c6bc <_strtod_l+0x58c>)
 800c500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c504:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c508:	f7f3 ffe6 	bl	80004d8 <__aeabi_dmul>
 800c50c:	4682      	mov	sl, r0
 800c50e:	9808      	ldr	r0, [sp, #32]
 800c510:	468b      	mov	fp, r1
 800c512:	f7f3 ff67 	bl	80003e4 <__aeabi_ui2d>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4650      	mov	r0, sl
 800c51c:	4659      	mov	r1, fp
 800c51e:	f7f3 fe25 	bl	800016c <__adddf3>
 800c522:	2d0f      	cmp	r5, #15
 800c524:	4682      	mov	sl, r0
 800c526:	468b      	mov	fp, r1
 800c528:	ddd7      	ble.n	800c4da <_strtod_l+0x3aa>
 800c52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52c:	1b2c      	subs	r4, r5, r4
 800c52e:	441c      	add	r4, r3
 800c530:	2c00      	cmp	r4, #0
 800c532:	f340 8096 	ble.w	800c662 <_strtod_l+0x532>
 800c536:	f014 030f 	ands.w	r3, r4, #15
 800c53a:	d00a      	beq.n	800c552 <_strtod_l+0x422>
 800c53c:	495f      	ldr	r1, [pc, #380]	@ (800c6bc <_strtod_l+0x58c>)
 800c53e:	4652      	mov	r2, sl
 800c540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c544:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c548:	465b      	mov	r3, fp
 800c54a:	f7f3 ffc5 	bl	80004d8 <__aeabi_dmul>
 800c54e:	4682      	mov	sl, r0
 800c550:	468b      	mov	fp, r1
 800c552:	f034 040f 	bics.w	r4, r4, #15
 800c556:	d073      	beq.n	800c640 <_strtod_l+0x510>
 800c558:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c55c:	dd48      	ble.n	800c5f0 <_strtod_l+0x4c0>
 800c55e:	2400      	movs	r4, #0
 800c560:	46a0      	mov	r8, r4
 800c562:	46a1      	mov	r9, r4
 800c564:	940a      	str	r4, [sp, #40]	@ 0x28
 800c566:	2322      	movs	r3, #34	@ 0x22
 800c568:	f04f 0a00 	mov.w	sl, #0
 800c56c:	9a05      	ldr	r2, [sp, #20]
 800c56e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800c6b4 <_strtod_l+0x584>
 800c572:	6013      	str	r3, [r2, #0]
 800c574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c576:	2b00      	cmp	r3, #0
 800c578:	f43f ae13 	beq.w	800c1a2 <_strtod_l+0x72>
 800c57c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c57e:	9805      	ldr	r0, [sp, #20]
 800c580:	f7ff f94c 	bl	800b81c <_Bfree>
 800c584:	4649      	mov	r1, r9
 800c586:	9805      	ldr	r0, [sp, #20]
 800c588:	f7ff f948 	bl	800b81c <_Bfree>
 800c58c:	4641      	mov	r1, r8
 800c58e:	9805      	ldr	r0, [sp, #20]
 800c590:	f7ff f944 	bl	800b81c <_Bfree>
 800c594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c596:	9805      	ldr	r0, [sp, #20]
 800c598:	f7ff f940 	bl	800b81c <_Bfree>
 800c59c:	4621      	mov	r1, r4
 800c59e:	9805      	ldr	r0, [sp, #20]
 800c5a0:	f7ff f93c 	bl	800b81c <_Bfree>
 800c5a4:	e5fd      	b.n	800c1a2 <_strtod_l+0x72>
 800c5a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	dbbc      	blt.n	800c52a <_strtod_l+0x3fa>
 800c5b0:	4c42      	ldr	r4, [pc, #264]	@ (800c6bc <_strtod_l+0x58c>)
 800c5b2:	f1c5 050f 	rsb	r5, r5, #15
 800c5b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c5ba:	4652      	mov	r2, sl
 800c5bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c0:	465b      	mov	r3, fp
 800c5c2:	f7f3 ff89 	bl	80004d8 <__aeabi_dmul>
 800c5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c8:	1b5d      	subs	r5, r3, r5
 800c5ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c5ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c5d2:	e791      	b.n	800c4f8 <_strtod_l+0x3c8>
 800c5d4:	3316      	adds	r3, #22
 800c5d6:	dba8      	blt.n	800c52a <_strtod_l+0x3fa>
 800c5d8:	4b38      	ldr	r3, [pc, #224]	@ (800c6bc <_strtod_l+0x58c>)
 800c5da:	eba9 0808 	sub.w	r8, r9, r8
 800c5de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c5e2:	4650      	mov	r0, sl
 800c5e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c5e8:	4659      	mov	r1, fp
 800c5ea:	f7f4 f89f 	bl	800072c <__aeabi_ddiv>
 800c5ee:	e760      	b.n	800c4b2 <_strtod_l+0x382>
 800c5f0:	4b33      	ldr	r3, [pc, #204]	@ (800c6c0 <_strtod_l+0x590>)
 800c5f2:	4650      	mov	r0, sl
 800c5f4:	9308      	str	r3, [sp, #32]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4659      	mov	r1, fp
 800c5fa:	461e      	mov	r6, r3
 800c5fc:	1124      	asrs	r4, r4, #4
 800c5fe:	2c01      	cmp	r4, #1
 800c600:	dc21      	bgt.n	800c646 <_strtod_l+0x516>
 800c602:	b10b      	cbz	r3, 800c608 <_strtod_l+0x4d8>
 800c604:	4682      	mov	sl, r0
 800c606:	468b      	mov	fp, r1
 800c608:	492d      	ldr	r1, [pc, #180]	@ (800c6c0 <_strtod_l+0x590>)
 800c60a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c60e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c612:	4652      	mov	r2, sl
 800c614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c618:	465b      	mov	r3, fp
 800c61a:	f7f3 ff5d 	bl	80004d8 <__aeabi_dmul>
 800c61e:	4b25      	ldr	r3, [pc, #148]	@ (800c6b4 <_strtod_l+0x584>)
 800c620:	460a      	mov	r2, r1
 800c622:	400b      	ands	r3, r1
 800c624:	4927      	ldr	r1, [pc, #156]	@ (800c6c4 <_strtod_l+0x594>)
 800c626:	4682      	mov	sl, r0
 800c628:	428b      	cmp	r3, r1
 800c62a:	d898      	bhi.n	800c55e <_strtod_l+0x42e>
 800c62c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c630:	428b      	cmp	r3, r1
 800c632:	bf86      	itte	hi
 800c634:	f04f 3aff 	movhi.w	sl, #4294967295
 800c638:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c6c8 <_strtod_l+0x598>
 800c63c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c640:	2300      	movs	r3, #0
 800c642:	9308      	str	r3, [sp, #32]
 800c644:	e07a      	b.n	800c73c <_strtod_l+0x60c>
 800c646:	07e2      	lsls	r2, r4, #31
 800c648:	d505      	bpl.n	800c656 <_strtod_l+0x526>
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f7f3 ff42 	bl	80004d8 <__aeabi_dmul>
 800c654:	2301      	movs	r3, #1
 800c656:	9a08      	ldr	r2, [sp, #32]
 800c658:	3601      	adds	r6, #1
 800c65a:	3208      	adds	r2, #8
 800c65c:	1064      	asrs	r4, r4, #1
 800c65e:	9208      	str	r2, [sp, #32]
 800c660:	e7cd      	b.n	800c5fe <_strtod_l+0x4ce>
 800c662:	d0ed      	beq.n	800c640 <_strtod_l+0x510>
 800c664:	4264      	negs	r4, r4
 800c666:	f014 020f 	ands.w	r2, r4, #15
 800c66a:	d00a      	beq.n	800c682 <_strtod_l+0x552>
 800c66c:	4b13      	ldr	r3, [pc, #76]	@ (800c6bc <_strtod_l+0x58c>)
 800c66e:	4650      	mov	r0, sl
 800c670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c674:	4659      	mov	r1, fp
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f4 f857 	bl	800072c <__aeabi_ddiv>
 800c67e:	4682      	mov	sl, r0
 800c680:	468b      	mov	fp, r1
 800c682:	1124      	asrs	r4, r4, #4
 800c684:	d0dc      	beq.n	800c640 <_strtod_l+0x510>
 800c686:	2c1f      	cmp	r4, #31
 800c688:	dd20      	ble.n	800c6cc <_strtod_l+0x59c>
 800c68a:	2400      	movs	r4, #0
 800c68c:	46a0      	mov	r8, r4
 800c68e:	46a1      	mov	r9, r4
 800c690:	940a      	str	r4, [sp, #40]	@ 0x28
 800c692:	2322      	movs	r3, #34	@ 0x22
 800c694:	9a05      	ldr	r2, [sp, #20]
 800c696:	f04f 0a00 	mov.w	sl, #0
 800c69a:	f04f 0b00 	mov.w	fp, #0
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	e768      	b.n	800c574 <_strtod_l+0x444>
 800c6a2:	bf00      	nop
 800c6a4:	0800e0b4 	.word	0x0800e0b4
 800c6a8:	0800e2cc 	.word	0x0800e2cc
 800c6ac:	0800e0ac 	.word	0x0800e0ac
 800c6b0:	0800e0e3 	.word	0x0800e0e3
 800c6b4:	7ff00000 	.word	0x7ff00000
 800c6b8:	0800e374 	.word	0x0800e374
 800c6bc:	0800e200 	.word	0x0800e200
 800c6c0:	0800e1d8 	.word	0x0800e1d8
 800c6c4:	7ca00000 	.word	0x7ca00000
 800c6c8:	7fefffff 	.word	0x7fefffff
 800c6cc:	f014 0310 	ands.w	r3, r4, #16
 800c6d0:	bf18      	it	ne
 800c6d2:	236a      	movne	r3, #106	@ 0x6a
 800c6d4:	4650      	mov	r0, sl
 800c6d6:	9308      	str	r3, [sp, #32]
 800c6d8:	4659      	mov	r1, fp
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4ea9      	ldr	r6, [pc, #676]	@ (800c984 <_strtod_l+0x854>)
 800c6de:	07e2      	lsls	r2, r4, #31
 800c6e0:	d504      	bpl.n	800c6ec <_strtod_l+0x5bc>
 800c6e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6e6:	f7f3 fef7 	bl	80004d8 <__aeabi_dmul>
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	1064      	asrs	r4, r4, #1
 800c6ee:	f106 0608 	add.w	r6, r6, #8
 800c6f2:	d1f4      	bne.n	800c6de <_strtod_l+0x5ae>
 800c6f4:	b10b      	cbz	r3, 800c6fa <_strtod_l+0x5ca>
 800c6f6:	4682      	mov	sl, r0
 800c6f8:	468b      	mov	fp, r1
 800c6fa:	9b08      	ldr	r3, [sp, #32]
 800c6fc:	b1b3      	cbz	r3, 800c72c <_strtod_l+0x5fc>
 800c6fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c702:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c706:	2b00      	cmp	r3, #0
 800c708:	4659      	mov	r1, fp
 800c70a:	dd0f      	ble.n	800c72c <_strtod_l+0x5fc>
 800c70c:	2b1f      	cmp	r3, #31
 800c70e:	dd57      	ble.n	800c7c0 <_strtod_l+0x690>
 800c710:	2b34      	cmp	r3, #52	@ 0x34
 800c712:	bfd8      	it	le
 800c714:	f04f 33ff 	movle.w	r3, #4294967295
 800c718:	f04f 0a00 	mov.w	sl, #0
 800c71c:	bfcf      	iteee	gt
 800c71e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c722:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c726:	4093      	lslle	r3, r2
 800c728:	ea03 0b01 	andle.w	fp, r3, r1
 800c72c:	2200      	movs	r2, #0
 800c72e:	2300      	movs	r3, #0
 800c730:	4650      	mov	r0, sl
 800c732:	4659      	mov	r1, fp
 800c734:	f7f4 f938 	bl	80009a8 <__aeabi_dcmpeq>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d1a6      	bne.n	800c68a <_strtod_l+0x55a>
 800c73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c73e:	463a      	mov	r2, r7
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c744:	462b      	mov	r3, r5
 800c746:	9805      	ldr	r0, [sp, #20]
 800c748:	f7ff f8d0 	bl	800b8ec <__s2b>
 800c74c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c74e:	2800      	cmp	r0, #0
 800c750:	f43f af05 	beq.w	800c55e <_strtod_l+0x42e>
 800c754:	2400      	movs	r4, #0
 800c756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c758:	eba9 0308 	sub.w	r3, r9, r8
 800c75c:	2a00      	cmp	r2, #0
 800c75e:	bfa8      	it	ge
 800c760:	2300      	movge	r3, #0
 800c762:	46a0      	mov	r8, r4
 800c764:	9312      	str	r3, [sp, #72]	@ 0x48
 800c766:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c76a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c76e:	9805      	ldr	r0, [sp, #20]
 800c770:	6859      	ldr	r1, [r3, #4]
 800c772:	f7ff f813 	bl	800b79c <_Balloc>
 800c776:	4681      	mov	r9, r0
 800c778:	2800      	cmp	r0, #0
 800c77a:	f43f aef4 	beq.w	800c566 <_strtod_l+0x436>
 800c77e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c780:	300c      	adds	r0, #12
 800c782:	691a      	ldr	r2, [r3, #16]
 800c784:	f103 010c 	add.w	r1, r3, #12
 800c788:	3202      	adds	r2, #2
 800c78a:	0092      	lsls	r2, r2, #2
 800c78c:	f7fe f8a3 	bl	800a8d6 <memcpy>
 800c790:	ab1c      	add	r3, sp, #112	@ 0x70
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	4652      	mov	r2, sl
 800c79a:	465b      	mov	r3, fp
 800c79c:	9805      	ldr	r0, [sp, #20]
 800c79e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c7a2:	f7ff fbd5 	bl	800bf50 <__d2b>
 800c7a6:	901a      	str	r0, [sp, #104]	@ 0x68
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	f43f aedc 	beq.w	800c566 <_strtod_l+0x436>
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	9805      	ldr	r0, [sp, #20]
 800c7b2:	f7ff f931 	bl	800ba18 <__i2b>
 800c7b6:	4680      	mov	r8, r0
 800c7b8:	b948      	cbnz	r0, 800c7ce <_strtod_l+0x69e>
 800c7ba:	f04f 0800 	mov.w	r8, #0
 800c7be:	e6d2      	b.n	800c566 <_strtod_l+0x436>
 800c7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c8:	ea03 0a0a 	and.w	sl, r3, sl
 800c7cc:	e7ae      	b.n	800c72c <_strtod_l+0x5fc>
 800c7ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c7d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	bfab      	itete	ge
 800c7d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c7d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c7da:	18ef      	addge	r7, r5, r3
 800c7dc:	1b5e      	sublt	r6, r3, r5
 800c7de:	9b08      	ldr	r3, [sp, #32]
 800c7e0:	bfa8      	it	ge
 800c7e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c7e4:	eba5 0503 	sub.w	r5, r5, r3
 800c7e8:	4415      	add	r5, r2
 800c7ea:	4b67      	ldr	r3, [pc, #412]	@ (800c988 <_strtod_l+0x858>)
 800c7ec:	f105 35ff 	add.w	r5, r5, #4294967295
 800c7f0:	bfb8      	it	lt
 800c7f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c7f4:	429d      	cmp	r5, r3
 800c7f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c7fa:	da50      	bge.n	800c89e <_strtod_l+0x76e>
 800c7fc:	1b5b      	subs	r3, r3, r5
 800c7fe:	2b1f      	cmp	r3, #31
 800c800:	f04f 0101 	mov.w	r1, #1
 800c804:	eba2 0203 	sub.w	r2, r2, r3
 800c808:	dc3d      	bgt.n	800c886 <_strtod_l+0x756>
 800c80a:	fa01 f303 	lsl.w	r3, r1, r3
 800c80e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c810:	2300      	movs	r3, #0
 800c812:	9310      	str	r3, [sp, #64]	@ 0x40
 800c814:	18bd      	adds	r5, r7, r2
 800c816:	9b08      	ldr	r3, [sp, #32]
 800c818:	42af      	cmp	r7, r5
 800c81a:	4416      	add	r6, r2
 800c81c:	441e      	add	r6, r3
 800c81e:	463b      	mov	r3, r7
 800c820:	bfa8      	it	ge
 800c822:	462b      	movge	r3, r5
 800c824:	42b3      	cmp	r3, r6
 800c826:	bfa8      	it	ge
 800c828:	4633      	movge	r3, r6
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	bfc2      	ittt	gt
 800c82e:	1aed      	subgt	r5, r5, r3
 800c830:	1af6      	subgt	r6, r6, r3
 800c832:	1aff      	subgt	r7, r7, r3
 800c834:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c836:	2b00      	cmp	r3, #0
 800c838:	dd16      	ble.n	800c868 <_strtod_l+0x738>
 800c83a:	4641      	mov	r1, r8
 800c83c:	461a      	mov	r2, r3
 800c83e:	9805      	ldr	r0, [sp, #20]
 800c840:	f7ff f9a8 	bl	800bb94 <__pow5mult>
 800c844:	4680      	mov	r8, r0
 800c846:	2800      	cmp	r0, #0
 800c848:	d0b7      	beq.n	800c7ba <_strtod_l+0x68a>
 800c84a:	4601      	mov	r1, r0
 800c84c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c84e:	9805      	ldr	r0, [sp, #20]
 800c850:	f7ff f8f8 	bl	800ba44 <__multiply>
 800c854:	900e      	str	r0, [sp, #56]	@ 0x38
 800c856:	2800      	cmp	r0, #0
 800c858:	f43f ae85 	beq.w	800c566 <_strtod_l+0x436>
 800c85c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c85e:	9805      	ldr	r0, [sp, #20]
 800c860:	f7fe ffdc 	bl	800b81c <_Bfree>
 800c864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c866:	931a      	str	r3, [sp, #104]	@ 0x68
 800c868:	2d00      	cmp	r5, #0
 800c86a:	dc1d      	bgt.n	800c8a8 <_strtod_l+0x778>
 800c86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c86e:	2b00      	cmp	r3, #0
 800c870:	dd23      	ble.n	800c8ba <_strtod_l+0x78a>
 800c872:	4649      	mov	r1, r9
 800c874:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c876:	9805      	ldr	r0, [sp, #20]
 800c878:	f7ff f98c 	bl	800bb94 <__pow5mult>
 800c87c:	4681      	mov	r9, r0
 800c87e:	b9e0      	cbnz	r0, 800c8ba <_strtod_l+0x78a>
 800c880:	f04f 0900 	mov.w	r9, #0
 800c884:	e66f      	b.n	800c566 <_strtod_l+0x436>
 800c886:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c88a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c88e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c892:	35e2      	adds	r5, #226	@ 0xe2
 800c894:	fa01 f305 	lsl.w	r3, r1, r5
 800c898:	9310      	str	r3, [sp, #64]	@ 0x40
 800c89a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c89c:	e7ba      	b.n	800c814 <_strtod_l+0x6e4>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8a6:	e7b5      	b.n	800c814 <_strtod_l+0x6e4>
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8ac:	9805      	ldr	r0, [sp, #20]
 800c8ae:	f7ff f9cb 	bl	800bc48 <__lshift>
 800c8b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1d9      	bne.n	800c86c <_strtod_l+0x73c>
 800c8b8:	e655      	b.n	800c566 <_strtod_l+0x436>
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	dd07      	ble.n	800c8ce <_strtod_l+0x79e>
 800c8be:	4649      	mov	r1, r9
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	9805      	ldr	r0, [sp, #20]
 800c8c4:	f7ff f9c0 	bl	800bc48 <__lshift>
 800c8c8:	4681      	mov	r9, r0
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d0d8      	beq.n	800c880 <_strtod_l+0x750>
 800c8ce:	2f00      	cmp	r7, #0
 800c8d0:	dd08      	ble.n	800c8e4 <_strtod_l+0x7b4>
 800c8d2:	4641      	mov	r1, r8
 800c8d4:	463a      	mov	r2, r7
 800c8d6:	9805      	ldr	r0, [sp, #20]
 800c8d8:	f7ff f9b6 	bl	800bc48 <__lshift>
 800c8dc:	4680      	mov	r8, r0
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	f43f ae41 	beq.w	800c566 <_strtod_l+0x436>
 800c8e4:	464a      	mov	r2, r9
 800c8e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8e8:	9805      	ldr	r0, [sp, #20]
 800c8ea:	f7ff fa35 	bl	800bd58 <__mdiff>
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f43f ae38 	beq.w	800c566 <_strtod_l+0x436>
 800c8f6:	68c3      	ldr	r3, [r0, #12]
 800c8f8:	4641      	mov	r1, r8
 800c8fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60c3      	str	r3, [r0, #12]
 800c900:	f7ff fa0e 	bl	800bd20 <__mcmp>
 800c904:	2800      	cmp	r0, #0
 800c906:	da45      	bge.n	800c994 <_strtod_l+0x864>
 800c908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c90a:	ea53 030a 	orrs.w	r3, r3, sl
 800c90e:	d16b      	bne.n	800c9e8 <_strtod_l+0x8b8>
 800c910:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c914:	2b00      	cmp	r3, #0
 800c916:	d167      	bne.n	800c9e8 <_strtod_l+0x8b8>
 800c918:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c91c:	0d1b      	lsrs	r3, r3, #20
 800c91e:	051b      	lsls	r3, r3, #20
 800c920:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c924:	d960      	bls.n	800c9e8 <_strtod_l+0x8b8>
 800c926:	6963      	ldr	r3, [r4, #20]
 800c928:	b913      	cbnz	r3, 800c930 <_strtod_l+0x800>
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	dd5b      	ble.n	800c9e8 <_strtod_l+0x8b8>
 800c930:	4621      	mov	r1, r4
 800c932:	2201      	movs	r2, #1
 800c934:	9805      	ldr	r0, [sp, #20]
 800c936:	f7ff f987 	bl	800bc48 <__lshift>
 800c93a:	4641      	mov	r1, r8
 800c93c:	4604      	mov	r4, r0
 800c93e:	f7ff f9ef 	bl	800bd20 <__mcmp>
 800c942:	2800      	cmp	r0, #0
 800c944:	dd50      	ble.n	800c9e8 <_strtod_l+0x8b8>
 800c946:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c94a:	9a08      	ldr	r2, [sp, #32]
 800c94c:	0d1b      	lsrs	r3, r3, #20
 800c94e:	051b      	lsls	r3, r3, #20
 800c950:	2a00      	cmp	r2, #0
 800c952:	d06a      	beq.n	800ca2a <_strtod_l+0x8fa>
 800c954:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c958:	d867      	bhi.n	800ca2a <_strtod_l+0x8fa>
 800c95a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c95e:	f67f ae98 	bls.w	800c692 <_strtod_l+0x562>
 800c962:	4650      	mov	r0, sl
 800c964:	4659      	mov	r1, fp
 800c966:	4b09      	ldr	r3, [pc, #36]	@ (800c98c <_strtod_l+0x85c>)
 800c968:	2200      	movs	r2, #0
 800c96a:	f7f3 fdb5 	bl	80004d8 <__aeabi_dmul>
 800c96e:	4b08      	ldr	r3, [pc, #32]	@ (800c990 <_strtod_l+0x860>)
 800c970:	4682      	mov	sl, r0
 800c972:	400b      	ands	r3, r1
 800c974:	468b      	mov	fp, r1
 800c976:	2b00      	cmp	r3, #0
 800c978:	f47f ae00 	bne.w	800c57c <_strtod_l+0x44c>
 800c97c:	2322      	movs	r3, #34	@ 0x22
 800c97e:	9a05      	ldr	r2, [sp, #20]
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	e5fb      	b.n	800c57c <_strtod_l+0x44c>
 800c984:	0800e2f8 	.word	0x0800e2f8
 800c988:	fffffc02 	.word	0xfffffc02
 800c98c:	39500000 	.word	0x39500000
 800c990:	7ff00000 	.word	0x7ff00000
 800c994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c998:	d165      	bne.n	800ca66 <_strtod_l+0x936>
 800c99a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c99c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9a0:	b35a      	cbz	r2, 800c9fa <_strtod_l+0x8ca>
 800c9a2:	4a99      	ldr	r2, [pc, #612]	@ (800cc08 <_strtod_l+0xad8>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d12b      	bne.n	800ca00 <_strtod_l+0x8d0>
 800c9a8:	9b08      	ldr	r3, [sp, #32]
 800c9aa:	4651      	mov	r1, sl
 800c9ac:	b303      	cbz	r3, 800c9f0 <_strtod_l+0x8c0>
 800c9ae:	465a      	mov	r2, fp
 800c9b0:	4b96      	ldr	r3, [pc, #600]	@ (800cc0c <_strtod_l+0xadc>)
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9bc:	d81b      	bhi.n	800c9f6 <_strtod_l+0x8c6>
 800c9be:	0d1b      	lsrs	r3, r3, #20
 800c9c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c8:	4299      	cmp	r1, r3
 800c9ca:	d119      	bne.n	800ca00 <_strtod_l+0x8d0>
 800c9cc:	4b90      	ldr	r3, [pc, #576]	@ (800cc10 <_strtod_l+0xae0>)
 800c9ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d102      	bne.n	800c9da <_strtod_l+0x8aa>
 800c9d4:	3101      	adds	r1, #1
 800c9d6:	f43f adc6 	beq.w	800c566 <_strtod_l+0x436>
 800c9da:	f04f 0a00 	mov.w	sl, #0
 800c9de:	4b8b      	ldr	r3, [pc, #556]	@ (800cc0c <_strtod_l+0xadc>)
 800c9e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9e2:	401a      	ands	r2, r3
 800c9e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c9e8:	9b08      	ldr	r3, [sp, #32]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1b9      	bne.n	800c962 <_strtod_l+0x832>
 800c9ee:	e5c5      	b.n	800c57c <_strtod_l+0x44c>
 800c9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f4:	e7e8      	b.n	800c9c8 <_strtod_l+0x898>
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	e7e6      	b.n	800c9c8 <_strtod_l+0x898>
 800c9fa:	ea53 030a 	orrs.w	r3, r3, sl
 800c9fe:	d0a2      	beq.n	800c946 <_strtod_l+0x816>
 800ca00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca02:	b1db      	cbz	r3, 800ca3c <_strtod_l+0x90c>
 800ca04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca06:	4213      	tst	r3, r2
 800ca08:	d0ee      	beq.n	800c9e8 <_strtod_l+0x8b8>
 800ca0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	4659      	mov	r1, fp
 800ca10:	9a08      	ldr	r2, [sp, #32]
 800ca12:	b1bb      	cbz	r3, 800ca44 <_strtod_l+0x914>
 800ca14:	f7ff fb68 	bl	800c0e8 <sulp>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca20:	f7f3 fba4 	bl	800016c <__adddf3>
 800ca24:	4682      	mov	sl, r0
 800ca26:	468b      	mov	fp, r1
 800ca28:	e7de      	b.n	800c9e8 <_strtod_l+0x8b8>
 800ca2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ca2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca32:	f04f 3aff 	mov.w	sl, #4294967295
 800ca36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca3a:	e7d5      	b.n	800c9e8 <_strtod_l+0x8b8>
 800ca3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca3e:	ea13 0f0a 	tst.w	r3, sl
 800ca42:	e7e1      	b.n	800ca08 <_strtod_l+0x8d8>
 800ca44:	f7ff fb50 	bl	800c0e8 <sulp>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca50:	f7f3 fb8a 	bl	8000168 <__aeabi_dsub>
 800ca54:	2200      	movs	r2, #0
 800ca56:	2300      	movs	r3, #0
 800ca58:	4682      	mov	sl, r0
 800ca5a:	468b      	mov	fp, r1
 800ca5c:	f7f3 ffa4 	bl	80009a8 <__aeabi_dcmpeq>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d0c1      	beq.n	800c9e8 <_strtod_l+0x8b8>
 800ca64:	e615      	b.n	800c692 <_strtod_l+0x562>
 800ca66:	4641      	mov	r1, r8
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f7ff fac9 	bl	800c000 <__ratio>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca74:	4606      	mov	r6, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	f7f3 ffaa 	bl	80009d0 <__aeabi_dcmple>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d06d      	beq.n	800cb5c <_strtod_l+0xa2c>
 800ca80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d178      	bne.n	800cb78 <_strtod_l+0xa48>
 800ca86:	f1ba 0f00 	cmp.w	sl, #0
 800ca8a:	d156      	bne.n	800cb3a <_strtod_l+0xa0a>
 800ca8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d158      	bne.n	800cb48 <_strtod_l+0xa18>
 800ca96:	2200      	movs	r2, #0
 800ca98:	4630      	mov	r0, r6
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	4b5d      	ldr	r3, [pc, #372]	@ (800cc14 <_strtod_l+0xae4>)
 800ca9e:	f7f3 ff8d 	bl	80009bc <__aeabi_dcmplt>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d157      	bne.n	800cb56 <_strtod_l+0xa26>
 800caa6:	4630      	mov	r0, r6
 800caa8:	4639      	mov	r1, r7
 800caaa:	2200      	movs	r2, #0
 800caac:	4b5a      	ldr	r3, [pc, #360]	@ (800cc18 <_strtod_l+0xae8>)
 800caae:	f7f3 fd13 	bl	80004d8 <__aeabi_dmul>
 800cab2:	4606      	mov	r6, r0
 800cab4:	460f      	mov	r7, r1
 800cab6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800caba:	9606      	str	r6, [sp, #24]
 800cabc:	9307      	str	r3, [sp, #28]
 800cabe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cac2:	4d52      	ldr	r5, [pc, #328]	@ (800cc0c <_strtod_l+0xadc>)
 800cac4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caca:	401d      	ands	r5, r3
 800cacc:	4b53      	ldr	r3, [pc, #332]	@ (800cc1c <_strtod_l+0xaec>)
 800cace:	429d      	cmp	r5, r3
 800cad0:	f040 80aa 	bne.w	800cc28 <_strtod_l+0xaf8>
 800cad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cad6:	4650      	mov	r0, sl
 800cad8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cadc:	4659      	mov	r1, fp
 800cade:	f7ff f9cf 	bl	800be80 <__ulp>
 800cae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cae6:	f7f3 fcf7 	bl	80004d8 <__aeabi_dmul>
 800caea:	4652      	mov	r2, sl
 800caec:	465b      	mov	r3, fp
 800caee:	f7f3 fb3d 	bl	800016c <__adddf3>
 800caf2:	460b      	mov	r3, r1
 800caf4:	4945      	ldr	r1, [pc, #276]	@ (800cc0c <_strtod_l+0xadc>)
 800caf6:	4a4a      	ldr	r2, [pc, #296]	@ (800cc20 <_strtod_l+0xaf0>)
 800caf8:	4019      	ands	r1, r3
 800cafa:	4291      	cmp	r1, r2
 800cafc:	4682      	mov	sl, r0
 800cafe:	d942      	bls.n	800cb86 <_strtod_l+0xa56>
 800cb00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb02:	4b43      	ldr	r3, [pc, #268]	@ (800cc10 <_strtod_l+0xae0>)
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d103      	bne.n	800cb10 <_strtod_l+0x9e0>
 800cb08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	f43f ad2b 	beq.w	800c566 <_strtod_l+0x436>
 800cb10:	f04f 3aff 	mov.w	sl, #4294967295
 800cb14:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800cc10 <_strtod_l+0xae0>
 800cb18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb1a:	9805      	ldr	r0, [sp, #20]
 800cb1c:	f7fe fe7e 	bl	800b81c <_Bfree>
 800cb20:	4649      	mov	r1, r9
 800cb22:	9805      	ldr	r0, [sp, #20]
 800cb24:	f7fe fe7a 	bl	800b81c <_Bfree>
 800cb28:	4641      	mov	r1, r8
 800cb2a:	9805      	ldr	r0, [sp, #20]
 800cb2c:	f7fe fe76 	bl	800b81c <_Bfree>
 800cb30:	4621      	mov	r1, r4
 800cb32:	9805      	ldr	r0, [sp, #20]
 800cb34:	f7fe fe72 	bl	800b81c <_Bfree>
 800cb38:	e618      	b.n	800c76c <_strtod_l+0x63c>
 800cb3a:	f1ba 0f01 	cmp.w	sl, #1
 800cb3e:	d103      	bne.n	800cb48 <_strtod_l+0xa18>
 800cb40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f43f ada5 	beq.w	800c692 <_strtod_l+0x562>
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4b36      	ldr	r3, [pc, #216]	@ (800cc24 <_strtod_l+0xaf4>)
 800cb4c:	2600      	movs	r6, #0
 800cb4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb52:	4f30      	ldr	r7, [pc, #192]	@ (800cc14 <_strtod_l+0xae4>)
 800cb54:	e7b3      	b.n	800cabe <_strtod_l+0x98e>
 800cb56:	2600      	movs	r6, #0
 800cb58:	4f2f      	ldr	r7, [pc, #188]	@ (800cc18 <_strtod_l+0xae8>)
 800cb5a:	e7ac      	b.n	800cab6 <_strtod_l+0x986>
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	4b2d      	ldr	r3, [pc, #180]	@ (800cc18 <_strtod_l+0xae8>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	f7f3 fcb8 	bl	80004d8 <__aeabi_dmul>
 800cb68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d0a1      	beq.n	800cab6 <_strtod_l+0x986>
 800cb72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb76:	e7a2      	b.n	800cabe <_strtod_l+0x98e>
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4b26      	ldr	r3, [pc, #152]	@ (800cc14 <_strtod_l+0xae4>)
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	461f      	mov	r7, r3
 800cb80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb84:	e79b      	b.n	800cabe <_strtod_l+0x98e>
 800cb86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb8a:	9b08      	ldr	r3, [sp, #32]
 800cb8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1c1      	bne.n	800cb18 <_strtod_l+0x9e8>
 800cb94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb98:	0d1b      	lsrs	r3, r3, #20
 800cb9a:	051b      	lsls	r3, r3, #20
 800cb9c:	429d      	cmp	r5, r3
 800cb9e:	d1bb      	bne.n	800cb18 <_strtod_l+0x9e8>
 800cba0:	4630      	mov	r0, r6
 800cba2:	4639      	mov	r1, r7
 800cba4:	f7f4 fa3e 	bl	8001024 <__aeabi_d2lz>
 800cba8:	f7f3 fc68 	bl	800047c <__aeabi_l2d>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	f7f3 fad8 	bl	8000168 <__aeabi_dsub>
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4602      	mov	r2, r0
 800cbbc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cbc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbc6:	ea46 060a 	orr.w	r6, r6, sl
 800cbca:	431e      	orrs	r6, r3
 800cbcc:	d069      	beq.n	800cca2 <_strtod_l+0xb72>
 800cbce:	a30a      	add	r3, pc, #40	@ (adr r3, 800cbf8 <_strtod_l+0xac8>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	f7f3 fef2 	bl	80009bc <__aeabi_dcmplt>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	f47f accf 	bne.w	800c57c <_strtod_l+0x44c>
 800cbde:	a308      	add	r3, pc, #32	@ (adr r3, 800cc00 <_strtod_l+0xad0>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbe8:	f7f3 ff06 	bl	80009f8 <__aeabi_dcmpgt>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d093      	beq.n	800cb18 <_strtod_l+0x9e8>
 800cbf0:	e4c4      	b.n	800c57c <_strtod_l+0x44c>
 800cbf2:	bf00      	nop
 800cbf4:	f3af 8000 	nop.w
 800cbf8:	94a03595 	.word	0x94a03595
 800cbfc:	3fdfffff 	.word	0x3fdfffff
 800cc00:	35afe535 	.word	0x35afe535
 800cc04:	3fe00000 	.word	0x3fe00000
 800cc08:	000fffff 	.word	0x000fffff
 800cc0c:	7ff00000 	.word	0x7ff00000
 800cc10:	7fefffff 	.word	0x7fefffff
 800cc14:	3ff00000 	.word	0x3ff00000
 800cc18:	3fe00000 	.word	0x3fe00000
 800cc1c:	7fe00000 	.word	0x7fe00000
 800cc20:	7c9fffff 	.word	0x7c9fffff
 800cc24:	bff00000 	.word	0xbff00000
 800cc28:	9b08      	ldr	r3, [sp, #32]
 800cc2a:	b323      	cbz	r3, 800cc76 <_strtod_l+0xb46>
 800cc2c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cc30:	d821      	bhi.n	800cc76 <_strtod_l+0xb46>
 800cc32:	a327      	add	r3, pc, #156	@ (adr r3, 800ccd0 <_strtod_l+0xba0>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	4630      	mov	r0, r6
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	f7f3 fec8 	bl	80009d0 <__aeabi_dcmple>
 800cc40:	b1a0      	cbz	r0, 800cc6c <_strtod_l+0xb3c>
 800cc42:	4639      	mov	r1, r7
 800cc44:	4630      	mov	r0, r6
 800cc46:	f7f3 ff1f 	bl	8000a88 <__aeabi_d2uiz>
 800cc4a:	2801      	cmp	r0, #1
 800cc4c:	bf38      	it	cc
 800cc4e:	2001      	movcc	r0, #1
 800cc50:	f7f3 fbc8 	bl	80003e4 <__aeabi_ui2d>
 800cc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc56:	4606      	mov	r6, r0
 800cc58:	460f      	mov	r7, r1
 800cc5a:	b9fb      	cbnz	r3, 800cc9c <_strtod_l+0xb6c>
 800cc5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc60:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc62:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc6e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc72:	1b5b      	subs	r3, r3, r5
 800cc74:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc7e:	f7ff f8ff 	bl	800be80 <__ulp>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4650      	mov	r0, sl
 800cc88:	4659      	mov	r1, fp
 800cc8a:	f7f3 fc25 	bl	80004d8 <__aeabi_dmul>
 800cc8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc92:	f7f3 fa6b 	bl	800016c <__adddf3>
 800cc96:	4682      	mov	sl, r0
 800cc98:	468b      	mov	fp, r1
 800cc9a:	e776      	b.n	800cb8a <_strtod_l+0xa5a>
 800cc9c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cca0:	e7e0      	b.n	800cc64 <_strtod_l+0xb34>
 800cca2:	a30d      	add	r3, pc, #52	@ (adr r3, 800ccd8 <_strtod_l+0xba8>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	f7f3 fe88 	bl	80009bc <__aeabi_dcmplt>
 800ccac:	e79e      	b.n	800cbec <_strtod_l+0xabc>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccb4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	f7ff ba77 	b.w	800c1aa <_strtod_l+0x7a>
 800ccbc:	2a65      	cmp	r2, #101	@ 0x65
 800ccbe:	f43f ab6e 	beq.w	800c39e <_strtod_l+0x26e>
 800ccc2:	2a45      	cmp	r2, #69	@ 0x45
 800ccc4:	f43f ab6b 	beq.w	800c39e <_strtod_l+0x26e>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	f7ff bba6 	b.w	800c41a <_strtod_l+0x2ea>
 800ccce:	bf00      	nop
 800ccd0:	ffc00000 	.word	0xffc00000
 800ccd4:	41dfffff 	.word	0x41dfffff
 800ccd8:	94a03595 	.word	0x94a03595
 800ccdc:	3fcfffff 	.word	0x3fcfffff

0800cce0 <_strtod_r>:
 800cce0:	4b01      	ldr	r3, [pc, #4]	@ (800cce8 <_strtod_r+0x8>)
 800cce2:	f7ff ba25 	b.w	800c130 <_strtod_l>
 800cce6:	bf00      	nop
 800cce8:	2000006c 	.word	0x2000006c

0800ccec <__ssputs_r>:
 800ccec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf0:	461f      	mov	r7, r3
 800ccf2:	688e      	ldr	r6, [r1, #8]
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	42be      	cmp	r6, r7
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	4690      	mov	r8, r2
 800ccfc:	680b      	ldr	r3, [r1, #0]
 800ccfe:	d82d      	bhi.n	800cd5c <__ssputs_r+0x70>
 800cd00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd08:	d026      	beq.n	800cd58 <__ssputs_r+0x6c>
 800cd0a:	6965      	ldr	r5, [r4, #20]
 800cd0c:	6909      	ldr	r1, [r1, #16]
 800cd0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd12:	eba3 0901 	sub.w	r9, r3, r1
 800cd16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd1a:	1c7b      	adds	r3, r7, #1
 800cd1c:	444b      	add	r3, r9
 800cd1e:	106d      	asrs	r5, r5, #1
 800cd20:	429d      	cmp	r5, r3
 800cd22:	bf38      	it	cc
 800cd24:	461d      	movcc	r5, r3
 800cd26:	0553      	lsls	r3, r2, #21
 800cd28:	d527      	bpl.n	800cd7a <__ssputs_r+0x8e>
 800cd2a:	4629      	mov	r1, r5
 800cd2c:	f7fe fcaa 	bl	800b684 <_malloc_r>
 800cd30:	4606      	mov	r6, r0
 800cd32:	b360      	cbz	r0, 800cd8e <__ssputs_r+0xa2>
 800cd34:	464a      	mov	r2, r9
 800cd36:	6921      	ldr	r1, [r4, #16]
 800cd38:	f7fd fdcd 	bl	800a8d6 <memcpy>
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	6126      	str	r6, [r4, #16]
 800cd4a:	444e      	add	r6, r9
 800cd4c:	6026      	str	r6, [r4, #0]
 800cd4e:	463e      	mov	r6, r7
 800cd50:	6165      	str	r5, [r4, #20]
 800cd52:	eba5 0509 	sub.w	r5, r5, r9
 800cd56:	60a5      	str	r5, [r4, #8]
 800cd58:	42be      	cmp	r6, r7
 800cd5a:	d900      	bls.n	800cd5e <__ssputs_r+0x72>
 800cd5c:	463e      	mov	r6, r7
 800cd5e:	4632      	mov	r2, r6
 800cd60:	4641      	mov	r1, r8
 800cd62:	6820      	ldr	r0, [r4, #0]
 800cd64:	f000 fb63 	bl	800d42e <memmove>
 800cd68:	2000      	movs	r0, #0
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	1b9b      	subs	r3, r3, r6
 800cd6e:	60a3      	str	r3, [r4, #8]
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	4433      	add	r3, r6
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	f000 ff27 	bl	800dbce <_realloc_r>
 800cd80:	4606      	mov	r6, r0
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d1e0      	bne.n	800cd48 <__ssputs_r+0x5c>
 800cd86:	4650      	mov	r0, sl
 800cd88:	6921      	ldr	r1, [r4, #16]
 800cd8a:	f7fe fc09 	bl	800b5a0 <_free_r>
 800cd8e:	230c      	movs	r3, #12
 800cd90:	f8ca 3000 	str.w	r3, [sl]
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	e7e9      	b.n	800cd76 <__ssputs_r+0x8a>
	...

0800cda4 <_svfiprintf_r>:
 800cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda8:	4698      	mov	r8, r3
 800cdaa:	898b      	ldrh	r3, [r1, #12]
 800cdac:	4607      	mov	r7, r0
 800cdae:	061b      	lsls	r3, r3, #24
 800cdb0:	460d      	mov	r5, r1
 800cdb2:	4614      	mov	r4, r2
 800cdb4:	b09d      	sub	sp, #116	@ 0x74
 800cdb6:	d510      	bpl.n	800cdda <_svfiprintf_r+0x36>
 800cdb8:	690b      	ldr	r3, [r1, #16]
 800cdba:	b973      	cbnz	r3, 800cdda <_svfiprintf_r+0x36>
 800cdbc:	2140      	movs	r1, #64	@ 0x40
 800cdbe:	f7fe fc61 	bl	800b684 <_malloc_r>
 800cdc2:	6028      	str	r0, [r5, #0]
 800cdc4:	6128      	str	r0, [r5, #16]
 800cdc6:	b930      	cbnz	r0, 800cdd6 <_svfiprintf_r+0x32>
 800cdc8:	230c      	movs	r3, #12
 800cdca:	603b      	str	r3, [r7, #0]
 800cdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd0:	b01d      	add	sp, #116	@ 0x74
 800cdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd6:	2340      	movs	r3, #64	@ 0x40
 800cdd8:	616b      	str	r3, [r5, #20]
 800cdda:	2300      	movs	r3, #0
 800cddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdde:	2320      	movs	r3, #32
 800cde0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cde4:	2330      	movs	r3, #48	@ 0x30
 800cde6:	f04f 0901 	mov.w	r9, #1
 800cdea:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cf88 <_svfiprintf_r+0x1e4>
 800cdf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdf6:	4623      	mov	r3, r4
 800cdf8:	469a      	mov	sl, r3
 800cdfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdfe:	b10a      	cbz	r2, 800ce04 <_svfiprintf_r+0x60>
 800ce00:	2a25      	cmp	r2, #37	@ 0x25
 800ce02:	d1f9      	bne.n	800cdf8 <_svfiprintf_r+0x54>
 800ce04:	ebba 0b04 	subs.w	fp, sl, r4
 800ce08:	d00b      	beq.n	800ce22 <_svfiprintf_r+0x7e>
 800ce0a:	465b      	mov	r3, fp
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	4629      	mov	r1, r5
 800ce10:	4638      	mov	r0, r7
 800ce12:	f7ff ff6b 	bl	800ccec <__ssputs_r>
 800ce16:	3001      	adds	r0, #1
 800ce18:	f000 80a7 	beq.w	800cf6a <_svfiprintf_r+0x1c6>
 800ce1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce1e:	445a      	add	r2, fp
 800ce20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce22:	f89a 3000 	ldrb.w	r3, [sl]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f000 809f 	beq.w	800cf6a <_svfiprintf_r+0x1c6>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce36:	f10a 0a01 	add.w	sl, sl, #1
 800ce3a:	9304      	str	r3, [sp, #16]
 800ce3c:	9307      	str	r3, [sp, #28]
 800ce3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce42:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce44:	4654      	mov	r4, sl
 800ce46:	2205      	movs	r2, #5
 800ce48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4c:	484e      	ldr	r0, [pc, #312]	@ (800cf88 <_svfiprintf_r+0x1e4>)
 800ce4e:	f7fd fd34 	bl	800a8ba <memchr>
 800ce52:	9a04      	ldr	r2, [sp, #16]
 800ce54:	b9d8      	cbnz	r0, 800ce8e <_svfiprintf_r+0xea>
 800ce56:	06d0      	lsls	r0, r2, #27
 800ce58:	bf44      	itt	mi
 800ce5a:	2320      	movmi	r3, #32
 800ce5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce60:	0711      	lsls	r1, r2, #28
 800ce62:	bf44      	itt	mi
 800ce64:	232b      	movmi	r3, #43	@ 0x2b
 800ce66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce70:	d015      	beq.n	800ce9e <_svfiprintf_r+0xfa>
 800ce72:	4654      	mov	r4, sl
 800ce74:	2000      	movs	r0, #0
 800ce76:	f04f 0c0a 	mov.w	ip, #10
 800ce7a:	9a07      	ldr	r2, [sp, #28]
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce82:	3b30      	subs	r3, #48	@ 0x30
 800ce84:	2b09      	cmp	r3, #9
 800ce86:	d94b      	bls.n	800cf20 <_svfiprintf_r+0x17c>
 800ce88:	b1b0      	cbz	r0, 800ceb8 <_svfiprintf_r+0x114>
 800ce8a:	9207      	str	r2, [sp, #28]
 800ce8c:	e014      	b.n	800ceb8 <_svfiprintf_r+0x114>
 800ce8e:	eba0 0308 	sub.w	r3, r0, r8
 800ce92:	fa09 f303 	lsl.w	r3, r9, r3
 800ce96:	4313      	orrs	r3, r2
 800ce98:	46a2      	mov	sl, r4
 800ce9a:	9304      	str	r3, [sp, #16]
 800ce9c:	e7d2      	b.n	800ce44 <_svfiprintf_r+0xa0>
 800ce9e:	9b03      	ldr	r3, [sp, #12]
 800cea0:	1d19      	adds	r1, r3, #4
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	9103      	str	r1, [sp, #12]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	bfbb      	ittet	lt
 800ceaa:	425b      	neglt	r3, r3
 800ceac:	f042 0202 	orrlt.w	r2, r2, #2
 800ceb0:	9307      	strge	r3, [sp, #28]
 800ceb2:	9307      	strlt	r3, [sp, #28]
 800ceb4:	bfb8      	it	lt
 800ceb6:	9204      	strlt	r2, [sp, #16]
 800ceb8:	7823      	ldrb	r3, [r4, #0]
 800ceba:	2b2e      	cmp	r3, #46	@ 0x2e
 800cebc:	d10a      	bne.n	800ced4 <_svfiprintf_r+0x130>
 800cebe:	7863      	ldrb	r3, [r4, #1]
 800cec0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cec2:	d132      	bne.n	800cf2a <_svfiprintf_r+0x186>
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	3402      	adds	r4, #2
 800cec8:	1d1a      	adds	r2, r3, #4
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	9203      	str	r2, [sp, #12]
 800cece:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ced2:	9305      	str	r3, [sp, #20]
 800ced4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cf8c <_svfiprintf_r+0x1e8>
 800ced8:	2203      	movs	r2, #3
 800ceda:	4650      	mov	r0, sl
 800cedc:	7821      	ldrb	r1, [r4, #0]
 800cede:	f7fd fcec 	bl	800a8ba <memchr>
 800cee2:	b138      	cbz	r0, 800cef4 <_svfiprintf_r+0x150>
 800cee4:	2240      	movs	r2, #64	@ 0x40
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	eba0 000a 	sub.w	r0, r0, sl
 800ceec:	4082      	lsls	r2, r0
 800ceee:	4313      	orrs	r3, r2
 800cef0:	3401      	adds	r4, #1
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef8:	2206      	movs	r2, #6
 800cefa:	4825      	ldr	r0, [pc, #148]	@ (800cf90 <_svfiprintf_r+0x1ec>)
 800cefc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf00:	f7fd fcdb 	bl	800a8ba <memchr>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d036      	beq.n	800cf76 <_svfiprintf_r+0x1d2>
 800cf08:	4b22      	ldr	r3, [pc, #136]	@ (800cf94 <_svfiprintf_r+0x1f0>)
 800cf0a:	bb1b      	cbnz	r3, 800cf54 <_svfiprintf_r+0x1b0>
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	3307      	adds	r3, #7
 800cf10:	f023 0307 	bic.w	r3, r3, #7
 800cf14:	3308      	adds	r3, #8
 800cf16:	9303      	str	r3, [sp, #12]
 800cf18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf1a:	4433      	add	r3, r6
 800cf1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf1e:	e76a      	b.n	800cdf6 <_svfiprintf_r+0x52>
 800cf20:	460c      	mov	r4, r1
 800cf22:	2001      	movs	r0, #1
 800cf24:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf28:	e7a8      	b.n	800ce7c <_svfiprintf_r+0xd8>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	f04f 0c0a 	mov.w	ip, #10
 800cf30:	4619      	mov	r1, r3
 800cf32:	3401      	adds	r4, #1
 800cf34:	9305      	str	r3, [sp, #20]
 800cf36:	4620      	mov	r0, r4
 800cf38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf3c:	3a30      	subs	r2, #48	@ 0x30
 800cf3e:	2a09      	cmp	r2, #9
 800cf40:	d903      	bls.n	800cf4a <_svfiprintf_r+0x1a6>
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0c6      	beq.n	800ced4 <_svfiprintf_r+0x130>
 800cf46:	9105      	str	r1, [sp, #20]
 800cf48:	e7c4      	b.n	800ced4 <_svfiprintf_r+0x130>
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf52:	e7f0      	b.n	800cf36 <_svfiprintf_r+0x192>
 800cf54:	ab03      	add	r3, sp, #12
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	462a      	mov	r2, r5
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	4b0e      	ldr	r3, [pc, #56]	@ (800cf98 <_svfiprintf_r+0x1f4>)
 800cf5e:	a904      	add	r1, sp, #16
 800cf60:	f7fc fbcc 	bl	80096fc <_printf_float>
 800cf64:	1c42      	adds	r2, r0, #1
 800cf66:	4606      	mov	r6, r0
 800cf68:	d1d6      	bne.n	800cf18 <_svfiprintf_r+0x174>
 800cf6a:	89ab      	ldrh	r3, [r5, #12]
 800cf6c:	065b      	lsls	r3, r3, #25
 800cf6e:	f53f af2d 	bmi.w	800cdcc <_svfiprintf_r+0x28>
 800cf72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf74:	e72c      	b.n	800cdd0 <_svfiprintf_r+0x2c>
 800cf76:	ab03      	add	r3, sp, #12
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	462a      	mov	r2, r5
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	4b06      	ldr	r3, [pc, #24]	@ (800cf98 <_svfiprintf_r+0x1f4>)
 800cf80:	a904      	add	r1, sp, #16
 800cf82:	f7fc fe59 	bl	8009c38 <_printf_i>
 800cf86:	e7ed      	b.n	800cf64 <_svfiprintf_r+0x1c0>
 800cf88:	0800e320 	.word	0x0800e320
 800cf8c:	0800e326 	.word	0x0800e326
 800cf90:	0800e32a 	.word	0x0800e32a
 800cf94:	080096fd 	.word	0x080096fd
 800cf98:	0800cced 	.word	0x0800cced

0800cf9c <__sfputc_r>:
 800cf9c:	6893      	ldr	r3, [r2, #8]
 800cf9e:	b410      	push	{r4}
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	6093      	str	r3, [r2, #8]
 800cfa6:	da07      	bge.n	800cfb8 <__sfputc_r+0x1c>
 800cfa8:	6994      	ldr	r4, [r2, #24]
 800cfaa:	42a3      	cmp	r3, r4
 800cfac:	db01      	blt.n	800cfb2 <__sfputc_r+0x16>
 800cfae:	290a      	cmp	r1, #10
 800cfb0:	d102      	bne.n	800cfb8 <__sfputc_r+0x1c>
 800cfb2:	bc10      	pop	{r4}
 800cfb4:	f7fd bb05 	b.w	800a5c2 <__swbuf_r>
 800cfb8:	6813      	ldr	r3, [r2, #0]
 800cfba:	1c58      	adds	r0, r3, #1
 800cfbc:	6010      	str	r0, [r2, #0]
 800cfbe:	7019      	strb	r1, [r3, #0]
 800cfc0:	4608      	mov	r0, r1
 800cfc2:	bc10      	pop	{r4}
 800cfc4:	4770      	bx	lr

0800cfc6 <__sfputs_r>:
 800cfc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc8:	4606      	mov	r6, r0
 800cfca:	460f      	mov	r7, r1
 800cfcc:	4614      	mov	r4, r2
 800cfce:	18d5      	adds	r5, r2, r3
 800cfd0:	42ac      	cmp	r4, r5
 800cfd2:	d101      	bne.n	800cfd8 <__sfputs_r+0x12>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e007      	b.n	800cfe8 <__sfputs_r+0x22>
 800cfd8:	463a      	mov	r2, r7
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe0:	f7ff ffdc 	bl	800cf9c <__sfputc_r>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d1f3      	bne.n	800cfd0 <__sfputs_r+0xa>
 800cfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfec <_vfiprintf_r>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	460d      	mov	r5, r1
 800cff2:	4614      	mov	r4, r2
 800cff4:	4698      	mov	r8, r3
 800cff6:	4606      	mov	r6, r0
 800cff8:	b09d      	sub	sp, #116	@ 0x74
 800cffa:	b118      	cbz	r0, 800d004 <_vfiprintf_r+0x18>
 800cffc:	6a03      	ldr	r3, [r0, #32]
 800cffe:	b90b      	cbnz	r3, 800d004 <_vfiprintf_r+0x18>
 800d000:	f7fd f9d6 	bl	800a3b0 <__sinit>
 800d004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	d405      	bmi.n	800d016 <_vfiprintf_r+0x2a>
 800d00a:	89ab      	ldrh	r3, [r5, #12]
 800d00c:	059a      	lsls	r2, r3, #22
 800d00e:	d402      	bmi.n	800d016 <_vfiprintf_r+0x2a>
 800d010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d012:	f7fd fc50 	bl	800a8b6 <__retarget_lock_acquire_recursive>
 800d016:	89ab      	ldrh	r3, [r5, #12]
 800d018:	071b      	lsls	r3, r3, #28
 800d01a:	d501      	bpl.n	800d020 <_vfiprintf_r+0x34>
 800d01c:	692b      	ldr	r3, [r5, #16]
 800d01e:	b99b      	cbnz	r3, 800d048 <_vfiprintf_r+0x5c>
 800d020:	4629      	mov	r1, r5
 800d022:	4630      	mov	r0, r6
 800d024:	f7fd fb0c 	bl	800a640 <__swsetup_r>
 800d028:	b170      	cbz	r0, 800d048 <_vfiprintf_r+0x5c>
 800d02a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d02c:	07dc      	lsls	r4, r3, #31
 800d02e:	d504      	bpl.n	800d03a <_vfiprintf_r+0x4e>
 800d030:	f04f 30ff 	mov.w	r0, #4294967295
 800d034:	b01d      	add	sp, #116	@ 0x74
 800d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03a:	89ab      	ldrh	r3, [r5, #12]
 800d03c:	0598      	lsls	r0, r3, #22
 800d03e:	d4f7      	bmi.n	800d030 <_vfiprintf_r+0x44>
 800d040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d042:	f7fd fc39 	bl	800a8b8 <__retarget_lock_release_recursive>
 800d046:	e7f3      	b.n	800d030 <_vfiprintf_r+0x44>
 800d048:	2300      	movs	r3, #0
 800d04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d04c:	2320      	movs	r3, #32
 800d04e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d052:	2330      	movs	r3, #48	@ 0x30
 800d054:	f04f 0901 	mov.w	r9, #1
 800d058:	f8cd 800c 	str.w	r8, [sp, #12]
 800d05c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d208 <_vfiprintf_r+0x21c>
 800d060:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d064:	4623      	mov	r3, r4
 800d066:	469a      	mov	sl, r3
 800d068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d06c:	b10a      	cbz	r2, 800d072 <_vfiprintf_r+0x86>
 800d06e:	2a25      	cmp	r2, #37	@ 0x25
 800d070:	d1f9      	bne.n	800d066 <_vfiprintf_r+0x7a>
 800d072:	ebba 0b04 	subs.w	fp, sl, r4
 800d076:	d00b      	beq.n	800d090 <_vfiprintf_r+0xa4>
 800d078:	465b      	mov	r3, fp
 800d07a:	4622      	mov	r2, r4
 800d07c:	4629      	mov	r1, r5
 800d07e:	4630      	mov	r0, r6
 800d080:	f7ff ffa1 	bl	800cfc6 <__sfputs_r>
 800d084:	3001      	adds	r0, #1
 800d086:	f000 80a7 	beq.w	800d1d8 <_vfiprintf_r+0x1ec>
 800d08a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d08c:	445a      	add	r2, fp
 800d08e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d090:	f89a 3000 	ldrb.w	r3, [sl]
 800d094:	2b00      	cmp	r3, #0
 800d096:	f000 809f 	beq.w	800d1d8 <_vfiprintf_r+0x1ec>
 800d09a:	2300      	movs	r3, #0
 800d09c:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0a4:	f10a 0a01 	add.w	sl, sl, #1
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	9307      	str	r3, [sp, #28]
 800d0ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0b2:	4654      	mov	r4, sl
 800d0b4:	2205      	movs	r2, #5
 800d0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ba:	4853      	ldr	r0, [pc, #332]	@ (800d208 <_vfiprintf_r+0x21c>)
 800d0bc:	f7fd fbfd 	bl	800a8ba <memchr>
 800d0c0:	9a04      	ldr	r2, [sp, #16]
 800d0c2:	b9d8      	cbnz	r0, 800d0fc <_vfiprintf_r+0x110>
 800d0c4:	06d1      	lsls	r1, r2, #27
 800d0c6:	bf44      	itt	mi
 800d0c8:	2320      	movmi	r3, #32
 800d0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0ce:	0713      	lsls	r3, r2, #28
 800d0d0:	bf44      	itt	mi
 800d0d2:	232b      	movmi	r3, #43	@ 0x2b
 800d0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0de:	d015      	beq.n	800d10c <_vfiprintf_r+0x120>
 800d0e0:	4654      	mov	r4, sl
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	f04f 0c0a 	mov.w	ip, #10
 800d0e8:	9a07      	ldr	r2, [sp, #28]
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0f0:	3b30      	subs	r3, #48	@ 0x30
 800d0f2:	2b09      	cmp	r3, #9
 800d0f4:	d94b      	bls.n	800d18e <_vfiprintf_r+0x1a2>
 800d0f6:	b1b0      	cbz	r0, 800d126 <_vfiprintf_r+0x13a>
 800d0f8:	9207      	str	r2, [sp, #28]
 800d0fa:	e014      	b.n	800d126 <_vfiprintf_r+0x13a>
 800d0fc:	eba0 0308 	sub.w	r3, r0, r8
 800d100:	fa09 f303 	lsl.w	r3, r9, r3
 800d104:	4313      	orrs	r3, r2
 800d106:	46a2      	mov	sl, r4
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	e7d2      	b.n	800d0b2 <_vfiprintf_r+0xc6>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	1d19      	adds	r1, r3, #4
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	9103      	str	r1, [sp, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	bfbb      	ittet	lt
 800d118:	425b      	neglt	r3, r3
 800d11a:	f042 0202 	orrlt.w	r2, r2, #2
 800d11e:	9307      	strge	r3, [sp, #28]
 800d120:	9307      	strlt	r3, [sp, #28]
 800d122:	bfb8      	it	lt
 800d124:	9204      	strlt	r2, [sp, #16]
 800d126:	7823      	ldrb	r3, [r4, #0]
 800d128:	2b2e      	cmp	r3, #46	@ 0x2e
 800d12a:	d10a      	bne.n	800d142 <_vfiprintf_r+0x156>
 800d12c:	7863      	ldrb	r3, [r4, #1]
 800d12e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d130:	d132      	bne.n	800d198 <_vfiprintf_r+0x1ac>
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	3402      	adds	r4, #2
 800d136:	1d1a      	adds	r2, r3, #4
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	9203      	str	r2, [sp, #12]
 800d13c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d140:	9305      	str	r3, [sp, #20]
 800d142:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d20c <_vfiprintf_r+0x220>
 800d146:	2203      	movs	r2, #3
 800d148:	4650      	mov	r0, sl
 800d14a:	7821      	ldrb	r1, [r4, #0]
 800d14c:	f7fd fbb5 	bl	800a8ba <memchr>
 800d150:	b138      	cbz	r0, 800d162 <_vfiprintf_r+0x176>
 800d152:	2240      	movs	r2, #64	@ 0x40
 800d154:	9b04      	ldr	r3, [sp, #16]
 800d156:	eba0 000a 	sub.w	r0, r0, sl
 800d15a:	4082      	lsls	r2, r0
 800d15c:	4313      	orrs	r3, r2
 800d15e:	3401      	adds	r4, #1
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d166:	2206      	movs	r2, #6
 800d168:	4829      	ldr	r0, [pc, #164]	@ (800d210 <_vfiprintf_r+0x224>)
 800d16a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d16e:	f7fd fba4 	bl	800a8ba <memchr>
 800d172:	2800      	cmp	r0, #0
 800d174:	d03f      	beq.n	800d1f6 <_vfiprintf_r+0x20a>
 800d176:	4b27      	ldr	r3, [pc, #156]	@ (800d214 <_vfiprintf_r+0x228>)
 800d178:	bb1b      	cbnz	r3, 800d1c2 <_vfiprintf_r+0x1d6>
 800d17a:	9b03      	ldr	r3, [sp, #12]
 800d17c:	3307      	adds	r3, #7
 800d17e:	f023 0307 	bic.w	r3, r3, #7
 800d182:	3308      	adds	r3, #8
 800d184:	9303      	str	r3, [sp, #12]
 800d186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d188:	443b      	add	r3, r7
 800d18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d18c:	e76a      	b.n	800d064 <_vfiprintf_r+0x78>
 800d18e:	460c      	mov	r4, r1
 800d190:	2001      	movs	r0, #1
 800d192:	fb0c 3202 	mla	r2, ip, r2, r3
 800d196:	e7a8      	b.n	800d0ea <_vfiprintf_r+0xfe>
 800d198:	2300      	movs	r3, #0
 800d19a:	f04f 0c0a 	mov.w	ip, #10
 800d19e:	4619      	mov	r1, r3
 800d1a0:	3401      	adds	r4, #1
 800d1a2:	9305      	str	r3, [sp, #20]
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1aa:	3a30      	subs	r2, #48	@ 0x30
 800d1ac:	2a09      	cmp	r2, #9
 800d1ae:	d903      	bls.n	800d1b8 <_vfiprintf_r+0x1cc>
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d0c6      	beq.n	800d142 <_vfiprintf_r+0x156>
 800d1b4:	9105      	str	r1, [sp, #20]
 800d1b6:	e7c4      	b.n	800d142 <_vfiprintf_r+0x156>
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1c0:	e7f0      	b.n	800d1a4 <_vfiprintf_r+0x1b8>
 800d1c2:	ab03      	add	r3, sp, #12
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	462a      	mov	r2, r5
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	4b13      	ldr	r3, [pc, #76]	@ (800d218 <_vfiprintf_r+0x22c>)
 800d1cc:	a904      	add	r1, sp, #16
 800d1ce:	f7fc fa95 	bl	80096fc <_printf_float>
 800d1d2:	4607      	mov	r7, r0
 800d1d4:	1c78      	adds	r0, r7, #1
 800d1d6:	d1d6      	bne.n	800d186 <_vfiprintf_r+0x19a>
 800d1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1da:	07d9      	lsls	r1, r3, #31
 800d1dc:	d405      	bmi.n	800d1ea <_vfiprintf_r+0x1fe>
 800d1de:	89ab      	ldrh	r3, [r5, #12]
 800d1e0:	059a      	lsls	r2, r3, #22
 800d1e2:	d402      	bmi.n	800d1ea <_vfiprintf_r+0x1fe>
 800d1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1e6:	f7fd fb67 	bl	800a8b8 <__retarget_lock_release_recursive>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	065b      	lsls	r3, r3, #25
 800d1ee:	f53f af1f 	bmi.w	800d030 <_vfiprintf_r+0x44>
 800d1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1f4:	e71e      	b.n	800d034 <_vfiprintf_r+0x48>
 800d1f6:	ab03      	add	r3, sp, #12
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	462a      	mov	r2, r5
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4b06      	ldr	r3, [pc, #24]	@ (800d218 <_vfiprintf_r+0x22c>)
 800d200:	a904      	add	r1, sp, #16
 800d202:	f7fc fd19 	bl	8009c38 <_printf_i>
 800d206:	e7e4      	b.n	800d1d2 <_vfiprintf_r+0x1e6>
 800d208:	0800e320 	.word	0x0800e320
 800d20c:	0800e326 	.word	0x0800e326
 800d210:	0800e32a 	.word	0x0800e32a
 800d214:	080096fd 	.word	0x080096fd
 800d218:	0800cfc7 	.word	0x0800cfc7

0800d21c <__sflush_r>:
 800d21c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	0716      	lsls	r6, r2, #28
 800d224:	4605      	mov	r5, r0
 800d226:	460c      	mov	r4, r1
 800d228:	d454      	bmi.n	800d2d4 <__sflush_r+0xb8>
 800d22a:	684b      	ldr	r3, [r1, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dc02      	bgt.n	800d236 <__sflush_r+0x1a>
 800d230:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d232:	2b00      	cmp	r3, #0
 800d234:	dd48      	ble.n	800d2c8 <__sflush_r+0xac>
 800d236:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d238:	2e00      	cmp	r6, #0
 800d23a:	d045      	beq.n	800d2c8 <__sflush_r+0xac>
 800d23c:	2300      	movs	r3, #0
 800d23e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d242:	682f      	ldr	r7, [r5, #0]
 800d244:	6a21      	ldr	r1, [r4, #32]
 800d246:	602b      	str	r3, [r5, #0]
 800d248:	d030      	beq.n	800d2ac <__sflush_r+0x90>
 800d24a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	0759      	lsls	r1, r3, #29
 800d250:	d505      	bpl.n	800d25e <__sflush_r+0x42>
 800d252:	6863      	ldr	r3, [r4, #4]
 800d254:	1ad2      	subs	r2, r2, r3
 800d256:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d258:	b10b      	cbz	r3, 800d25e <__sflush_r+0x42>
 800d25a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d25c:	1ad2      	subs	r2, r2, r3
 800d25e:	2300      	movs	r3, #0
 800d260:	4628      	mov	r0, r5
 800d262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d264:	6a21      	ldr	r1, [r4, #32]
 800d266:	47b0      	blx	r6
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	89a3      	ldrh	r3, [r4, #12]
 800d26c:	d106      	bne.n	800d27c <__sflush_r+0x60>
 800d26e:	6829      	ldr	r1, [r5, #0]
 800d270:	291d      	cmp	r1, #29
 800d272:	d82b      	bhi.n	800d2cc <__sflush_r+0xb0>
 800d274:	4a28      	ldr	r2, [pc, #160]	@ (800d318 <__sflush_r+0xfc>)
 800d276:	410a      	asrs	r2, r1
 800d278:	07d6      	lsls	r6, r2, #31
 800d27a:	d427      	bmi.n	800d2cc <__sflush_r+0xb0>
 800d27c:	2200      	movs	r2, #0
 800d27e:	6062      	str	r2, [r4, #4]
 800d280:	6922      	ldr	r2, [r4, #16]
 800d282:	04d9      	lsls	r1, r3, #19
 800d284:	6022      	str	r2, [r4, #0]
 800d286:	d504      	bpl.n	800d292 <__sflush_r+0x76>
 800d288:	1c42      	adds	r2, r0, #1
 800d28a:	d101      	bne.n	800d290 <__sflush_r+0x74>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	b903      	cbnz	r3, 800d292 <__sflush_r+0x76>
 800d290:	6560      	str	r0, [r4, #84]	@ 0x54
 800d292:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d294:	602f      	str	r7, [r5, #0]
 800d296:	b1b9      	cbz	r1, 800d2c8 <__sflush_r+0xac>
 800d298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d29c:	4299      	cmp	r1, r3
 800d29e:	d002      	beq.n	800d2a6 <__sflush_r+0x8a>
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	f7fe f97d 	bl	800b5a0 <_free_r>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2aa:	e00d      	b.n	800d2c8 <__sflush_r+0xac>
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b0      	blx	r6
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	1c50      	adds	r0, r2, #1
 800d2b6:	d1c9      	bne.n	800d24c <__sflush_r+0x30>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d0c6      	beq.n	800d24c <__sflush_r+0x30>
 800d2be:	2b1d      	cmp	r3, #29
 800d2c0:	d001      	beq.n	800d2c6 <__sflush_r+0xaa>
 800d2c2:	2b16      	cmp	r3, #22
 800d2c4:	d11d      	bne.n	800d302 <__sflush_r+0xe6>
 800d2c6:	602f      	str	r7, [r5, #0]
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	e021      	b.n	800d310 <__sflush_r+0xf4>
 800d2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2d0:	b21b      	sxth	r3, r3
 800d2d2:	e01a      	b.n	800d30a <__sflush_r+0xee>
 800d2d4:	690f      	ldr	r7, [r1, #16]
 800d2d6:	2f00      	cmp	r7, #0
 800d2d8:	d0f6      	beq.n	800d2c8 <__sflush_r+0xac>
 800d2da:	0793      	lsls	r3, r2, #30
 800d2dc:	bf18      	it	ne
 800d2de:	2300      	movne	r3, #0
 800d2e0:	680e      	ldr	r6, [r1, #0]
 800d2e2:	bf08      	it	eq
 800d2e4:	694b      	ldreq	r3, [r1, #20]
 800d2e6:	1bf6      	subs	r6, r6, r7
 800d2e8:	600f      	str	r7, [r1, #0]
 800d2ea:	608b      	str	r3, [r1, #8]
 800d2ec:	2e00      	cmp	r6, #0
 800d2ee:	ddeb      	ble.n	800d2c8 <__sflush_r+0xac>
 800d2f0:	4633      	mov	r3, r6
 800d2f2:	463a      	mov	r2, r7
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	6a21      	ldr	r1, [r4, #32]
 800d2f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d2fc:	47e0      	blx	ip
 800d2fe:	2800      	cmp	r0, #0
 800d300:	dc07      	bgt.n	800d312 <__sflush_r+0xf6>
 800d302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d30a:	f04f 30ff 	mov.w	r0, #4294967295
 800d30e:	81a3      	strh	r3, [r4, #12]
 800d310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d312:	4407      	add	r7, r0
 800d314:	1a36      	subs	r6, r6, r0
 800d316:	e7e9      	b.n	800d2ec <__sflush_r+0xd0>
 800d318:	dfbffffe 	.word	0xdfbffffe

0800d31c <_fflush_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	690b      	ldr	r3, [r1, #16]
 800d320:	4605      	mov	r5, r0
 800d322:	460c      	mov	r4, r1
 800d324:	b913      	cbnz	r3, 800d32c <_fflush_r+0x10>
 800d326:	2500      	movs	r5, #0
 800d328:	4628      	mov	r0, r5
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	b118      	cbz	r0, 800d336 <_fflush_r+0x1a>
 800d32e:	6a03      	ldr	r3, [r0, #32]
 800d330:	b90b      	cbnz	r3, 800d336 <_fflush_r+0x1a>
 800d332:	f7fd f83d 	bl	800a3b0 <__sinit>
 800d336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d0f3      	beq.n	800d326 <_fflush_r+0xa>
 800d33e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d340:	07d0      	lsls	r0, r2, #31
 800d342:	d404      	bmi.n	800d34e <_fflush_r+0x32>
 800d344:	0599      	lsls	r1, r3, #22
 800d346:	d402      	bmi.n	800d34e <_fflush_r+0x32>
 800d348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d34a:	f7fd fab4 	bl	800a8b6 <__retarget_lock_acquire_recursive>
 800d34e:	4628      	mov	r0, r5
 800d350:	4621      	mov	r1, r4
 800d352:	f7ff ff63 	bl	800d21c <__sflush_r>
 800d356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d358:	4605      	mov	r5, r0
 800d35a:	07da      	lsls	r2, r3, #31
 800d35c:	d4e4      	bmi.n	800d328 <_fflush_r+0xc>
 800d35e:	89a3      	ldrh	r3, [r4, #12]
 800d360:	059b      	lsls	r3, r3, #22
 800d362:	d4e1      	bmi.n	800d328 <_fflush_r+0xc>
 800d364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d366:	f7fd faa7 	bl	800a8b8 <__retarget_lock_release_recursive>
 800d36a:	e7dd      	b.n	800d328 <_fflush_r+0xc>

0800d36c <__swhatbuf_r>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	460c      	mov	r4, r1
 800d370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d374:	4615      	mov	r5, r2
 800d376:	2900      	cmp	r1, #0
 800d378:	461e      	mov	r6, r3
 800d37a:	b096      	sub	sp, #88	@ 0x58
 800d37c:	da0c      	bge.n	800d398 <__swhatbuf_r+0x2c>
 800d37e:	89a3      	ldrh	r3, [r4, #12]
 800d380:	2100      	movs	r1, #0
 800d382:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d386:	bf14      	ite	ne
 800d388:	2340      	movne	r3, #64	@ 0x40
 800d38a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d38e:	2000      	movs	r0, #0
 800d390:	6031      	str	r1, [r6, #0]
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	b016      	add	sp, #88	@ 0x58
 800d396:	bd70      	pop	{r4, r5, r6, pc}
 800d398:	466a      	mov	r2, sp
 800d39a:	f000 f863 	bl	800d464 <_fstat_r>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	dbed      	blt.n	800d37e <__swhatbuf_r+0x12>
 800d3a2:	9901      	ldr	r1, [sp, #4]
 800d3a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3ac:	4259      	negs	r1, r3
 800d3ae:	4159      	adcs	r1, r3
 800d3b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3b4:	e7eb      	b.n	800d38e <__swhatbuf_r+0x22>

0800d3b6 <__smakebuf_r>:
 800d3b6:	898b      	ldrh	r3, [r1, #12]
 800d3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ba:	079d      	lsls	r5, r3, #30
 800d3bc:	4606      	mov	r6, r0
 800d3be:	460c      	mov	r4, r1
 800d3c0:	d507      	bpl.n	800d3d2 <__smakebuf_r+0x1c>
 800d3c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3c6:	6023      	str	r3, [r4, #0]
 800d3c8:	6123      	str	r3, [r4, #16]
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	6163      	str	r3, [r4, #20]
 800d3ce:	b003      	add	sp, #12
 800d3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3d2:	466a      	mov	r2, sp
 800d3d4:	ab01      	add	r3, sp, #4
 800d3d6:	f7ff ffc9 	bl	800d36c <__swhatbuf_r>
 800d3da:	9f00      	ldr	r7, [sp, #0]
 800d3dc:	4605      	mov	r5, r0
 800d3de:	4639      	mov	r1, r7
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f7fe f94f 	bl	800b684 <_malloc_r>
 800d3e6:	b948      	cbnz	r0, 800d3fc <__smakebuf_r+0x46>
 800d3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ec:	059a      	lsls	r2, r3, #22
 800d3ee:	d4ee      	bmi.n	800d3ce <__smakebuf_r+0x18>
 800d3f0:	f023 0303 	bic.w	r3, r3, #3
 800d3f4:	f043 0302 	orr.w	r3, r3, #2
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	e7e2      	b.n	800d3c2 <__smakebuf_r+0xc>
 800d3fc:	89a3      	ldrh	r3, [r4, #12]
 800d3fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d406:	81a3      	strh	r3, [r4, #12]
 800d408:	9b01      	ldr	r3, [sp, #4]
 800d40a:	6020      	str	r0, [r4, #0]
 800d40c:	b15b      	cbz	r3, 800d426 <__smakebuf_r+0x70>
 800d40e:	4630      	mov	r0, r6
 800d410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d414:	f000 f838 	bl	800d488 <_isatty_r>
 800d418:	b128      	cbz	r0, 800d426 <__smakebuf_r+0x70>
 800d41a:	89a3      	ldrh	r3, [r4, #12]
 800d41c:	f023 0303 	bic.w	r3, r3, #3
 800d420:	f043 0301 	orr.w	r3, r3, #1
 800d424:	81a3      	strh	r3, [r4, #12]
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	431d      	orrs	r5, r3
 800d42a:	81a5      	strh	r5, [r4, #12]
 800d42c:	e7cf      	b.n	800d3ce <__smakebuf_r+0x18>

0800d42e <memmove>:
 800d42e:	4288      	cmp	r0, r1
 800d430:	b510      	push	{r4, lr}
 800d432:	eb01 0402 	add.w	r4, r1, r2
 800d436:	d902      	bls.n	800d43e <memmove+0x10>
 800d438:	4284      	cmp	r4, r0
 800d43a:	4623      	mov	r3, r4
 800d43c:	d807      	bhi.n	800d44e <memmove+0x20>
 800d43e:	1e43      	subs	r3, r0, #1
 800d440:	42a1      	cmp	r1, r4
 800d442:	d008      	beq.n	800d456 <memmove+0x28>
 800d444:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d448:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d44c:	e7f8      	b.n	800d440 <memmove+0x12>
 800d44e:	4601      	mov	r1, r0
 800d450:	4402      	add	r2, r0
 800d452:	428a      	cmp	r2, r1
 800d454:	d100      	bne.n	800d458 <memmove+0x2a>
 800d456:	bd10      	pop	{r4, pc}
 800d458:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d45c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d460:	e7f7      	b.n	800d452 <memmove+0x24>
	...

0800d464 <_fstat_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	2300      	movs	r3, #0
 800d468:	4d06      	ldr	r5, [pc, #24]	@ (800d484 <_fstat_r+0x20>)
 800d46a:	4604      	mov	r4, r0
 800d46c:	4608      	mov	r0, r1
 800d46e:	4611      	mov	r1, r2
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	f7f4 fd17 	bl	8001ea4 <_fstat>
 800d476:	1c43      	adds	r3, r0, #1
 800d478:	d102      	bne.n	800d480 <_fstat_r+0x1c>
 800d47a:	682b      	ldr	r3, [r5, #0]
 800d47c:	b103      	cbz	r3, 800d480 <_fstat_r+0x1c>
 800d47e:	6023      	str	r3, [r4, #0]
 800d480:	bd38      	pop	{r3, r4, r5, pc}
 800d482:	bf00      	nop
 800d484:	20002378 	.word	0x20002378

0800d488 <_isatty_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	2300      	movs	r3, #0
 800d48c:	4d05      	ldr	r5, [pc, #20]	@ (800d4a4 <_isatty_r+0x1c>)
 800d48e:	4604      	mov	r4, r0
 800d490:	4608      	mov	r0, r1
 800d492:	602b      	str	r3, [r5, #0]
 800d494:	f7f4 fd15 	bl	8001ec2 <_isatty>
 800d498:	1c43      	adds	r3, r0, #1
 800d49a:	d102      	bne.n	800d4a2 <_isatty_r+0x1a>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	b103      	cbz	r3, 800d4a2 <_isatty_r+0x1a>
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	20002378 	.word	0x20002378

0800d4a8 <_sbrk_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4d05      	ldr	r5, [pc, #20]	@ (800d4c4 <_sbrk_r+0x1c>)
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	602b      	str	r3, [r5, #0]
 800d4b4:	f7f4 fd1c 	bl	8001ef0 <_sbrk>
 800d4b8:	1c43      	adds	r3, r0, #1
 800d4ba:	d102      	bne.n	800d4c2 <_sbrk_r+0x1a>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	b103      	cbz	r3, 800d4c2 <_sbrk_r+0x1a>
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	bd38      	pop	{r3, r4, r5, pc}
 800d4c4:	20002378 	.word	0x20002378

0800d4c8 <nan>:
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	4901      	ldr	r1, [pc, #4]	@ (800d4d0 <nan+0x8>)
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	7ff80000 	.word	0x7ff80000

0800d4d4 <__assert_func>:
 800d4d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4d6:	4614      	mov	r4, r2
 800d4d8:	461a      	mov	r2, r3
 800d4da:	4b09      	ldr	r3, [pc, #36]	@ (800d500 <__assert_func+0x2c>)
 800d4dc:	4605      	mov	r5, r0
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68d8      	ldr	r0, [r3, #12]
 800d4e2:	b954      	cbnz	r4, 800d4fa <__assert_func+0x26>
 800d4e4:	4b07      	ldr	r3, [pc, #28]	@ (800d504 <__assert_func+0x30>)
 800d4e6:	461c      	mov	r4, r3
 800d4e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4ec:	9100      	str	r1, [sp, #0]
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	4905      	ldr	r1, [pc, #20]	@ (800d508 <__assert_func+0x34>)
 800d4f2:	f000 fba7 	bl	800dc44 <fiprintf>
 800d4f6:	f000 fbb7 	bl	800dc68 <abort>
 800d4fa:	4b04      	ldr	r3, [pc, #16]	@ (800d50c <__assert_func+0x38>)
 800d4fc:	e7f4      	b.n	800d4e8 <__assert_func+0x14>
 800d4fe:	bf00      	nop
 800d500:	2000001c 	.word	0x2000001c
 800d504:	0800e374 	.word	0x0800e374
 800d508:	0800e346 	.word	0x0800e346
 800d50c:	0800e339 	.word	0x0800e339

0800d510 <_calloc_r>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	fba1 5402 	umull	r5, r4, r1, r2
 800d516:	b93c      	cbnz	r4, 800d528 <_calloc_r+0x18>
 800d518:	4629      	mov	r1, r5
 800d51a:	f7fe f8b3 	bl	800b684 <_malloc_r>
 800d51e:	4606      	mov	r6, r0
 800d520:	b928      	cbnz	r0, 800d52e <_calloc_r+0x1e>
 800d522:	2600      	movs	r6, #0
 800d524:	4630      	mov	r0, r6
 800d526:	bd70      	pop	{r4, r5, r6, pc}
 800d528:	220c      	movs	r2, #12
 800d52a:	6002      	str	r2, [r0, #0]
 800d52c:	e7f9      	b.n	800d522 <_calloc_r+0x12>
 800d52e:	462a      	mov	r2, r5
 800d530:	4621      	mov	r1, r4
 800d532:	f7fd f8db 	bl	800a6ec <memset>
 800d536:	e7f5      	b.n	800d524 <_calloc_r+0x14>

0800d538 <rshift>:
 800d538:	6903      	ldr	r3, [r0, #16]
 800d53a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d53e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d542:	f100 0414 	add.w	r4, r0, #20
 800d546:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d54a:	dd46      	ble.n	800d5da <rshift+0xa2>
 800d54c:	f011 011f 	ands.w	r1, r1, #31
 800d550:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d554:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d558:	d10c      	bne.n	800d574 <rshift+0x3c>
 800d55a:	4629      	mov	r1, r5
 800d55c:	f100 0710 	add.w	r7, r0, #16
 800d560:	42b1      	cmp	r1, r6
 800d562:	d335      	bcc.n	800d5d0 <rshift+0x98>
 800d564:	1a9b      	subs	r3, r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	1eea      	subs	r2, r5, #3
 800d56a:	4296      	cmp	r6, r2
 800d56c:	bf38      	it	cc
 800d56e:	2300      	movcc	r3, #0
 800d570:	4423      	add	r3, r4
 800d572:	e015      	b.n	800d5a0 <rshift+0x68>
 800d574:	46a1      	mov	r9, r4
 800d576:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d57a:	f1c1 0820 	rsb	r8, r1, #32
 800d57e:	40cf      	lsrs	r7, r1
 800d580:	f105 0e04 	add.w	lr, r5, #4
 800d584:	4576      	cmp	r6, lr
 800d586:	46f4      	mov	ip, lr
 800d588:	d816      	bhi.n	800d5b8 <rshift+0x80>
 800d58a:	1a9a      	subs	r2, r3, r2
 800d58c:	0092      	lsls	r2, r2, #2
 800d58e:	3a04      	subs	r2, #4
 800d590:	3501      	adds	r5, #1
 800d592:	42ae      	cmp	r6, r5
 800d594:	bf38      	it	cc
 800d596:	2200      	movcc	r2, #0
 800d598:	18a3      	adds	r3, r4, r2
 800d59a:	50a7      	str	r7, [r4, r2]
 800d59c:	b107      	cbz	r7, 800d5a0 <rshift+0x68>
 800d59e:	3304      	adds	r3, #4
 800d5a0:	42a3      	cmp	r3, r4
 800d5a2:	eba3 0204 	sub.w	r2, r3, r4
 800d5a6:	bf08      	it	eq
 800d5a8:	2300      	moveq	r3, #0
 800d5aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d5ae:	6102      	str	r2, [r0, #16]
 800d5b0:	bf08      	it	eq
 800d5b2:	6143      	streq	r3, [r0, #20]
 800d5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5b8:	f8dc c000 	ldr.w	ip, [ip]
 800d5bc:	fa0c fc08 	lsl.w	ip, ip, r8
 800d5c0:	ea4c 0707 	orr.w	r7, ip, r7
 800d5c4:	f849 7b04 	str.w	r7, [r9], #4
 800d5c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5cc:	40cf      	lsrs	r7, r1
 800d5ce:	e7d9      	b.n	800d584 <rshift+0x4c>
 800d5d0:	f851 cb04 	ldr.w	ip, [r1], #4
 800d5d4:	f847 cf04 	str.w	ip, [r7, #4]!
 800d5d8:	e7c2      	b.n	800d560 <rshift+0x28>
 800d5da:	4623      	mov	r3, r4
 800d5dc:	e7e0      	b.n	800d5a0 <rshift+0x68>

0800d5de <__hexdig_fun>:
 800d5de:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d5e2:	2b09      	cmp	r3, #9
 800d5e4:	d802      	bhi.n	800d5ec <__hexdig_fun+0xe>
 800d5e6:	3820      	subs	r0, #32
 800d5e8:	b2c0      	uxtb	r0, r0
 800d5ea:	4770      	bx	lr
 800d5ec:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d5f0:	2b05      	cmp	r3, #5
 800d5f2:	d801      	bhi.n	800d5f8 <__hexdig_fun+0x1a>
 800d5f4:	3847      	subs	r0, #71	@ 0x47
 800d5f6:	e7f7      	b.n	800d5e8 <__hexdig_fun+0xa>
 800d5f8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d5fc:	2b05      	cmp	r3, #5
 800d5fe:	d801      	bhi.n	800d604 <__hexdig_fun+0x26>
 800d600:	3827      	subs	r0, #39	@ 0x27
 800d602:	e7f1      	b.n	800d5e8 <__hexdig_fun+0xa>
 800d604:	2000      	movs	r0, #0
 800d606:	4770      	bx	lr

0800d608 <__gethex>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	468a      	mov	sl, r1
 800d60e:	4690      	mov	r8, r2
 800d610:	b085      	sub	sp, #20
 800d612:	9302      	str	r3, [sp, #8]
 800d614:	680b      	ldr	r3, [r1, #0]
 800d616:	9001      	str	r0, [sp, #4]
 800d618:	1c9c      	adds	r4, r3, #2
 800d61a:	46a1      	mov	r9, r4
 800d61c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d620:	2830      	cmp	r0, #48	@ 0x30
 800d622:	d0fa      	beq.n	800d61a <__gethex+0x12>
 800d624:	eba9 0303 	sub.w	r3, r9, r3
 800d628:	f1a3 0b02 	sub.w	fp, r3, #2
 800d62c:	f7ff ffd7 	bl	800d5de <__hexdig_fun>
 800d630:	4605      	mov	r5, r0
 800d632:	2800      	cmp	r0, #0
 800d634:	d168      	bne.n	800d708 <__gethex+0x100>
 800d636:	2201      	movs	r2, #1
 800d638:	4648      	mov	r0, r9
 800d63a:	499f      	ldr	r1, [pc, #636]	@ (800d8b8 <__gethex+0x2b0>)
 800d63c:	f7fd f85e 	bl	800a6fc <strncmp>
 800d640:	4607      	mov	r7, r0
 800d642:	2800      	cmp	r0, #0
 800d644:	d167      	bne.n	800d716 <__gethex+0x10e>
 800d646:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d64a:	4626      	mov	r6, r4
 800d64c:	f7ff ffc7 	bl	800d5de <__hexdig_fun>
 800d650:	2800      	cmp	r0, #0
 800d652:	d062      	beq.n	800d71a <__gethex+0x112>
 800d654:	4623      	mov	r3, r4
 800d656:	7818      	ldrb	r0, [r3, #0]
 800d658:	4699      	mov	r9, r3
 800d65a:	2830      	cmp	r0, #48	@ 0x30
 800d65c:	f103 0301 	add.w	r3, r3, #1
 800d660:	d0f9      	beq.n	800d656 <__gethex+0x4e>
 800d662:	f7ff ffbc 	bl	800d5de <__hexdig_fun>
 800d666:	fab0 f580 	clz	r5, r0
 800d66a:	f04f 0b01 	mov.w	fp, #1
 800d66e:	096d      	lsrs	r5, r5, #5
 800d670:	464a      	mov	r2, r9
 800d672:	4616      	mov	r6, r2
 800d674:	7830      	ldrb	r0, [r6, #0]
 800d676:	3201      	adds	r2, #1
 800d678:	f7ff ffb1 	bl	800d5de <__hexdig_fun>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d1f8      	bne.n	800d672 <__gethex+0x6a>
 800d680:	2201      	movs	r2, #1
 800d682:	4630      	mov	r0, r6
 800d684:	498c      	ldr	r1, [pc, #560]	@ (800d8b8 <__gethex+0x2b0>)
 800d686:	f7fd f839 	bl	800a6fc <strncmp>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d13f      	bne.n	800d70e <__gethex+0x106>
 800d68e:	b944      	cbnz	r4, 800d6a2 <__gethex+0x9a>
 800d690:	1c74      	adds	r4, r6, #1
 800d692:	4622      	mov	r2, r4
 800d694:	4616      	mov	r6, r2
 800d696:	7830      	ldrb	r0, [r6, #0]
 800d698:	3201      	adds	r2, #1
 800d69a:	f7ff ffa0 	bl	800d5de <__hexdig_fun>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d1f8      	bne.n	800d694 <__gethex+0x8c>
 800d6a2:	1ba4      	subs	r4, r4, r6
 800d6a4:	00a7      	lsls	r7, r4, #2
 800d6a6:	7833      	ldrb	r3, [r6, #0]
 800d6a8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d6ac:	2b50      	cmp	r3, #80	@ 0x50
 800d6ae:	d13e      	bne.n	800d72e <__gethex+0x126>
 800d6b0:	7873      	ldrb	r3, [r6, #1]
 800d6b2:	2b2b      	cmp	r3, #43	@ 0x2b
 800d6b4:	d033      	beq.n	800d71e <__gethex+0x116>
 800d6b6:	2b2d      	cmp	r3, #45	@ 0x2d
 800d6b8:	d034      	beq.n	800d724 <__gethex+0x11c>
 800d6ba:	2400      	movs	r4, #0
 800d6bc:	1c71      	adds	r1, r6, #1
 800d6be:	7808      	ldrb	r0, [r1, #0]
 800d6c0:	f7ff ff8d 	bl	800d5de <__hexdig_fun>
 800d6c4:	1e43      	subs	r3, r0, #1
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b18      	cmp	r3, #24
 800d6ca:	d830      	bhi.n	800d72e <__gethex+0x126>
 800d6cc:	f1a0 0210 	sub.w	r2, r0, #16
 800d6d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d6d4:	f7ff ff83 	bl	800d5de <__hexdig_fun>
 800d6d8:	f100 3cff 	add.w	ip, r0, #4294967295
 800d6dc:	fa5f fc8c 	uxtb.w	ip, ip
 800d6e0:	f1bc 0f18 	cmp.w	ip, #24
 800d6e4:	f04f 030a 	mov.w	r3, #10
 800d6e8:	d91e      	bls.n	800d728 <__gethex+0x120>
 800d6ea:	b104      	cbz	r4, 800d6ee <__gethex+0xe6>
 800d6ec:	4252      	negs	r2, r2
 800d6ee:	4417      	add	r7, r2
 800d6f0:	f8ca 1000 	str.w	r1, [sl]
 800d6f4:	b1ed      	cbz	r5, 800d732 <__gethex+0x12a>
 800d6f6:	f1bb 0f00 	cmp.w	fp, #0
 800d6fa:	bf0c      	ite	eq
 800d6fc:	2506      	moveq	r5, #6
 800d6fe:	2500      	movne	r5, #0
 800d700:	4628      	mov	r0, r5
 800d702:	b005      	add	sp, #20
 800d704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d708:	2500      	movs	r5, #0
 800d70a:	462c      	mov	r4, r5
 800d70c:	e7b0      	b.n	800d670 <__gethex+0x68>
 800d70e:	2c00      	cmp	r4, #0
 800d710:	d1c7      	bne.n	800d6a2 <__gethex+0x9a>
 800d712:	4627      	mov	r7, r4
 800d714:	e7c7      	b.n	800d6a6 <__gethex+0x9e>
 800d716:	464e      	mov	r6, r9
 800d718:	462f      	mov	r7, r5
 800d71a:	2501      	movs	r5, #1
 800d71c:	e7c3      	b.n	800d6a6 <__gethex+0x9e>
 800d71e:	2400      	movs	r4, #0
 800d720:	1cb1      	adds	r1, r6, #2
 800d722:	e7cc      	b.n	800d6be <__gethex+0xb6>
 800d724:	2401      	movs	r4, #1
 800d726:	e7fb      	b.n	800d720 <__gethex+0x118>
 800d728:	fb03 0002 	mla	r0, r3, r2, r0
 800d72c:	e7ce      	b.n	800d6cc <__gethex+0xc4>
 800d72e:	4631      	mov	r1, r6
 800d730:	e7de      	b.n	800d6f0 <__gethex+0xe8>
 800d732:	4629      	mov	r1, r5
 800d734:	eba6 0309 	sub.w	r3, r6, r9
 800d738:	3b01      	subs	r3, #1
 800d73a:	2b07      	cmp	r3, #7
 800d73c:	dc0a      	bgt.n	800d754 <__gethex+0x14c>
 800d73e:	9801      	ldr	r0, [sp, #4]
 800d740:	f7fe f82c 	bl	800b79c <_Balloc>
 800d744:	4604      	mov	r4, r0
 800d746:	b940      	cbnz	r0, 800d75a <__gethex+0x152>
 800d748:	4602      	mov	r2, r0
 800d74a:	21e4      	movs	r1, #228	@ 0xe4
 800d74c:	4b5b      	ldr	r3, [pc, #364]	@ (800d8bc <__gethex+0x2b4>)
 800d74e:	485c      	ldr	r0, [pc, #368]	@ (800d8c0 <__gethex+0x2b8>)
 800d750:	f7ff fec0 	bl	800d4d4 <__assert_func>
 800d754:	3101      	adds	r1, #1
 800d756:	105b      	asrs	r3, r3, #1
 800d758:	e7ef      	b.n	800d73a <__gethex+0x132>
 800d75a:	2300      	movs	r3, #0
 800d75c:	f100 0a14 	add.w	sl, r0, #20
 800d760:	4655      	mov	r5, sl
 800d762:	469b      	mov	fp, r3
 800d764:	45b1      	cmp	r9, r6
 800d766:	d337      	bcc.n	800d7d8 <__gethex+0x1d0>
 800d768:	f845 bb04 	str.w	fp, [r5], #4
 800d76c:	eba5 050a 	sub.w	r5, r5, sl
 800d770:	10ad      	asrs	r5, r5, #2
 800d772:	6125      	str	r5, [r4, #16]
 800d774:	4658      	mov	r0, fp
 800d776:	f7fe f903 	bl	800b980 <__hi0bits>
 800d77a:	016d      	lsls	r5, r5, #5
 800d77c:	f8d8 6000 	ldr.w	r6, [r8]
 800d780:	1a2d      	subs	r5, r5, r0
 800d782:	42b5      	cmp	r5, r6
 800d784:	dd54      	ble.n	800d830 <__gethex+0x228>
 800d786:	1bad      	subs	r5, r5, r6
 800d788:	4629      	mov	r1, r5
 800d78a:	4620      	mov	r0, r4
 800d78c:	f7fe fc8b 	bl	800c0a6 <__any_on>
 800d790:	4681      	mov	r9, r0
 800d792:	b178      	cbz	r0, 800d7b4 <__gethex+0x1ac>
 800d794:	f04f 0901 	mov.w	r9, #1
 800d798:	1e6b      	subs	r3, r5, #1
 800d79a:	1159      	asrs	r1, r3, #5
 800d79c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d7a0:	f003 021f 	and.w	r2, r3, #31
 800d7a4:	fa09 f202 	lsl.w	r2, r9, r2
 800d7a8:	420a      	tst	r2, r1
 800d7aa:	d003      	beq.n	800d7b4 <__gethex+0x1ac>
 800d7ac:	454b      	cmp	r3, r9
 800d7ae:	dc36      	bgt.n	800d81e <__gethex+0x216>
 800d7b0:	f04f 0902 	mov.w	r9, #2
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f7ff febe 	bl	800d538 <rshift>
 800d7bc:	442f      	add	r7, r5
 800d7be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7c2:	42bb      	cmp	r3, r7
 800d7c4:	da42      	bge.n	800d84c <__gethex+0x244>
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	9801      	ldr	r0, [sp, #4]
 800d7ca:	f7fe f827 	bl	800b81c <_Bfree>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7d2:	25a3      	movs	r5, #163	@ 0xa3
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	e793      	b.n	800d700 <__gethex+0xf8>
 800d7d8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d7dc:	2a2e      	cmp	r2, #46	@ 0x2e
 800d7de:	d012      	beq.n	800d806 <__gethex+0x1fe>
 800d7e0:	2b20      	cmp	r3, #32
 800d7e2:	d104      	bne.n	800d7ee <__gethex+0x1e6>
 800d7e4:	f845 bb04 	str.w	fp, [r5], #4
 800d7e8:	f04f 0b00 	mov.w	fp, #0
 800d7ec:	465b      	mov	r3, fp
 800d7ee:	7830      	ldrb	r0, [r6, #0]
 800d7f0:	9303      	str	r3, [sp, #12]
 800d7f2:	f7ff fef4 	bl	800d5de <__hexdig_fun>
 800d7f6:	9b03      	ldr	r3, [sp, #12]
 800d7f8:	f000 000f 	and.w	r0, r0, #15
 800d7fc:	4098      	lsls	r0, r3
 800d7fe:	ea4b 0b00 	orr.w	fp, fp, r0
 800d802:	3304      	adds	r3, #4
 800d804:	e7ae      	b.n	800d764 <__gethex+0x15c>
 800d806:	45b1      	cmp	r9, r6
 800d808:	d8ea      	bhi.n	800d7e0 <__gethex+0x1d8>
 800d80a:	2201      	movs	r2, #1
 800d80c:	4630      	mov	r0, r6
 800d80e:	492a      	ldr	r1, [pc, #168]	@ (800d8b8 <__gethex+0x2b0>)
 800d810:	9303      	str	r3, [sp, #12]
 800d812:	f7fc ff73 	bl	800a6fc <strncmp>
 800d816:	9b03      	ldr	r3, [sp, #12]
 800d818:	2800      	cmp	r0, #0
 800d81a:	d1e1      	bne.n	800d7e0 <__gethex+0x1d8>
 800d81c:	e7a2      	b.n	800d764 <__gethex+0x15c>
 800d81e:	4620      	mov	r0, r4
 800d820:	1ea9      	subs	r1, r5, #2
 800d822:	f7fe fc40 	bl	800c0a6 <__any_on>
 800d826:	2800      	cmp	r0, #0
 800d828:	d0c2      	beq.n	800d7b0 <__gethex+0x1a8>
 800d82a:	f04f 0903 	mov.w	r9, #3
 800d82e:	e7c1      	b.n	800d7b4 <__gethex+0x1ac>
 800d830:	da09      	bge.n	800d846 <__gethex+0x23e>
 800d832:	1b75      	subs	r5, r6, r5
 800d834:	4621      	mov	r1, r4
 800d836:	462a      	mov	r2, r5
 800d838:	9801      	ldr	r0, [sp, #4]
 800d83a:	f7fe fa05 	bl	800bc48 <__lshift>
 800d83e:	4604      	mov	r4, r0
 800d840:	1b7f      	subs	r7, r7, r5
 800d842:	f100 0a14 	add.w	sl, r0, #20
 800d846:	f04f 0900 	mov.w	r9, #0
 800d84a:	e7b8      	b.n	800d7be <__gethex+0x1b6>
 800d84c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d850:	42bd      	cmp	r5, r7
 800d852:	dd6f      	ble.n	800d934 <__gethex+0x32c>
 800d854:	1bed      	subs	r5, r5, r7
 800d856:	42ae      	cmp	r6, r5
 800d858:	dc34      	bgt.n	800d8c4 <__gethex+0x2bc>
 800d85a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d022      	beq.n	800d8a8 <__gethex+0x2a0>
 800d862:	2b03      	cmp	r3, #3
 800d864:	d024      	beq.n	800d8b0 <__gethex+0x2a8>
 800d866:	2b01      	cmp	r3, #1
 800d868:	d115      	bne.n	800d896 <__gethex+0x28e>
 800d86a:	42ae      	cmp	r6, r5
 800d86c:	d113      	bne.n	800d896 <__gethex+0x28e>
 800d86e:	2e01      	cmp	r6, #1
 800d870:	d10b      	bne.n	800d88a <__gethex+0x282>
 800d872:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d876:	9a02      	ldr	r2, [sp, #8]
 800d878:	2562      	movs	r5, #98	@ 0x62
 800d87a:	6013      	str	r3, [r2, #0]
 800d87c:	2301      	movs	r3, #1
 800d87e:	6123      	str	r3, [r4, #16]
 800d880:	f8ca 3000 	str.w	r3, [sl]
 800d884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d886:	601c      	str	r4, [r3, #0]
 800d888:	e73a      	b.n	800d700 <__gethex+0xf8>
 800d88a:	4620      	mov	r0, r4
 800d88c:	1e71      	subs	r1, r6, #1
 800d88e:	f7fe fc0a 	bl	800c0a6 <__any_on>
 800d892:	2800      	cmp	r0, #0
 800d894:	d1ed      	bne.n	800d872 <__gethex+0x26a>
 800d896:	4621      	mov	r1, r4
 800d898:	9801      	ldr	r0, [sp, #4]
 800d89a:	f7fd ffbf 	bl	800b81c <_Bfree>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8a2:	2550      	movs	r5, #80	@ 0x50
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	e72b      	b.n	800d700 <__gethex+0xf8>
 800d8a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1f3      	bne.n	800d896 <__gethex+0x28e>
 800d8ae:	e7e0      	b.n	800d872 <__gethex+0x26a>
 800d8b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1dd      	bne.n	800d872 <__gethex+0x26a>
 800d8b6:	e7ee      	b.n	800d896 <__gethex+0x28e>
 800d8b8:	0800e2c8 	.word	0x0800e2c8
 800d8bc:	0800e15c 	.word	0x0800e15c
 800d8c0:	0800e375 	.word	0x0800e375
 800d8c4:	1e6f      	subs	r7, r5, #1
 800d8c6:	f1b9 0f00 	cmp.w	r9, #0
 800d8ca:	d130      	bne.n	800d92e <__gethex+0x326>
 800d8cc:	b127      	cbz	r7, 800d8d8 <__gethex+0x2d0>
 800d8ce:	4639      	mov	r1, r7
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f7fe fbe8 	bl	800c0a6 <__any_on>
 800d8d6:	4681      	mov	r9, r0
 800d8d8:	2301      	movs	r3, #1
 800d8da:	4629      	mov	r1, r5
 800d8dc:	1b76      	subs	r6, r6, r5
 800d8de:	2502      	movs	r5, #2
 800d8e0:	117a      	asrs	r2, r7, #5
 800d8e2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d8e6:	f007 071f 	and.w	r7, r7, #31
 800d8ea:	40bb      	lsls	r3, r7
 800d8ec:	4213      	tst	r3, r2
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	bf18      	it	ne
 800d8f2:	f049 0902 	orrne.w	r9, r9, #2
 800d8f6:	f7ff fe1f 	bl	800d538 <rshift>
 800d8fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d8fe:	f1b9 0f00 	cmp.w	r9, #0
 800d902:	d047      	beq.n	800d994 <__gethex+0x38c>
 800d904:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d015      	beq.n	800d938 <__gethex+0x330>
 800d90c:	2b03      	cmp	r3, #3
 800d90e:	d017      	beq.n	800d940 <__gethex+0x338>
 800d910:	2b01      	cmp	r3, #1
 800d912:	d109      	bne.n	800d928 <__gethex+0x320>
 800d914:	f019 0f02 	tst.w	r9, #2
 800d918:	d006      	beq.n	800d928 <__gethex+0x320>
 800d91a:	f8da 3000 	ldr.w	r3, [sl]
 800d91e:	ea49 0903 	orr.w	r9, r9, r3
 800d922:	f019 0f01 	tst.w	r9, #1
 800d926:	d10e      	bne.n	800d946 <__gethex+0x33e>
 800d928:	f045 0510 	orr.w	r5, r5, #16
 800d92c:	e032      	b.n	800d994 <__gethex+0x38c>
 800d92e:	f04f 0901 	mov.w	r9, #1
 800d932:	e7d1      	b.n	800d8d8 <__gethex+0x2d0>
 800d934:	2501      	movs	r5, #1
 800d936:	e7e2      	b.n	800d8fe <__gethex+0x2f6>
 800d938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d93a:	f1c3 0301 	rsb	r3, r3, #1
 800d93e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d942:	2b00      	cmp	r3, #0
 800d944:	d0f0      	beq.n	800d928 <__gethex+0x320>
 800d946:	f04f 0c00 	mov.w	ip, #0
 800d94a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d94e:	f104 0314 	add.w	r3, r4, #20
 800d952:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d956:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d95a:	4618      	mov	r0, r3
 800d95c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d960:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d964:	d01b      	beq.n	800d99e <__gethex+0x396>
 800d966:	3201      	adds	r2, #1
 800d968:	6002      	str	r2, [r0, #0]
 800d96a:	2d02      	cmp	r5, #2
 800d96c:	f104 0314 	add.w	r3, r4, #20
 800d970:	d13c      	bne.n	800d9ec <__gethex+0x3e4>
 800d972:	f8d8 2000 	ldr.w	r2, [r8]
 800d976:	3a01      	subs	r2, #1
 800d978:	42b2      	cmp	r2, r6
 800d97a:	d109      	bne.n	800d990 <__gethex+0x388>
 800d97c:	2201      	movs	r2, #1
 800d97e:	1171      	asrs	r1, r6, #5
 800d980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d984:	f006 061f 	and.w	r6, r6, #31
 800d988:	fa02 f606 	lsl.w	r6, r2, r6
 800d98c:	421e      	tst	r6, r3
 800d98e:	d13a      	bne.n	800da06 <__gethex+0x3fe>
 800d990:	f045 0520 	orr.w	r5, r5, #32
 800d994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d996:	601c      	str	r4, [r3, #0]
 800d998:	9b02      	ldr	r3, [sp, #8]
 800d99a:	601f      	str	r7, [r3, #0]
 800d99c:	e6b0      	b.n	800d700 <__gethex+0xf8>
 800d99e:	4299      	cmp	r1, r3
 800d9a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800d9a4:	d8d9      	bhi.n	800d95a <__gethex+0x352>
 800d9a6:	68a3      	ldr	r3, [r4, #8]
 800d9a8:	459b      	cmp	fp, r3
 800d9aa:	db17      	blt.n	800d9dc <__gethex+0x3d4>
 800d9ac:	6861      	ldr	r1, [r4, #4]
 800d9ae:	9801      	ldr	r0, [sp, #4]
 800d9b0:	3101      	adds	r1, #1
 800d9b2:	f7fd fef3 	bl	800b79c <_Balloc>
 800d9b6:	4681      	mov	r9, r0
 800d9b8:	b918      	cbnz	r0, 800d9c2 <__gethex+0x3ba>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	2184      	movs	r1, #132	@ 0x84
 800d9be:	4b19      	ldr	r3, [pc, #100]	@ (800da24 <__gethex+0x41c>)
 800d9c0:	e6c5      	b.n	800d74e <__gethex+0x146>
 800d9c2:	6922      	ldr	r2, [r4, #16]
 800d9c4:	f104 010c 	add.w	r1, r4, #12
 800d9c8:	3202      	adds	r2, #2
 800d9ca:	0092      	lsls	r2, r2, #2
 800d9cc:	300c      	adds	r0, #12
 800d9ce:	f7fc ff82 	bl	800a8d6 <memcpy>
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	9801      	ldr	r0, [sp, #4]
 800d9d6:	f7fd ff21 	bl	800b81c <_Bfree>
 800d9da:	464c      	mov	r4, r9
 800d9dc:	6923      	ldr	r3, [r4, #16]
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	6122      	str	r2, [r4, #16]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9e8:	615a      	str	r2, [r3, #20]
 800d9ea:	e7be      	b.n	800d96a <__gethex+0x362>
 800d9ec:	6922      	ldr	r2, [r4, #16]
 800d9ee:	455a      	cmp	r2, fp
 800d9f0:	dd0b      	ble.n	800da0a <__gethex+0x402>
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f7ff fd9f 	bl	800d538 <rshift>
 800d9fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9fe:	3701      	adds	r7, #1
 800da00:	42bb      	cmp	r3, r7
 800da02:	f6ff aee0 	blt.w	800d7c6 <__gethex+0x1be>
 800da06:	2501      	movs	r5, #1
 800da08:	e7c2      	b.n	800d990 <__gethex+0x388>
 800da0a:	f016 061f 	ands.w	r6, r6, #31
 800da0e:	d0fa      	beq.n	800da06 <__gethex+0x3fe>
 800da10:	4453      	add	r3, sl
 800da12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800da16:	f7fd ffb3 	bl	800b980 <__hi0bits>
 800da1a:	f1c6 0620 	rsb	r6, r6, #32
 800da1e:	42b0      	cmp	r0, r6
 800da20:	dbe7      	blt.n	800d9f2 <__gethex+0x3ea>
 800da22:	e7f0      	b.n	800da06 <__gethex+0x3fe>
 800da24:	0800e15c 	.word	0x0800e15c

0800da28 <L_shift>:
 800da28:	f1c2 0208 	rsb	r2, r2, #8
 800da2c:	0092      	lsls	r2, r2, #2
 800da2e:	b570      	push	{r4, r5, r6, lr}
 800da30:	f1c2 0620 	rsb	r6, r2, #32
 800da34:	6843      	ldr	r3, [r0, #4]
 800da36:	6804      	ldr	r4, [r0, #0]
 800da38:	fa03 f506 	lsl.w	r5, r3, r6
 800da3c:	432c      	orrs	r4, r5
 800da3e:	40d3      	lsrs	r3, r2
 800da40:	6004      	str	r4, [r0, #0]
 800da42:	f840 3f04 	str.w	r3, [r0, #4]!
 800da46:	4288      	cmp	r0, r1
 800da48:	d3f4      	bcc.n	800da34 <L_shift+0xc>
 800da4a:	bd70      	pop	{r4, r5, r6, pc}

0800da4c <__match>:
 800da4c:	b530      	push	{r4, r5, lr}
 800da4e:	6803      	ldr	r3, [r0, #0]
 800da50:	3301      	adds	r3, #1
 800da52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da56:	b914      	cbnz	r4, 800da5e <__match+0x12>
 800da58:	6003      	str	r3, [r0, #0]
 800da5a:	2001      	movs	r0, #1
 800da5c:	bd30      	pop	{r4, r5, pc}
 800da5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da62:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800da66:	2d19      	cmp	r5, #25
 800da68:	bf98      	it	ls
 800da6a:	3220      	addls	r2, #32
 800da6c:	42a2      	cmp	r2, r4
 800da6e:	d0f0      	beq.n	800da52 <__match+0x6>
 800da70:	2000      	movs	r0, #0
 800da72:	e7f3      	b.n	800da5c <__match+0x10>

0800da74 <__hexnan>:
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	2500      	movs	r5, #0
 800da7a:	680b      	ldr	r3, [r1, #0]
 800da7c:	4682      	mov	sl, r0
 800da7e:	115e      	asrs	r6, r3, #5
 800da80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da84:	f013 031f 	ands.w	r3, r3, #31
 800da88:	bf18      	it	ne
 800da8a:	3604      	addne	r6, #4
 800da8c:	1f37      	subs	r7, r6, #4
 800da8e:	4690      	mov	r8, r2
 800da90:	46b9      	mov	r9, r7
 800da92:	463c      	mov	r4, r7
 800da94:	46ab      	mov	fp, r5
 800da96:	b087      	sub	sp, #28
 800da98:	6801      	ldr	r1, [r0, #0]
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	f846 5c04 	str.w	r5, [r6, #-4]
 800daa0:	9502      	str	r5, [sp, #8]
 800daa2:	784a      	ldrb	r2, [r1, #1]
 800daa4:	1c4b      	adds	r3, r1, #1
 800daa6:	9303      	str	r3, [sp, #12]
 800daa8:	b342      	cbz	r2, 800dafc <__hexnan+0x88>
 800daaa:	4610      	mov	r0, r2
 800daac:	9105      	str	r1, [sp, #20]
 800daae:	9204      	str	r2, [sp, #16]
 800dab0:	f7ff fd95 	bl	800d5de <__hexdig_fun>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d151      	bne.n	800db5c <__hexnan+0xe8>
 800dab8:	9a04      	ldr	r2, [sp, #16]
 800daba:	9905      	ldr	r1, [sp, #20]
 800dabc:	2a20      	cmp	r2, #32
 800dabe:	d818      	bhi.n	800daf2 <__hexnan+0x7e>
 800dac0:	9b02      	ldr	r3, [sp, #8]
 800dac2:	459b      	cmp	fp, r3
 800dac4:	dd13      	ble.n	800daee <__hexnan+0x7a>
 800dac6:	454c      	cmp	r4, r9
 800dac8:	d206      	bcs.n	800dad8 <__hexnan+0x64>
 800daca:	2d07      	cmp	r5, #7
 800dacc:	dc04      	bgt.n	800dad8 <__hexnan+0x64>
 800dace:	462a      	mov	r2, r5
 800dad0:	4649      	mov	r1, r9
 800dad2:	4620      	mov	r0, r4
 800dad4:	f7ff ffa8 	bl	800da28 <L_shift>
 800dad8:	4544      	cmp	r4, r8
 800dada:	d952      	bls.n	800db82 <__hexnan+0x10e>
 800dadc:	2300      	movs	r3, #0
 800dade:	f1a4 0904 	sub.w	r9, r4, #4
 800dae2:	f844 3c04 	str.w	r3, [r4, #-4]
 800dae6:	461d      	mov	r5, r3
 800dae8:	464c      	mov	r4, r9
 800daea:	f8cd b008 	str.w	fp, [sp, #8]
 800daee:	9903      	ldr	r1, [sp, #12]
 800daf0:	e7d7      	b.n	800daa2 <__hexnan+0x2e>
 800daf2:	2a29      	cmp	r2, #41	@ 0x29
 800daf4:	d157      	bne.n	800dba6 <__hexnan+0x132>
 800daf6:	3102      	adds	r1, #2
 800daf8:	f8ca 1000 	str.w	r1, [sl]
 800dafc:	f1bb 0f00 	cmp.w	fp, #0
 800db00:	d051      	beq.n	800dba6 <__hexnan+0x132>
 800db02:	454c      	cmp	r4, r9
 800db04:	d206      	bcs.n	800db14 <__hexnan+0xa0>
 800db06:	2d07      	cmp	r5, #7
 800db08:	dc04      	bgt.n	800db14 <__hexnan+0xa0>
 800db0a:	462a      	mov	r2, r5
 800db0c:	4649      	mov	r1, r9
 800db0e:	4620      	mov	r0, r4
 800db10:	f7ff ff8a 	bl	800da28 <L_shift>
 800db14:	4544      	cmp	r4, r8
 800db16:	d936      	bls.n	800db86 <__hexnan+0x112>
 800db18:	4623      	mov	r3, r4
 800db1a:	f1a8 0204 	sub.w	r2, r8, #4
 800db1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800db22:	429f      	cmp	r7, r3
 800db24:	f842 1f04 	str.w	r1, [r2, #4]!
 800db28:	d2f9      	bcs.n	800db1e <__hexnan+0xaa>
 800db2a:	1b3b      	subs	r3, r7, r4
 800db2c:	f023 0303 	bic.w	r3, r3, #3
 800db30:	3304      	adds	r3, #4
 800db32:	3401      	adds	r4, #1
 800db34:	3e03      	subs	r6, #3
 800db36:	42b4      	cmp	r4, r6
 800db38:	bf88      	it	hi
 800db3a:	2304      	movhi	r3, #4
 800db3c:	2200      	movs	r2, #0
 800db3e:	4443      	add	r3, r8
 800db40:	f843 2b04 	str.w	r2, [r3], #4
 800db44:	429f      	cmp	r7, r3
 800db46:	d2fb      	bcs.n	800db40 <__hexnan+0xcc>
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	b91b      	cbnz	r3, 800db54 <__hexnan+0xe0>
 800db4c:	4547      	cmp	r7, r8
 800db4e:	d128      	bne.n	800dba2 <__hexnan+0x12e>
 800db50:	2301      	movs	r3, #1
 800db52:	603b      	str	r3, [r7, #0]
 800db54:	2005      	movs	r0, #5
 800db56:	b007      	add	sp, #28
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	3501      	adds	r5, #1
 800db5e:	2d08      	cmp	r5, #8
 800db60:	f10b 0b01 	add.w	fp, fp, #1
 800db64:	dd06      	ble.n	800db74 <__hexnan+0x100>
 800db66:	4544      	cmp	r4, r8
 800db68:	d9c1      	bls.n	800daee <__hexnan+0x7a>
 800db6a:	2300      	movs	r3, #0
 800db6c:	2501      	movs	r5, #1
 800db6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800db72:	3c04      	subs	r4, #4
 800db74:	6822      	ldr	r2, [r4, #0]
 800db76:	f000 000f 	and.w	r0, r0, #15
 800db7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db7e:	6020      	str	r0, [r4, #0]
 800db80:	e7b5      	b.n	800daee <__hexnan+0x7a>
 800db82:	2508      	movs	r5, #8
 800db84:	e7b3      	b.n	800daee <__hexnan+0x7a>
 800db86:	9b01      	ldr	r3, [sp, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d0dd      	beq.n	800db48 <__hexnan+0xd4>
 800db8c:	f04f 32ff 	mov.w	r2, #4294967295
 800db90:	f1c3 0320 	rsb	r3, r3, #32
 800db94:	40da      	lsrs	r2, r3
 800db96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db9a:	4013      	ands	r3, r2
 800db9c:	f846 3c04 	str.w	r3, [r6, #-4]
 800dba0:	e7d2      	b.n	800db48 <__hexnan+0xd4>
 800dba2:	3f04      	subs	r7, #4
 800dba4:	e7d0      	b.n	800db48 <__hexnan+0xd4>
 800dba6:	2004      	movs	r0, #4
 800dba8:	e7d5      	b.n	800db56 <__hexnan+0xe2>

0800dbaa <__ascii_mbtowc>:
 800dbaa:	b082      	sub	sp, #8
 800dbac:	b901      	cbnz	r1, 800dbb0 <__ascii_mbtowc+0x6>
 800dbae:	a901      	add	r1, sp, #4
 800dbb0:	b142      	cbz	r2, 800dbc4 <__ascii_mbtowc+0x1a>
 800dbb2:	b14b      	cbz	r3, 800dbc8 <__ascii_mbtowc+0x1e>
 800dbb4:	7813      	ldrb	r3, [r2, #0]
 800dbb6:	600b      	str	r3, [r1, #0]
 800dbb8:	7812      	ldrb	r2, [r2, #0]
 800dbba:	1e10      	subs	r0, r2, #0
 800dbbc:	bf18      	it	ne
 800dbbe:	2001      	movne	r0, #1
 800dbc0:	b002      	add	sp, #8
 800dbc2:	4770      	bx	lr
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	e7fb      	b.n	800dbc0 <__ascii_mbtowc+0x16>
 800dbc8:	f06f 0001 	mvn.w	r0, #1
 800dbcc:	e7f8      	b.n	800dbc0 <__ascii_mbtowc+0x16>

0800dbce <_realloc_r>:
 800dbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	4615      	mov	r5, r2
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	b921      	cbnz	r1, 800dbe4 <_realloc_r+0x16>
 800dbda:	4611      	mov	r1, r2
 800dbdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	f7fd bd50 	b.w	800b684 <_malloc_r>
 800dbe4:	b92a      	cbnz	r2, 800dbf2 <_realloc_r+0x24>
 800dbe6:	f7fd fcdb 	bl	800b5a0 <_free_r>
 800dbea:	2400      	movs	r4, #0
 800dbec:	4620      	mov	r0, r4
 800dbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf2:	f000 f840 	bl	800dc76 <_malloc_usable_size_r>
 800dbf6:	4285      	cmp	r5, r0
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	d802      	bhi.n	800dc02 <_realloc_r+0x34>
 800dbfc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc00:	d8f4      	bhi.n	800dbec <_realloc_r+0x1e>
 800dc02:	4629      	mov	r1, r5
 800dc04:	4640      	mov	r0, r8
 800dc06:	f7fd fd3d 	bl	800b684 <_malloc_r>
 800dc0a:	4607      	mov	r7, r0
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d0ec      	beq.n	800dbea <_realloc_r+0x1c>
 800dc10:	42b5      	cmp	r5, r6
 800dc12:	462a      	mov	r2, r5
 800dc14:	4621      	mov	r1, r4
 800dc16:	bf28      	it	cs
 800dc18:	4632      	movcs	r2, r6
 800dc1a:	f7fc fe5c 	bl	800a8d6 <memcpy>
 800dc1e:	4621      	mov	r1, r4
 800dc20:	4640      	mov	r0, r8
 800dc22:	f7fd fcbd 	bl	800b5a0 <_free_r>
 800dc26:	463c      	mov	r4, r7
 800dc28:	e7e0      	b.n	800dbec <_realloc_r+0x1e>

0800dc2a <__ascii_wctomb>:
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	4608      	mov	r0, r1
 800dc2e:	b141      	cbz	r1, 800dc42 <__ascii_wctomb+0x18>
 800dc30:	2aff      	cmp	r2, #255	@ 0xff
 800dc32:	d904      	bls.n	800dc3e <__ascii_wctomb+0x14>
 800dc34:	228a      	movs	r2, #138	@ 0x8a
 800dc36:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	4770      	bx	lr
 800dc3e:	2001      	movs	r0, #1
 800dc40:	700a      	strb	r2, [r1, #0]
 800dc42:	4770      	bx	lr

0800dc44 <fiprintf>:
 800dc44:	b40e      	push	{r1, r2, r3}
 800dc46:	b503      	push	{r0, r1, lr}
 800dc48:	4601      	mov	r1, r0
 800dc4a:	ab03      	add	r3, sp, #12
 800dc4c:	4805      	ldr	r0, [pc, #20]	@ (800dc64 <fiprintf+0x20>)
 800dc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc52:	6800      	ldr	r0, [r0, #0]
 800dc54:	9301      	str	r3, [sp, #4]
 800dc56:	f7ff f9c9 	bl	800cfec <_vfiprintf_r>
 800dc5a:	b002      	add	sp, #8
 800dc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc60:	b003      	add	sp, #12
 800dc62:	4770      	bx	lr
 800dc64:	2000001c 	.word	0x2000001c

0800dc68 <abort>:
 800dc68:	2006      	movs	r0, #6
 800dc6a:	b508      	push	{r3, lr}
 800dc6c:	f000 f834 	bl	800dcd8 <raise>
 800dc70:	2001      	movs	r0, #1
 800dc72:	f7f4 f8e4 	bl	8001e3e <_exit>

0800dc76 <_malloc_usable_size_r>:
 800dc76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc7a:	1f18      	subs	r0, r3, #4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	bfbc      	itt	lt
 800dc80:	580b      	ldrlt	r3, [r1, r0]
 800dc82:	18c0      	addlt	r0, r0, r3
 800dc84:	4770      	bx	lr

0800dc86 <_raise_r>:
 800dc86:	291f      	cmp	r1, #31
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	460c      	mov	r4, r1
 800dc8e:	d904      	bls.n	800dc9a <_raise_r+0x14>
 800dc90:	2316      	movs	r3, #22
 800dc92:	6003      	str	r3, [r0, #0]
 800dc94:	f04f 30ff 	mov.w	r0, #4294967295
 800dc98:	bd38      	pop	{r3, r4, r5, pc}
 800dc9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc9c:	b112      	cbz	r2, 800dca4 <_raise_r+0x1e>
 800dc9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dca2:	b94b      	cbnz	r3, 800dcb8 <_raise_r+0x32>
 800dca4:	4628      	mov	r0, r5
 800dca6:	f000 f831 	bl	800dd0c <_getpid_r>
 800dcaa:	4622      	mov	r2, r4
 800dcac:	4601      	mov	r1, r0
 800dcae:	4628      	mov	r0, r5
 800dcb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcb4:	f000 b818 	b.w	800dce8 <_kill_r>
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d00a      	beq.n	800dcd2 <_raise_r+0x4c>
 800dcbc:	1c59      	adds	r1, r3, #1
 800dcbe:	d103      	bne.n	800dcc8 <_raise_r+0x42>
 800dcc0:	2316      	movs	r3, #22
 800dcc2:	6003      	str	r3, [r0, #0]
 800dcc4:	2001      	movs	r0, #1
 800dcc6:	e7e7      	b.n	800dc98 <_raise_r+0x12>
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4620      	mov	r0, r4
 800dccc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcd0:	4798      	blx	r3
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	e7e0      	b.n	800dc98 <_raise_r+0x12>
	...

0800dcd8 <raise>:
 800dcd8:	4b02      	ldr	r3, [pc, #8]	@ (800dce4 <raise+0xc>)
 800dcda:	4601      	mov	r1, r0
 800dcdc:	6818      	ldr	r0, [r3, #0]
 800dcde:	f7ff bfd2 	b.w	800dc86 <_raise_r>
 800dce2:	bf00      	nop
 800dce4:	2000001c 	.word	0x2000001c

0800dce8 <_kill_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	2300      	movs	r3, #0
 800dcec:	4d06      	ldr	r5, [pc, #24]	@ (800dd08 <_kill_r+0x20>)
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	602b      	str	r3, [r5, #0]
 800dcf6:	f7f4 f892 	bl	8001e1e <_kill>
 800dcfa:	1c43      	adds	r3, r0, #1
 800dcfc:	d102      	bne.n	800dd04 <_kill_r+0x1c>
 800dcfe:	682b      	ldr	r3, [r5, #0]
 800dd00:	b103      	cbz	r3, 800dd04 <_kill_r+0x1c>
 800dd02:	6023      	str	r3, [r4, #0]
 800dd04:	bd38      	pop	{r3, r4, r5, pc}
 800dd06:	bf00      	nop
 800dd08:	20002378 	.word	0x20002378

0800dd0c <_getpid_r>:
 800dd0c:	f7f4 b880 	b.w	8001e10 <_getpid>

0800dd10 <_init>:
 800dd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd12:	bf00      	nop
 800dd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd16:	bc08      	pop	{r3}
 800dd18:	469e      	mov	lr, r3
 800dd1a:	4770      	bx	lr

0800dd1c <_fini>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	bf00      	nop
 800dd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd22:	bc08      	pop	{r3}
 800dd24:	469e      	mov	lr, r3
 800dd26:	4770      	bx	lr
