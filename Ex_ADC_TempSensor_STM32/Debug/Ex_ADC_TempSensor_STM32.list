
Ex_ADC_TempSensor_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5c0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800b6d0  0800b6d0  0000c6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc0  0800bbc0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbc0  0800bbc0  0000cbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbc8  0800bbc8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc8  0800bbc8  0000cbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbcc  0800bbcc  0000cbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bbd0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  0800bda4  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800bda4  0000d478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6b1  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240e  00000000  00000000  0001b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0001dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae8  00000000  00000000  0001eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190e6  00000000  00000000  0001f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001276f  00000000  00000000  00038686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db47  00000000  00000000  0004adf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d893c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe4  00000000  00000000  000d8980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000dd964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b6b8 	.word	0x0800b6b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800b6b8 	.word	0x0800b6b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <Get_ADC_channel>:
uint8_t data_rx;

int16_t Accel_X, Accel_Y, Accel_Z;
float angleX, angleY;

uint16_t Get_ADC_channel(uint32_t channel){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	  uint16_t adc;
//---------------Congig channel-------------

	  ADC_ChannelConfTypeDef sConfig = {0};
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = channel;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010ac:	2307      	movs	r3, #7
 80010ae:	613b      	str	r3, [r7, #16]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <Get_ADC_channel+0x60>)
 80010b8:	f001 fa20 	bl	80024fc <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <Get_ADC_channel+0x36>
	  {
	    Error_Handler();
 80010c2:	f000 fbab 	bl	800181c <Error_Handler>
	  }

//---------------Read value---------------
	  HAL_ADC_Start(&hadc1);
 80010c6:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <Get_ADC_channel+0x60>)
 80010c8:	f000 ff5a 	bl	8001f80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80010cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010d0:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <Get_ADC_channel+0x60>)
 80010d2:	f001 f82f 	bl	8002134 <HAL_ADC_PollForConversion>
	  adc = HAL_ADC_GetValue(&hadc1);
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <Get_ADC_channel+0x60>)
 80010d8:	f001 f932 	bl	8002340 <HAL_ADC_GetValue>
 80010dc:	4603      	mov	r3, r0
 80010de:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <Get_ADC_channel+0x60>)
 80010e2:	f000 fffb 	bl	80020dc <HAL_ADC_Stop>
	  return adc;
 80010e6:	8afb      	ldrh	r3, [r7, #22]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001f0 	.word	0x200001f0

080010f4 <Read_Temperature>:
//}


//Đo 2 kênh
float Read_Temperature(void)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
    uint32_t adc_raw = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    uint32_t adc_ref = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
    float Vsense = 0.0f;
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
    float vref_Cal;
    float temperature = 0.0f;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	613b      	str	r3, [r7, #16]

    ADC1->CR2 |= ADC_CR2_TSVREFE;
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <Read_Temperature+0xb8>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4a26      	ldr	r2, [pc, #152]	@ (80011ac <Read_Temperature+0xb8>)
 8001114:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001118:	6093      	str	r3, [r2, #8]

    adc_raw = Get_ADC_channel(ADC_CHANNEL_TEMPSENSOR);
 800111a:	2010      	movs	r0, #16
 800111c:	f7ff ffb8 	bl	8001090 <Get_ADC_channel>
 8001120:	4603      	mov	r3, r0
 8001122:	61fb      	str	r3, [r7, #28]
    adc_ref = Get_ADC_channel(ADC_CHANNEL_VREFINT);
 8001124:	2011      	movs	r0, #17
 8001126:	f7ff ffb3 	bl	8001090 <Get_ADC_channel>
 800112a:	4603      	mov	r3, r0
 800112c:	61bb      	str	r3, [r7, #24]

    uint16_t vrefint_cal = 1500;
 800112e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001132:	81fb      	strh	r3, [r7, #14]
    vref_Cal = 3.3f * ((float)vrefint_cal / (float)adc_ref);
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fdcc 	bl	8000cd4 <__aeabi_ui2f>
 800113c:	4604      	mov	r4, r0
 800113e:	69b8      	ldr	r0, [r7, #24]
 8001140:	f7ff fdc8 	bl	8000cd4 <__aeabi_ui2f>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff fecf 	bl	8000eec <__aeabi_fdiv>
 800114e:	4603      	mov	r3, r0
 8001150:	4917      	ldr	r1, [pc, #92]	@ (80011b0 <Read_Temperature+0xbc>)
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fe16 	bl	8000d84 <__aeabi_fmul>
 8001158:	4603      	mov	r3, r0
 800115a:	60bb      	str	r3, [r7, #8]

	Vsense = vref_Cal * ((float)adc_raw / 4095.0f);
 800115c:	69f8      	ldr	r0, [r7, #28]
 800115e:	f7ff fdb9 	bl	8000cd4 <__aeabi_ui2f>
 8001162:	4603      	mov	r3, r0
 8001164:	4913      	ldr	r1, [pc, #76]	@ (80011b4 <Read_Temperature+0xc0>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fec0 	bl	8000eec <__aeabi_fdiv>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff fe07 	bl	8000d84 <__aeabi_fmul>
 8001176:	4603      	mov	r3, r0
 8001178:	617b      	str	r3, [r7, #20]


    float V25 = 1.4f;
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <Read_Temperature+0xc4>)
 800117c:	607b      	str	r3, [r7, #4]
    float Avg_Slope = 0.004478;
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <Read_Temperature+0xc8>)
 8001180:	603b      	str	r3, [r7, #0]

    temperature = ((V25 - Vsense) / Avg_Slope) + 25.0f;
 8001182:	6979      	ldr	r1, [r7, #20]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fcf3 	bl	8000b70 <__aeabi_fsub>
 800118a:	4603      	mov	r3, r0
 800118c:	6839      	ldr	r1, [r7, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff feac 	bl	8000eec <__aeabi_fdiv>
 8001194:	4603      	mov	r3, r0
 8001196:	490a      	ldr	r1, [pc, #40]	@ (80011c0 <Read_Temperature+0xcc>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fceb 	bl	8000b74 <__addsf3>
 800119e:	4603      	mov	r3, r0
 80011a0:	613b      	str	r3, [r7, #16]

    return temperature;
 80011a2:	693b      	ldr	r3, [r7, #16]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3724      	adds	r7, #36	@ 0x24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	40012400 	.word	0x40012400
 80011b0:	40533333 	.word	0x40533333
 80011b4:	457ff000 	.word	0x457ff000
 80011b8:	3fb33333 	.word	0x3fb33333
 80011bc:	3b92bc30 	.word	0x3b92bc30
 80011c0:	41c80000 	.word	0x41c80000

080011c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	if (data_rx == '1'){
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_UART_RxCpltCallback+0x60>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b31      	cmp	r3, #49	@ 0x31
 80011d2:	d10d      	bne.n	80011f0 <HAL_UART_RxCpltCallback+0x2c>
		char *str = "Name: Pham Nhat Tan\nStudent ID: 20210768\n";
 80011d4:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <HAL_UART_RxCpltCallback+0x64>)
 80011d6:	60bb      	str	r3, [r7, #8]
			  HAL_UART_Transmit(&huart1,(uint8_t *) str, strlen(str), 300);
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f7fe ffb9 	bl	8000150 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	4810      	ldr	r0, [pc, #64]	@ (800122c <HAL_UART_RxCpltCallback+0x68>)
 80011ea:	f005 f8dd 	bl	80063a8 <HAL_UART_Transmit>
 80011ee:	e010      	b.n	8001212 <HAL_UART_RxCpltCallback+0x4e>
	}else if (data_rx == '0'){
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_UART_RxCpltCallback+0x60>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b30      	cmp	r3, #48	@ 0x30
 80011f6:	d10c      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x4e>
		char *str = "Hello World \n";
 80011f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <HAL_UART_RxCpltCallback+0x6c>)
 80011fa:	60fb      	str	r3, [r7, #12]
			  HAL_UART_Transmit(&huart1,(uint8_t *) str, strlen(str), 300);
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7fe ffa7 	bl	8000150 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	4807      	ldr	r0, [pc, #28]	@ (800122c <HAL_UART_RxCpltCallback+0x68>)
 800120e:	f005 f8cb 	bl	80063a8 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	4903      	ldr	r1, [pc, #12]	@ (8001224 <HAL_UART_RxCpltCallback+0x60>)
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <HAL_UART_RxCpltCallback+0x68>)
 8001218:	f005 f951 	bl	80064be <HAL_UART_Receive_IT>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000318 	.word	0x20000318
 8001228:	0800b6d0 	.word	0x0800b6d0
 800122c:	200002cc 	.word	0x200002cc
 8001230:	0800b6fc 	.word	0x0800b6fc

08001234 <_write>:

int _write(int fd, char * ptr, int len) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	b29a      	uxth	r2, r3
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	4804      	ldr	r0, [pc, #16]	@ (800125c <_write+0x28>)
 800124c:	f005 f8ac 	bl	80063a8 <HAL_UART_Transmit>
  return len;
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002cc 	.word	0x200002cc

08001260 <Decimal2BCD>:
	uint8_t month;
	uint8_t year;
}Datetime;
Datetime date_time;

uint8_t Decimal2BCD(uint8_t num){
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	return (num/10)<<4|(num%10);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <Decimal2BCD+0x44>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	b258      	sxtb	r0, r3
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <Decimal2BCD+0x44>)
 800127e:	fba3 1302 	umull	r1, r3, r3, r2
 8001282:	08d9      	lsrs	r1, r3, #3
 8001284:	460b      	mov	r3, r1
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	b25b      	sxtb	r3, r3
 8001292:	4303      	orrs	r3, r0
 8001294:	b25b      	sxtb	r3, r3
 8001296:	b2db      	uxtb	r3, r3
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	cccccccd 	.word	0xcccccccd

080012a8 <BCD2Decimal>:

uint8_t BCD2Decimal(uint8_t num){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	return (num>>4)*10+(num&0x0F);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <Print_DateTime>:

void Print_DateTime(Datetime* dt)
{
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af04      	add	r7, sp, #16
 80012de:	6078      	str	r0, [r7, #4]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
           dt->hours, dt->minutes, dt->second,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	789b      	ldrb	r3, [r3, #2]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
 80012e4:	461c      	mov	r4, r3
           dt->hours, dt->minutes, dt->second,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	785b      	ldrb	r3, [r3, #1]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
 80012ea:	461d      	mov	r5, r3
           dt->hours, dt->minutes, dt->second,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
 80012f0:	461e      	mov	r6, r3
           dt->day,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	78db      	ldrb	r3, [r3, #3]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
 80012f6:	461a      	mov	r2, r3
           dt->date, dt->month, dt->year);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	791b      	ldrb	r3, [r3, #4]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
 80012fc:	4619      	mov	r1, r3
           dt->date, dt->month, dt->year);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	795b      	ldrb	r3, [r3, #5]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
 8001302:	4618      	mov	r0, r3
           dt->date, dt->month, dt->year);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	799b      	ldrb	r3, [r3, #6]
    printf(" %02d:%02d:%02d   %d, %02d/%02d/20%02d\r\n",
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	9002      	str	r0, [sp, #8]
 800130c:	9101      	str	r1, [sp, #4]
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	4633      	mov	r3, r6
 8001312:	462a      	mov	r2, r5
 8001314:	4621      	mov	r1, r4
 8001316:	4803      	ldr	r0, [pc, #12]	@ (8001324 <Print_DateTime+0x4c>)
 8001318:	f006 fd8e 	bl	8007e38 <iprintf>
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001324:	0800b70c 	.word	0x0800b70c

08001328 <RTC_Writetime>:

void RTC_Writetime(Datetime *dt){
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t buff[8];
	buff[0] = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	723b      	strb	r3, [r7, #8]
	buff[1] = Decimal2BCD(dt->second);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff91 	bl	8001260 <Decimal2BCD>
 800133e:	4603      	mov	r3, r0
 8001340:	727b      	strb	r3, [r7, #9]
	buff[2] = Decimal2BCD(dt->minutes);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff8a 	bl	8001260 <Decimal2BCD>
 800134c:	4603      	mov	r3, r0
 800134e:	72bb      	strb	r3, [r7, #10]
	buff[3] = Decimal2BCD(dt->hours);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	789b      	ldrb	r3, [r3, #2]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff83 	bl	8001260 <Decimal2BCD>
 800135a:	4603      	mov	r3, r0
 800135c:	72fb      	strb	r3, [r7, #11]
	buff[4] = Decimal2BCD(dt->day);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	78db      	ldrb	r3, [r3, #3]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff7c 	bl	8001260 <Decimal2BCD>
 8001368:	4603      	mov	r3, r0
 800136a:	733b      	strb	r3, [r7, #12]
	buff[5] = Decimal2BCD(dt->date);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff75 	bl	8001260 <Decimal2BCD>
 8001376:	4603      	mov	r3, r0
 8001378:	737b      	strb	r3, [r7, #13]
	buff[6] = Decimal2BCD(dt->month);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	795b      	ldrb	r3, [r3, #5]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff6e 	bl	8001260 <Decimal2BCD>
 8001384:	4603      	mov	r3, r0
 8001386:	73bb      	strb	r3, [r7, #14]
	buff[7] = Decimal2BCD(dt->year);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	799b      	ldrb	r3, [r3, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff67 	bl	8001260 <Decimal2BCD>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1,  RTC_ADDESS, buff, 8, 100);
 8001396:	f107 0208 	add.w	r2, r7, #8
 800139a:	2364      	movs	r3, #100	@ 0x64
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2308      	movs	r3, #8
 80013a0:	21d0      	movs	r1, #208	@ 0xd0
 80013a2:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <RTC_Writetime+0x88>)
 80013a4:	f001 ff08 	bl	80031b8 <HAL_I2C_Master_Transmit>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000220 	.word	0x20000220

080013b4 <RTC_Readtime>:

void RTC_Readtime(Datetime *dt){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]
	uint8_t buff[8];
	uint8_t addr_reg = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDESS, &addr_reg, 1, 100);
 80013c0:	f107 020f 	add.w	r2, r7, #15
 80013c4:	2364      	movs	r3, #100	@ 0x64
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	21d0      	movs	r1, #208	@ 0xd0
 80013cc:	4825      	ldr	r0, [pc, #148]	@ (8001464 <RTC_Readtime+0xb0>)
 80013ce:	f001 fef3 	bl	80031b8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDESS, buff, 7, 100);
 80013d2:	f107 0210 	add.w	r2, r7, #16
 80013d6:	2364      	movs	r3, #100	@ 0x64
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2307      	movs	r3, #7
 80013dc:	21d0      	movs	r1, #208	@ 0xd0
 80013de:	4821      	ldr	r0, [pc, #132]	@ (8001464 <RTC_Readtime+0xb0>)
 80013e0:	f001 ffe8 	bl	80033b4 <HAL_I2C_Master_Receive>
	dt->second = BCD2Decimal(buff[0]);
 80013e4:	7c3b      	ldrb	r3, [r7, #16]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff5e 	bl	80012a8 <BCD2Decimal>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	701a      	strb	r2, [r3, #0]
	dt->minutes = BCD2Decimal(buff[1]);
 80013f4:	7c7b      	ldrb	r3, [r7, #17]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff56 	bl	80012a8 <BCD2Decimal>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	705a      	strb	r2, [r3, #1]
	dt->hours = BCD2Decimal(buff[2]);
 8001404:	7cbb      	ldrb	r3, [r7, #18]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff4e 	bl	80012a8 <BCD2Decimal>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	709a      	strb	r2, [r3, #2]
	dt->day = BCD2Decimal(buff[3]);
 8001414:	7cfb      	ldrb	r3, [r7, #19]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff46 	bl	80012a8 <BCD2Decimal>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	70da      	strb	r2, [r3, #3]
	dt->date = BCD2Decimal(buff[4]);
 8001424:	7d3b      	ldrb	r3, [r7, #20]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff3e 	bl	80012a8 <BCD2Decimal>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	711a      	strb	r2, [r3, #4]
	dt->month = BCD2Decimal(buff[5]);
 8001434:	7d7b      	ldrb	r3, [r7, #21]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff36 	bl	80012a8 <BCD2Decimal>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	715a      	strb	r2, [r3, #5]
	dt->year = BCD2Decimal(buff[6]);
 8001444:	7dbb      	ldrb	r3, [r7, #22]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff2e 	bl	80012a8 <BCD2Decimal>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	719a      	strb	r2, [r3, #6]
	Print_DateTime(&date_time);
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <RTC_Readtime+0xb4>)
 8001456:	f7ff ff3f 	bl	80012d8 <Print_DateTime>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000220 	.word	0x20000220
 8001468:	2000031c 	.word	0x2000031c

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fc28 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001474:	f000 f84a 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001478:	f000 f96e 	bl	8001758 <MX_GPIO_Init>
  MX_ADC1_Init();
 800147c:	f000 f89e 	bl	80015bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001480:	f000 f940 	bl	8001704 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001484:	f000 f8d8 	bl	8001638 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001488:	f000 f904 	bl	8001694 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	491a      	ldr	r1, [pc, #104]	@ (80014f8 <main+0x8c>)
 8001490:	481a      	ldr	r0, [pc, #104]	@ (80014fc <main+0x90>)
 8001492:	f005 f814 	bl	80064be <HAL_UART_Receive_IT>

  date_time.second = 50;
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <main+0x94>)
 8001498:	2232      	movs	r2, #50	@ 0x32
 800149a:	701a      	strb	r2, [r3, #0]
  date_time.minutes = 51;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <main+0x94>)
 800149e:	2233      	movs	r2, #51	@ 0x33
 80014a0:	705a      	strb	r2, [r3, #1]
  date_time.hours = 7;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <main+0x94>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	709a      	strb	r2, [r3, #2]
  date_time.day = 2;
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <main+0x94>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	70da      	strb	r2, [r3, #3]
  date_time.date = 6;
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <main+0x94>)
 80014b0:	2206      	movs	r2, #6
 80014b2:	711a      	strb	r2, [r3, #4]
  date_time.month = 11;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <main+0x94>)
 80014b6:	220b      	movs	r2, #11
 80014b8:	715a      	strb	r2, [r3, #5]
  date_time.year = 23;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <main+0x94>)
 80014bc:	2217      	movs	r2, #23
 80014be:	719a      	strb	r2, [r3, #6]
  RTC_Writetime(&date_time);
 80014c0:	480f      	ldr	r0, [pc, #60]	@ (8001500 <main+0x94>)
 80014c2:	f7ff ff31 	bl	8001328 <RTC_Writetime>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TempValue = Read_Temperature();
 80014c6:	f7ff fe15 	bl	80010f4 <Read_Temperature>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <main+0x98>)
 80014ce:	6013      	str	r3, [r2, #0]

	  printf("Temperature STM32 is: %.2f\n", TempValue);
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <main+0x98>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ffa7 	bl	8000428 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	480a      	ldr	r0, [pc, #40]	@ (8001508 <main+0x9c>)
 80014e0:	f006 fcaa 	bl	8007e38 <iprintf>

	  RTC_Readtime(&date_time);
 80014e4:	4806      	ldr	r0, [pc, #24]	@ (8001500 <main+0x94>)
 80014e6:	f7ff ff65 	bl	80013b4 <RTC_Readtime>
	  HAL_Delay(1000);
 80014ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ee:	f000 fc4b 	bl	8001d88 <HAL_Delay>
	  TempValue = Read_Temperature();
 80014f2:	bf00      	nop
 80014f4:	e7e7      	b.n	80014c6 <main+0x5a>
 80014f6:	bf00      	nop
 80014f8:	20000318 	.word	0x20000318
 80014fc:	200002cc 	.word	0x200002cc
 8001500:	2000031c 	.word	0x2000031c
 8001504:	20000314 	.word	0x20000314
 8001508:	0800b738 	.word	0x0800b738

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	@ 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001516:	2228      	movs	r2, #40	@ 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f006 fd01 	bl	8007f22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153c:	2302      	movs	r3, #2
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001540:	2301      	movs	r3, #1
 8001542:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001544:	2310      	movs	r3, #16
 8001546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001548:	2302      	movs	r3, #2
 800154a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800154c:	2300      	movs	r3, #0
 800154e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001550:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155a:	4618      	mov	r0, r3
 800155c:	f004 f8d4 	bl	8005708 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001566:	f000 f959 	bl	800181c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fb40 	bl	8005c0c <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001592:	f000 f943 	bl	800181c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001596:	2302      	movs	r3, #2
 8001598:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800159a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fcc0 	bl	8005f28 <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015ae:	f000 f935 	bl	800181c <Error_Handler>
  }
}
 80015b2:	bf00      	nop
 80015b4:	3750      	adds	r7, #80	@ 0x50
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015cc:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015ce:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <MX_ADC1_Init+0x78>)
 80015d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015d2:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015de:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80015ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f8:	480d      	ldr	r0, [pc, #52]	@ (8001630 <MX_ADC1_Init+0x74>)
 80015fa:	f000 fbe9 	bl	8001dd0 <HAL_ADC_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 f90a 	bl	800181c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001608:	2310      	movs	r3, #16
 800160a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800160c:	2301      	movs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_ADC1_Init+0x74>)
 800161a:	f000 ff6f 	bl	80024fc <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001624:	f000 f8fa 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001f0 	.word	0x200001f0
 8001634:	40012400 	.word	0x40012400

08001638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_I2C1_Init+0x50>)
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <MX_I2C1_Init+0x54>)
 8001640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_I2C1_Init+0x50>)
 8001644:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <MX_I2C1_Init+0x58>)
 8001646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_I2C1_Init+0x50>)
 8001656:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800165a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <MX_I2C1_Init+0x50>)
 8001676:	f001 fc47 	bl	8002f08 <HAL_I2C_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001680:	f000 f8cc 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000220 	.word	0x20000220
 800168c:	40005400 	.word	0x40005400
 8001690:	000186a0 	.word	0x000186a0

08001694 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_SPI2_Init+0x68>)
 800169a:	4a19      	ldr	r2, [pc, #100]	@ (8001700 <MX_SPI2_Init+0x6c>)
 800169c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016da:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016dc:	2200      	movs	r2, #0
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016e2:	220a      	movs	r2, #10
 80016e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_SPI2_Init+0x68>)
 80016e8:	f004 fd8a 	bl	8006200 <HAL_SPI_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016f2:	f000 f893 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000274 	.word	0x20000274
 8001700:	40003800 	.word	0x40003800

08001704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_USART1_UART_Init+0x50>)
 800170c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_USART1_UART_Init+0x4c>)
 800173c:	f004 fde4 	bl	8006308 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001746:	f000 f869 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002cc 	.word	0x200002cc
 8001754:	40013800 	.word	0x40013800

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176c:	4b28      	ldr	r3, [pc, #160]	@ (8001810 <MX_GPIO_Init+0xb8>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a27      	ldr	r2, [pc, #156]	@ (8001810 <MX_GPIO_Init+0xb8>)
 8001772:	f043 0320 	orr.w	r3, r3, #32
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <MX_GPIO_Init+0xb8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <MX_GPIO_Init+0xb8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <MX_GPIO_Init+0xb8>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <MX_GPIO_Init+0xb8>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <MX_GPIO_Init+0xb8>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <MX_GPIO_Init+0xb8>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <MX_GPIO_Init+0xb8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80017ba:	4816      	ldr	r0, [pc, #88]	@ (8001814 <MX_GPIO_Init+0xbc>)
 80017bc:	f001 fb8c 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017c6:	4814      	ldr	r0, [pc, #80]	@ (8001818 <MX_GPIO_Init+0xc0>)
 80017c8:	f001 fb86 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 80017cc:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80017d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2302      	movs	r3, #2
 80017dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	480b      	ldr	r0, [pc, #44]	@ (8001814 <MX_GPIO_Init+0xbc>)
 80017e6:	f001 f9f3 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80017ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_GPIO_Init+0xc0>)
 8001804:	f001 f9e4 	bl	8002bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40010800 	.word	0x40010800

0800181c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
}
 8001822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <Error_Handler+0x8>

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_MspInit+0x5c>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <HAL_MspInit+0x5c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_MspInit+0x5c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_MspInit+0x5c>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a0e      	ldr	r2, [pc, #56]	@ (8001884 <HAL_MspInit+0x5c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <HAL_MspInit+0x5c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <HAL_MspInit+0x60>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_MspInit+0x60>)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000

0800188c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <HAL_ADC_MspInit+0x44>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d113      	bne.n	80018c6 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_ADC_MspInit+0x48>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	@ (80018d4 <HAL_ADC_MspInit+0x48>)
 80018a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_ADC_MspInit+0x48>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	2012      	movs	r0, #18
 80018bc:	f001 f891 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80018c0:	2012      	movs	r0, #18
 80018c2:	f001 f8aa 	bl	8002a1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40012400 	.word	0x40012400
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <HAL_I2C_MspInit+0x80>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d12b      	bne.n	8001950 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_I2C_MspInit+0x84>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_I2C_MspInit+0x84>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_I2C_MspInit+0x84>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001910:	23c0      	movs	r3, #192	@ 0xc0
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001914:	2312      	movs	r3, #18
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	480f      	ldr	r0, [pc, #60]	@ (8001960 <HAL_I2C_MspInit+0x88>)
 8001924:	f001 f954 	bl	8002bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <HAL_I2C_MspInit+0x84>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <HAL_I2C_MspInit+0x84>)
 800192e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001932:	61d3      	str	r3, [r2, #28]
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_I2C_MspInit+0x84>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2103      	movs	r1, #3
 8001944:	201f      	movs	r0, #31
 8001946:	f001 f84c 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800194a:	201f      	movs	r0, #31
 800194c:	f001 f865 	bl	8002a1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40005400 	.word	0x40005400
 800195c:	40021000 	.word	0x40021000
 8001960:	40010c00 	.word	0x40010c00

08001964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a16      	ldr	r2, [pc, #88]	@ (80019d8 <HAL_SPI_MspInit+0x74>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d124      	bne.n	80019ce <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_SPI_MspInit+0x78>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <HAL_SPI_MspInit+0x78>)
 800198a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198e:	61d3      	str	r3, [r2, #28]
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_SPI_MspInit+0x78>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <HAL_SPI_MspInit+0x78>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a0e      	ldr	r2, [pc, #56]	@ (80019dc <HAL_SPI_MspInit+0x78>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_SPI_MspInit+0x78>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019b4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80019b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <HAL_SPI_MspInit+0x7c>)
 80019ca:	f001 f901 	bl	8002bd0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40003800 	.word	0x40003800
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010c00 	.word	0x40010c00

080019e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a20      	ldr	r2, [pc, #128]	@ (8001a80 <HAL_UART_MspInit+0x9c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d139      	bne.n	8001a78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480f      	ldr	r0, [pc, #60]	@ (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a4a:	f001 f8c1 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a64:	f001 f8b4 	bl	8002bd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2105      	movs	r1, #5
 8001a6c:	2025      	movs	r0, #37	@ 0x25
 8001a6e:	f000 ffb8 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a72:	2025      	movs	r0, #37	@ 0x25
 8001a74:	f000 ffd1 	bl	8002a1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010800 	.word	0x40010800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f938 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <ADC1_2_IRQHandler+0x10>)
 8001aea:	f000 fc35 	bl	8002358 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200001f0 	.word	0x200001f0

08001af8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <I2C1_EV_IRQHandler+0x10>)
 8001afe:	f001 fec5 	bl	800388c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000220 	.word	0x20000220

08001b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <USART1_IRQHandler+0x10>)
 8001b12:	f004 fcf9 	bl	8006508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200002cc 	.word	0x200002cc

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <_kill>:

int _kill(int pid, int sig)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b38:	f006 fa46 	bl	8007fc8 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2216      	movs	r2, #22
 8001b40:	601a      	str	r2, [r3, #0]
  return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_exit>:

void _exit (int status)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b56:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffe7 	bl	8001b2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <_exit+0x12>

08001b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e00a      	b.n	8001b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b76:	f3af 8000 	nop.w
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf0      	blt.n	8001b76 <_read+0x12>
  }

  return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <_isatty>:

int _isatty(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
	...

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c30:	f006 f9ca 	bl	8007fc8 <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	220c      	movs	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20005000 	.word	0x20005000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	20000324 	.word	0x20000324
 8001c68:	20000478 	.word	0x20000478

08001c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c78:	f7ff fff8 	bl	8001c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c7c:	480b      	ldr	r0, [pc, #44]	@ (8001cac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c7e:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c80:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c94:	4c09      	ldr	r4, [pc, #36]	@ (8001cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f006 f997 	bl	8007fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ca6:	f7ff fbe1 	bl	800146c <main>
  bx lr
 8001caa:	4770      	bx	lr
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cb4:	0800bbd0 	.word	0x0800bbd0
  ldr r2, =_sbss
 8001cb8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cbc:	20000478 	.word	0x20000478

08001cc0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <CAN1_RX1_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_Init+0x28>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <HAL_Init+0x28>)
 8001cce:	f043 0310 	orr.w	r3, r3, #16
 8001cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 fe79 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cda:	200f      	movs	r0, #15
 8001cdc:	f000 f808 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce0:	f7ff fda2 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40022000 	.word	0x40022000

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fe91 	bl	8002a36 <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 fe59 	bl	80029e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_IncTick+0x1c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_IncTick+0x20>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a03      	ldr	r2, [pc, #12]	@ (8001d70 <HAL_IncTick+0x20>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000328 	.word	0x20000328

08001d74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b02      	ldr	r3, [pc, #8]	@ (8001d84 <HAL_GetTick+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000328 	.word	0x20000328

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffe0 	bl	8001d74 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0be      	b.n	8001f70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fd3c 	bl	800188c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fcc3 	bl	80027a0 <ADC_ConversionStop_Disable>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 8099 	bne.w	8001f5e <HAL_ADC_Init+0x18e>
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 8095 	bne.w	8001f5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e3c:	f023 0302 	bic.w	r3, r3, #2
 8001e40:	f043 0202 	orr.w	r2, r3, #2
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7b1b      	ldrb	r3, [r3, #12]
 8001e56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e68:	d003      	beq.n	8001e72 <HAL_ADC_Init+0xa2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_ADC_Init+0xa8>
 8001e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e76:	e000      	b.n	8001e7a <HAL_ADC_Init+0xaa>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7d1b      	ldrb	r3, [r3, #20]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d119      	bne.n	8001ebc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7b1b      	ldrb	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	035a      	lsls	r2, r3, #13
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e00b      	b.n	8001ebc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <HAL_ADC_Init+0x1a8>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_Init+0x126>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d104      	bne.n	8001f00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	051b      	lsls	r3, r3, #20
 8001efe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_ADC_Init+0x1ac>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f3a:	e018      	b.n	8001f6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f023 0312 	bic.w	r3, r3, #18
 8001f44:	f043 0210 	orr.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	ffe1f7fd 	.word	0xffe1f7fd
 8001f7c:	ff1f0efe 	.word	0xff1f0efe

08001f80 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Start+0x1a>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e098      	b.n	80020cc <HAL_ADC_Start+0x14c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fba2 	bl	80026ec <ADC_Enable>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8087 	bne.w	80020c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a41      	ldr	r2, [pc, #260]	@ (80020d4 <HAL_ADC_Start+0x154>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d105      	bne.n	8001fde <HAL_ADC_Start+0x5e>
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_ADC_Start+0x158>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d026      	beq.n	8002046 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002000:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	e01d      	b.n	8002046 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2f      	ldr	r2, [pc, #188]	@ (80020d8 <HAL_ADC_Start+0x158>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d004      	beq.n	800202a <HAL_ADC_Start+0xaa>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <HAL_ADC_Start+0x154>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10d      	bne.n	8002046 <HAL_ADC_Start+0xc6>
 800202a:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <HAL_ADC_Start+0x158>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800203e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	f023 0206 	bic.w	r2, r3, #6
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800205e:	e002      	b.n	8002066 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0202 	mvn.w	r2, #2
 8002076:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002082:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002086:	d113      	bne.n	80020b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800208c:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <HAL_ADC_Start+0x154>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d105      	bne.n	800209e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_ADC_Start+0x158>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	e00c      	b.n	80020ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e003      	b.n	80020ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40012800 	.word	0x40012800
 80020d8:	40012400 	.word	0x40012400

080020dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_Stop+0x1a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e01a      	b.n	800212c <HAL_ADC_Stop+0x50>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fb4e 	bl	80027a0 <ADC_ConversionStop_Disable>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800214a:	f7ff fe13 	bl	8001d74 <HAL_GetTick>
 800214e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0d3      	b.n	800231e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d131      	bne.n	80021e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d12a      	bne.n	80021e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002192:	e021      	b.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d01d      	beq.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_ADC_PollForConversion+0x7e>
 80021a2:	f7ff fde7 	bl	8001d74 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d212      	bcs.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0a2      	b.n	800231e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0d6      	beq.n	8002194 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021e6:	e070      	b.n	80022ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002328 <HAL_ADC_PollForConversion+0x1f4>)
 80021ea:	681c      	ldr	r4, [r3, #0]
 80021ec:	2002      	movs	r0, #2
 80021ee:	f003 ff51 	bl	8006094 <HAL_RCCEx_GetPeriphCLKFreq>
 80021f2:	4603      	mov	r3, r0
 80021f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <HAL_ADC_PollForConversion+0x1f8>)
 8002200:	400b      	ands	r3, r1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_ADC_PollForConversion+0x104>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	4b48      	ldr	r3, [pc, #288]	@ (8002330 <HAL_ADC_PollForConversion+0x1fc>)
 800220e:	400b      	ands	r3, r1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d111      	bne.n	8002238 <HAL_ADC_PollForConversion+0x104>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6919      	ldr	r1, [r3, #16]
 800221a:	4b46      	ldr	r3, [pc, #280]	@ (8002334 <HAL_ADC_PollForConversion+0x200>)
 800221c:	400b      	ands	r3, r1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d108      	bne.n	8002234 <HAL_ADC_PollForConversion+0x100>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68d9      	ldr	r1, [r3, #12]
 8002228:	4b43      	ldr	r3, [pc, #268]	@ (8002338 <HAL_ADC_PollForConversion+0x204>)
 800222a:	400b      	ands	r3, r1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_PollForConversion+0x100>
 8002230:	2314      	movs	r3, #20
 8002232:	e020      	b.n	8002276 <HAL_ADC_PollForConversion+0x142>
 8002234:	2329      	movs	r3, #41	@ 0x29
 8002236:	e01e      	b.n	8002276 <HAL_ADC_PollForConversion+0x142>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6919      	ldr	r1, [r3, #16]
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_ADC_PollForConversion+0x200>)
 8002240:	400b      	ands	r3, r1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_ADC_PollForConversion+0x120>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68d9      	ldr	r1, [r3, #12]
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <HAL_ADC_PollForConversion+0x204>)
 800224e:	400b      	ands	r3, r1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <HAL_ADC_PollForConversion+0x13c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	4b38      	ldr	r3, [pc, #224]	@ (800233c <HAL_ADC_PollForConversion+0x208>)
 800225c:	400b      	ands	r3, r1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <HAL_ADC_PollForConversion+0x140>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68d9      	ldr	r1, [r3, #12]
 8002268:	4b34      	ldr	r3, [pc, #208]	@ (800233c <HAL_ADC_PollForConversion+0x208>)
 800226a:	400b      	ands	r3, r1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_PollForConversion+0x140>
 8002270:	2354      	movs	r3, #84	@ 0x54
 8002272:	e000      	b.n	8002276 <HAL_ADC_PollForConversion+0x142>
 8002274:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800227c:	e021      	b.n	80022c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d01a      	beq.n	80022bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_ADC_PollForConversion+0x168>
 800228c:	f7ff fd72 	bl	8001d74 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d20f      	bcs.n	80022bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d90b      	bls.n	80022bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e030      	b.n	800231e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d8d9      	bhi.n	800227e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0212 	mvn.w	r2, #18
 80022d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022ee:	d115      	bne.n	800231c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000
 800232c:	24924924 	.word	0x24924924
 8002330:	00924924 	.word	0x00924924
 8002334:	12492492 	.word	0x12492492
 8002338:	00492492 	.word	0x00492492
 800233c:	00249249 	.word	0x00249249

08002340 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d03e      	beq.n	80023f8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d039      	beq.n	80023f8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023aa:	d11d      	bne.n	80023e8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d119      	bne.n	80023e8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0220 	bic.w	r2, r2, #32
 80023c2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f874 	bl	80024d6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0212 	mvn.w	r2, #18
 80023f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d04d      	beq.n	800249e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d048      	beq.n	800249e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800242e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002432:	d012      	beq.n	800245a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800243e:	2b00      	cmp	r3, #0
 8002440:	d125      	bne.n	800248e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800244c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002450:	d11d      	bne.n	800248e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002468:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9c7 	bl	8002822 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 020c 	mvn.w	r2, #12
 800249c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f812 	bl	80024e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0201 	mvn.w	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x20>
 8002518:	2302      	movs	r3, #2
 800251a:	e0dc      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1da>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d81c      	bhi.n	8002566 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b05      	subs	r3, #5
 800253e:	221f      	movs	r2, #31
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	4019      	ands	r1, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	fa00 f203 	lsl.w	r2, r0, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	635a      	str	r2, [r3, #52]	@ 0x34
 8002564:	e03c      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d81c      	bhi.n	80025a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b23      	subs	r3, #35	@ 0x23
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	4019      	ands	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b23      	subs	r3, #35	@ 0x23
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80025a6:	e01b      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b41      	subs	r3, #65	@ 0x41
 80025ba:	221f      	movs	r2, #31
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4019      	ands	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b41      	subs	r3, #65	@ 0x41
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d91c      	bls.n	8002622 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	3b1e      	subs	r3, #30
 80025fa:	2207      	movs	r2, #7
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	4019      	ands	r1, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6898      	ldr	r0, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	3b1e      	subs	r3, #30
 8002614:	fa00 f203 	lsl.w	r2, r0, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	e019      	b.n	8002656 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6919      	ldr	r1, [r3, #16]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	2207      	movs	r2, #7
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	4019      	ands	r1, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6898      	ldr	r0, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	fa00 f203 	lsl.w	r2, r0, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b10      	cmp	r3, #16
 800265c:	d003      	beq.n	8002666 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002662:	2b11      	cmp	r3, #17
 8002664:	d132      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d125      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d126      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800268c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b10      	cmp	r3, #16
 8002694:	d11a      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x1b2>
 80026ba:	e007      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012400 	.word	0x40012400
 80026e4:	20000000 	.word	0x20000000
 80026e8:	431bde83 	.word	0x431bde83

080026ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d040      	beq.n	800278c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800271a:	4b1f      	ldr	r3, [pc, #124]	@ (8002798 <ADC_Enable+0xac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1f      	ldr	r2, [pc, #124]	@ (800279c <ADC_Enable+0xb0>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002728:	e002      	b.n	8002730 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3b01      	subs	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f9      	bne.n	800272a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002736:	f7ff fb1d 	bl	8001d74 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800273c:	e01f      	b.n	800277e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800273e:	f7ff fb19 	bl	8001d74 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d918      	bls.n	800277e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d011      	beq.n	800277e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e007      	b.n	800278e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d1d8      	bne.n	800273e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000
 800279c:	431bde83 	.word	0x431bde83

080027a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d12e      	bne.n	8002818 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ca:	f7ff fad3 	bl	8001d74 <HAL_GetTick>
 80027ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027d0:	e01b      	b.n	800280a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027d2:	f7ff facf 	bl	8001d74 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d914      	bls.n	800280a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10d      	bne.n	800280a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e007      	b.n	800281a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d0dc      	beq.n	80027d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	@ (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4906      	ldr	r1, [pc, #24]	@ (80028cc <__NVIC_EnableIRQ+0x34>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100

080028d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	db0a      	blt.n	80028fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	490c      	ldr	r1, [pc, #48]	@ (800291c <__NVIC_SetPriority+0x4c>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f8:	e00a      	b.n	8002910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4908      	ldr	r1, [pc, #32]	@ (8002920 <__NVIC_SetPriority+0x50>)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3b04      	subs	r3, #4
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	440b      	add	r3, r1
 800290e:	761a      	strb	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000e100 	.word	0xe000e100
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	@ 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f1c3 0307 	rsb	r3, r3, #7
 800293e:	2b04      	cmp	r3, #4
 8002940:	bf28      	it	cs
 8002942:	2304      	movcs	r3, #4
 8002944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3304      	adds	r3, #4
 800294a:	2b06      	cmp	r3, #6
 800294c:	d902      	bls.n	8002954 <NVIC_EncodePriority+0x30>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3b03      	subs	r3, #3
 8002952:	e000      	b.n	8002956 <NVIC_EncodePriority+0x32>
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800296c:	f04f 31ff 	mov.w	r1, #4294967295
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43d9      	mvns	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	4313      	orrs	r3, r2
         );
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	@ 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f7ff ff90 	bl	80028d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff2d 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f4:	f7ff ff42 	bl	800287c <__NVIC_GetPriorityGrouping>
 80029f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff90 	bl	8002924 <NVIC_EncodePriority>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff5f 	bl	80028d0 <__NVIC_SetPriority>
}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff35 	bl	8002898 <__NVIC_EnableIRQ>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ffa2 	bl	8002988 <SysTick_Config>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d008      	beq.n	8002a78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e020      	b.n	8002aba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 020e 	bic.w	r2, r2, #14
 8002a86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d005      	beq.n	8002ae8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e051      	b.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 020e 	bic.w	r2, r2, #14
 8002af6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a22      	ldr	r2, [pc, #136]	@ (8002b98 <HAL_DMA_Abort_IT+0xd4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d029      	beq.n	8002b66 <HAL_DMA_Abort_IT+0xa2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	@ (8002b9c <HAL_DMA_Abort_IT+0xd8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_Abort_IT+0x9e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba0 <HAL_DMA_Abort_IT+0xdc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x98>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba4 <HAL_DMA_Abort_IT+0xe0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d012      	beq.n	8002b56 <HAL_DMA_Abort_IT+0x92>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <HAL_DMA_Abort_IT+0xe4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00a      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x8c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <HAL_DMA_Abort_IT+0xe8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <HAL_DMA_Abort_IT+0x86>
 8002b44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b48:	e00e      	b.n	8002b68 <HAL_DMA_Abort_IT+0xa4>
 8002b4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b4e:	e00b      	b.n	8002b68 <HAL_DMA_Abort_IT+0xa4>
 8002b50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b54:	e008      	b.n	8002b68 <HAL_DMA_Abort_IT+0xa4>
 8002b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b5a:	e005      	b.n	8002b68 <HAL_DMA_Abort_IT+0xa4>
 8002b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b60:	e002      	b.n	8002b68 <HAL_DMA_Abort_IT+0xa4>
 8002b62:	2310      	movs	r3, #16
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_Abort_IT+0xa4>
 8002b66:	2301      	movs	r3, #1
 8002b68:	4a11      	ldr	r2, [pc, #68]	@ (8002bb0 <HAL_DMA_Abort_IT+0xec>)
 8002b6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
    } 
  }
  return status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40020008 	.word	0x40020008
 8002b9c:	4002001c 	.word	0x4002001c
 8002ba0:	40020030 	.word	0x40020030
 8002ba4:	40020044 	.word	0x40020044
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	4002006c 	.word	0x4002006c
 8002bb0:	40020000 	.word	0x40020000

08002bb4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bc2:	b2db      	uxtb	r3, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b08b      	sub	sp, #44	@ 0x2c
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be2:	e169      	b.n	8002eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002be4:	2201      	movs	r2, #1
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8158 	bne.w	8002eb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a9a      	ldr	r2, [pc, #616]	@ (8002e70 <HAL_GPIO_Init+0x2a0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d05e      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c0c:	4a98      	ldr	r2, [pc, #608]	@ (8002e70 <HAL_GPIO_Init+0x2a0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d875      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c12:	4a98      	ldr	r2, [pc, #608]	@ (8002e74 <HAL_GPIO_Init+0x2a4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d058      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c18:	4a96      	ldr	r2, [pc, #600]	@ (8002e74 <HAL_GPIO_Init+0x2a4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d86f      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c1e:	4a96      	ldr	r2, [pc, #600]	@ (8002e78 <HAL_GPIO_Init+0x2a8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d052      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c24:	4a94      	ldr	r2, [pc, #592]	@ (8002e78 <HAL_GPIO_Init+0x2a8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d869      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c2a:	4a94      	ldr	r2, [pc, #592]	@ (8002e7c <HAL_GPIO_Init+0x2ac>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d04c      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c30:	4a92      	ldr	r2, [pc, #584]	@ (8002e7c <HAL_GPIO_Init+0x2ac>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d863      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c36:	4a92      	ldr	r2, [pc, #584]	@ (8002e80 <HAL_GPIO_Init+0x2b0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d046      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c3c:	4a90      	ldr	r2, [pc, #576]	@ (8002e80 <HAL_GPIO_Init+0x2b0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d85d      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	d82a      	bhi.n	8002c9c <HAL_GPIO_Init+0xcc>
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d859      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c50 <HAL_GPIO_Init+0x80>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002ccb 	.word	0x08002ccb
 8002c54:	08002ca5 	.word	0x08002ca5
 8002c58:	08002cb7 	.word	0x08002cb7
 8002c5c:	08002cf9 	.word	0x08002cf9
 8002c60:	08002cff 	.word	0x08002cff
 8002c64:	08002cff 	.word	0x08002cff
 8002c68:	08002cff 	.word	0x08002cff
 8002c6c:	08002cff 	.word	0x08002cff
 8002c70:	08002cff 	.word	0x08002cff
 8002c74:	08002cff 	.word	0x08002cff
 8002c78:	08002cff 	.word	0x08002cff
 8002c7c:	08002cff 	.word	0x08002cff
 8002c80:	08002cff 	.word	0x08002cff
 8002c84:	08002cff 	.word	0x08002cff
 8002c88:	08002cff 	.word	0x08002cff
 8002c8c:	08002cff 	.word	0x08002cff
 8002c90:	08002cff 	.word	0x08002cff
 8002c94:	08002cad 	.word	0x08002cad
 8002c98:	08002cc1 	.word	0x08002cc1
 8002c9c:	4a79      	ldr	r2, [pc, #484]	@ (8002e84 <HAL_GPIO_Init+0x2b4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ca2:	e02c      	b.n	8002cfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	623b      	str	r3, [r7, #32]
          break;
 8002caa:	e029      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	e024      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	3308      	adds	r3, #8
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e01f      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e01a      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	623b      	str	r3, [r7, #32]
          break;
 8002cd6:	e013      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	611a      	str	r2, [r3, #16]
          break;
 8002cea:	e009      	b.n	8002d00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cec:	2308      	movs	r3, #8
 8002cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	615a      	str	r2, [r3, #20]
          break;
 8002cf6:	e003      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
          break;
 8002cfc:	e000      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          break;
 8002cfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2bff      	cmp	r3, #255	@ 0xff
 8002d04:	d801      	bhi.n	8002d0a <HAL_GPIO_Init+0x13a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	e001      	b.n	8002d0e <HAL_GPIO_Init+0x13e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2bff      	cmp	r3, #255	@ 0xff
 8002d14:	d802      	bhi.n	8002d1c <HAL_GPIO_Init+0x14c>
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	e002      	b.n	8002d22 <HAL_GPIO_Init+0x152>
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	3b08      	subs	r3, #8
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	210f      	movs	r1, #15
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80b1 	beq.w	8002eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d50:	4b4d      	ldr	r3, [pc, #308]	@ (8002e88 <HAL_GPIO_Init+0x2b8>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	4a4c      	ldr	r2, [pc, #304]	@ (8002e88 <HAL_GPIO_Init+0x2b8>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6193      	str	r3, [r2, #24]
 8002d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <HAL_GPIO_Init+0x2b8>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d68:	4a48      	ldr	r2, [pc, #288]	@ (8002e8c <HAL_GPIO_Init+0x2bc>)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	3302      	adds	r3, #2
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	220f      	movs	r2, #15
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a40      	ldr	r2, [pc, #256]	@ (8002e90 <HAL_GPIO_Init+0x2c0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_GPIO_Init+0x1ec>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3f      	ldr	r2, [pc, #252]	@ (8002e94 <HAL_GPIO_Init+0x2c4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00d      	beq.n	8002db8 <HAL_GPIO_Init+0x1e8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e98 <HAL_GPIO_Init+0x2c8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <HAL_GPIO_Init+0x1e4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3d      	ldr	r2, [pc, #244]	@ (8002e9c <HAL_GPIO_Init+0x2cc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_GPIO_Init+0x1e0>
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002db0:	2304      	movs	r3, #4
 8002db2:	e004      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e002      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	f002 0203 	and.w	r2, r2, #3
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	4093      	lsls	r3, r2
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dce:	492f      	ldr	r1, [pc, #188]	@ (8002e8c <HAL_GPIO_Init+0x2bc>)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002de8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	492c      	ldr	r1, [pc, #176]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002df6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4928      	ldr	r1, [pc, #160]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e10:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	4922      	ldr	r1, [pc, #136]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60cb      	str	r3, [r1, #12]
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	491e      	ldr	r1, [pc, #120]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4918      	ldr	r1, [pc, #96]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
 8002e44:	e006      	b.n	8002e54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e46:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	4914      	ldr	r1, [pc, #80]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d021      	beq.n	8002ea4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	490e      	ldr	r1, [pc, #56]	@ (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e021      	b.n	8002eb2 <HAL_GPIO_Init+0x2e2>
 8002e6e:	bf00      	nop
 8002e70:	10320000 	.word	0x10320000
 8002e74:	10310000 	.word	0x10310000
 8002e78:	10220000 	.word	0x10220000
 8002e7c:	10210000 	.word	0x10210000
 8002e80:	10120000 	.word	0x10120000
 8002e84:	10110000 	.word	0x10110000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40010800 	.word	0x40010800
 8002e94:	40010c00 	.word	0x40010c00
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40011400 	.word	0x40011400
 8002ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_GPIO_Init+0x304>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	4909      	ldr	r1, [pc, #36]	@ (8002ed4 <HAL_GPIO_Init+0x304>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f47f ae8e 	bne.w	8002be4 <HAL_GPIO_Init+0x14>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	372c      	adds	r7, #44	@ 0x2c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ef4:	e003      	b.n	8002efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	611a      	str	r2, [r3, #16]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e12b      	b.n	8003172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe fcd2 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	@ 0x24
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f002 ff96 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8002f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a81      	ldr	r2, [pc, #516]	@ (800317c <HAL_I2C_Init+0x274>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d807      	bhi.n	8002f8c <HAL_I2C_Init+0x84>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a80      	ldr	r2, [pc, #512]	@ (8003180 <HAL_I2C_Init+0x278>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e006      	b.n	8002f9a <HAL_I2C_Init+0x92>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8003184 <HAL_I2C_Init+0x27c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0e7      	b.n	8003172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a78      	ldr	r2, [pc, #480]	@ (8003188 <HAL_I2C_Init+0x280>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0c9b      	lsrs	r3, r3, #18
 8002fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800317c <HAL_I2C_Init+0x274>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d802      	bhi.n	8002fdc <HAL_I2C_Init+0xd4>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	e009      	b.n	8002ff0 <HAL_I2C_Init+0xe8>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	4a69      	ldr	r2, [pc, #420]	@ (800318c <HAL_I2C_Init+0x284>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003002:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	495c      	ldr	r1, [pc, #368]	@ (800317c <HAL_I2C_Init+0x274>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d819      	bhi.n	8003044 <HAL_I2C_Init+0x13c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e59      	subs	r1, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fbb1 f3f3 	udiv	r3, r1, r3
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003024:	400b      	ands	r3, r1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_I2C_Init+0x138>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e59      	subs	r1, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fbb1 f3f3 	udiv	r3, r1, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	e051      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003040:	2304      	movs	r3, #4
 8003042:	e04f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <HAL_I2C_Init+0x168>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e012      	b.n	8003096 <HAL_I2C_Init+0x18e>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	0099      	lsls	r1, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Init+0x196>
 800309a:	2301      	movs	r3, #1
 800309c:	e022      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10e      	bne.n	80030c4 <HAL_I2C_Init+0x1bc>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1e58      	subs	r0, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	440b      	add	r3, r1
 80030b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e58      	subs	r0, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	0099      	lsls	r1, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6809      	ldr	r1, [r1, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6911      	ldr	r1, [r2, #16]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	000186a0 	.word	0x000186a0
 8003180:	001e847f 	.word	0x001e847f
 8003184:	003d08ff 	.word	0x003d08ff
 8003188:	431bde83 	.word	0x431bde83
 800318c:	10624dd3 	.word	0x10624dd3

08003190 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a2:	2b80      	cmp	r3, #128	@ 0x80
 80031a4:	d103      	bne.n	80031ae <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	611a      	str	r2, [r3, #16]
  }
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	460b      	mov	r3, r1
 80031c6:	817b      	strh	r3, [r7, #10]
 80031c8:	4613      	mov	r3, r2
 80031ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7fe fdd2 	bl	8001d74 <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b20      	cmp	r3, #32
 80031dc:	f040 80e0 	bne.w	80033a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2319      	movs	r3, #25
 80031e6:	2201      	movs	r2, #1
 80031e8:	4970      	ldr	r1, [pc, #448]	@ (80033ac <HAL_I2C_Master_Transmit+0x1f4>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f002 f80a 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0d3      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_I2C_Master_Transmit+0x50>
 8003204:	2302      	movs	r3, #2
 8003206:	e0cc      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d007      	beq.n	800322e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2221      	movs	r2, #33	@ 0x21
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2210      	movs	r2, #16
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	893a      	ldrh	r2, [r7, #8]
 800325e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a50      	ldr	r2, [pc, #320]	@ (80033b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800326e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003270:	8979      	ldrh	r1, [r7, #10]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f001 fdcc 	bl	8004e14 <I2C_MasterRequestWrite>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e08d      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800329c:	e066      	b.n	800336c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	6a39      	ldr	r1, [r7, #32]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f002 f8c8 	bl	8005438 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d107      	bne.n	80032c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06b      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d11b      	bne.n	8003340 <HAL_I2C_Master_Transmit+0x188>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d017      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	6a39      	ldr	r1, [r7, #32]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f002 f8bf 	bl	80054c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	2b04      	cmp	r3, #4
 8003356:	d107      	bne.n	8003368 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003366:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e01a      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d194      	bne.n	800329e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	00100002 	.word	0x00100002
 80033b0:	ffff0000 	.word	0xffff0000

080033b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	@ 0x30
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	460b      	mov	r3, r1
 80033c2:	817b      	strh	r3, [r7, #10]
 80033c4:	4613      	mov	r3, r2
 80033c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033cc:	f7fe fcd2 	bl	8001d74 <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b20      	cmp	r3, #32
 80033dc:	f040 824b 	bne.w	8003876 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2319      	movs	r3, #25
 80033e6:	2201      	movs	r2, #1
 80033e8:	497f      	ldr	r1, [pc, #508]	@ (80035e8 <HAL_I2C_Master_Receive+0x234>)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f001 ff0a 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80033f6:	2302      	movs	r3, #2
 80033f8:	e23e      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_I2C_Master_Receive+0x54>
 8003404:	2302      	movs	r3, #2
 8003406:	e237      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d007      	beq.n	800342e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800343c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2222      	movs	r2, #34	@ 0x22
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2210      	movs	r2, #16
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	893a      	ldrh	r2, [r7, #8]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a5f      	ldr	r2, [pc, #380]	@ (80035ec <HAL_I2C_Master_Receive+0x238>)
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003470:	8979      	ldrh	r1, [r7, #10]
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f001 fd4e 	bl	8004f18 <I2C_MasterRequestRead>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1f8      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d113      	bne.n	80034b6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e1cc      	b.n	8003850 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d11e      	bne.n	80034fc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ce:	b672      	cpsid	i
}
 80034d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034f8:	b662      	cpsie	i
}
 80034fa:	e035      	b.n	8003568 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11e      	bne.n	8003542 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003512:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800353e:	b662      	cpsie	i
}
 8003540:	e012      	b.n	8003568 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003568:	e172      	b.n	8003850 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	2b03      	cmp	r3, #3
 8003570:	f200 811f 	bhi.w	80037b2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003578:	2b01      	cmp	r3, #1
 800357a:	d123      	bne.n	80035c4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f002 f81b 	bl	80055bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e173      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035c2:	e145      	b.n	8003850 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d152      	bne.n	8003672 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	2200      	movs	r2, #0
 80035d4:	4906      	ldr	r1, [pc, #24]	@ (80035f0 <HAL_I2C_Master_Receive+0x23c>)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f001 fe14 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e148      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
 80035e6:	bf00      	nop
 80035e8:	00100002 	.word	0x00100002
 80035ec:	ffff0000 	.word	0xffff0000
 80035f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035f4:	b672      	cpsid	i
}
 80035f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800363a:	b662      	cpsie	i
}
 800363c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003670:	e0ee      	b.n	8003850 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	2200      	movs	r2, #0
 800367a:	4981      	ldr	r1, [pc, #516]	@ (8003880 <HAL_I2C_Master_Receive+0x4cc>)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f001 fdc1 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0f5      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800369c:	b672      	cpsid	i
}
 800369e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003884 <HAL_I2C_Master_Receive+0x4d0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	08db      	lsrs	r3, r3, #3
 80036d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003888 <HAL_I2C_Master_Receive+0x4d4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0a1a      	lsrs	r2, r3, #8
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00da      	lsls	r2, r3, #3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d118      	bne.n	800372a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800371a:	b662      	cpsie	i
}
 800371c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0a6      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d1d9      	bne.n	80036ec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800377a:	b662      	cpsie	i
}
 800377c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037b0:	e04e      	b.n	8003850 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f001 ff00 	bl	80055bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e058      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d124      	bne.n	8003850 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380a:	2b03      	cmp	r3, #3
 800380c:	d107      	bne.n	800381e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	f47f ae88 	bne.w	800356a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	@ 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	00010004 	.word	0x00010004
 8003884:	20000000 	.word	0x20000000
 8003888:	14f8b589 	.word	0x14f8b589

0800388c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d003      	beq.n	80038c4 <HAL_I2C_EV_IRQHandler+0x38>
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b40      	cmp	r3, #64	@ 0x40
 80038c0:	f040 80b1 	bne.w	8003a26 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <HAL_I2C_EV_IRQHandler+0x6e>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80038e4:	d003      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0x62>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80038ec:	d101      	bne.n	80038f2 <HAL_I2C_EV_IRQHandler+0x66>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_I2C_EV_IRQHandler+0x68>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f000 8114 	beq.w	8003b22 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_I2C_EV_IRQHandler+0x90>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f001 fedf 	bl	80056d2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fccd 	bl	80042b4 <I2C_Master_SB>
 800391a:	e083      	b.n	8003a24 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_I2C_EV_IRQHandler+0xac>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fd44 	bl	80043be <I2C_Master_ADD10>
 8003936:	e075      	b.n	8003a24 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_I2C_EV_IRQHandler+0xc8>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fd5f 	bl	8004410 <I2C_Master_ADDR>
 8003952:	e067      	b.n	8003a24 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d036      	beq.n	80039cc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800396c:	f000 80db 	beq.w	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <HAL_I2C_EV_IRQHandler+0x10a>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_I2C_EV_IRQHandler+0x10a>
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f92d 	bl	8003bee <I2C_MasterTransmit_TXE>
 8003994:	e046      	b.n	8003a24 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80c2 	beq.w	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80bc 	beq.w	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80039ae:	7bbb      	ldrb	r3, [r7, #14]
 80039b0:	2b21      	cmp	r3, #33	@ 0x21
 80039b2:	d103      	bne.n	80039bc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f9b6 	bl	8003d26 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ba:	e0b4      	b.n	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b40      	cmp	r3, #64	@ 0x40
 80039c0:	f040 80b1 	bne.w	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fa24 	bl	8003e12 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ca:	e0ac      	b.n	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039da:	f000 80a4 	beq.w	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x178>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x178>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 faa0 	bl	8003f42 <I2C_MasterReceive_RXNE>
 8003a02:	e00f      	b.n	8003a24 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 808b 	beq.w	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8085 	beq.w	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb58 	bl	80040d2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a22:	e080      	b.n	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
 8003a24:	e07f      	b.n	8003b26 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e007      	b.n	8003a48 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d011      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00c      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 ff25 	bl	80048be <I2C_Slave_ADDR>
 8003a74:	e05a      	b.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0x206>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 ff60 	bl	8004950 <I2C_Slave_STOPF>
 8003a90:	e04c      	b.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a92:	7bbb      	ldrb	r3, [r7, #14]
 8003a94:	2b21      	cmp	r3, #33	@ 0x21
 8003a96:	d002      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0x212>
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	2b29      	cmp	r3, #41	@ 0x29
 8003a9c:	d120      	bne.n	8003ae0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_I2C_EV_IRQHandler+0x238>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_I2C_EV_IRQHandler+0x238>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fe42 	bl	8004746 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac2:	e032      	b.n	8003b2a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02d      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x29e>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d028      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fe71 	bl	80047c0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ade:	e024      	b.n	8003b2a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0x27a>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0x27a>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d103      	bne.n	8003b06 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fe7e 	bl	8004800 <I2C_SlaveReceive_RXNE>
 8003b04:	e012      	b.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 feae 	bl	800487c <I2C_SlaveReceive_BTF>
 8003b20:	e004      	b.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b2a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	70fb      	strb	r3, [r7, #3]
 8003b86:	4613      	mov	r3, r2
 8003b88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c04:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d150      	bne.n	8003cb6 <I2C_MasterTransmit_TXE+0xc8>
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b21      	cmp	r3, #33	@ 0x21
 8003c18:	d14d      	bne.n	8003cb6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d01d      	beq.n	8003c5c <I2C_MasterTransmit_TXE+0x6e>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d01a      	beq.n	8003c5c <I2C_MasterTransmit_TXE+0x6e>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c2c:	d016      	beq.n	8003c5c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c3c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2211      	movs	r2, #17
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff6c 	bl	8003b32 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c5a:	e060      	b.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c6a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	d107      	bne.n	8003ca6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ff81 	bl	8003ba6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ca4:	e03b      	b.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff3f 	bl	8003b32 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cb4:	e033      	b.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b21      	cmp	r3, #33	@ 0x21
 8003cba:	d005      	beq.n	8003cc8 <I2C_MasterTransmit_TXE+0xda>
 8003cbc:	7bbb      	ldrb	r3, [r7, #14]
 8003cbe:	2b40      	cmp	r3, #64	@ 0x40
 8003cc0:	d12d      	bne.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b22      	cmp	r3, #34	@ 0x22
 8003cc6:	d12a      	bne.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ce2:	e01c      	b.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b40      	cmp	r3, #64	@ 0x40
 8003cee:	d103      	bne.n	8003cf8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f88e 	bl	8003e12 <I2C_MemoryTransmit_TXE_BTF>
}
 8003cf6:	e012      	b.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d1c:	e7ff      	b.n	8003d1e <I2C_MasterTransmit_TXE+0x130>
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b21      	cmp	r3, #33	@ 0x21
 8003d3e:	d164      	bne.n	8003e0a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d6e:	e04c      	b.n	8003e0a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d01d      	beq.n	8003db2 <I2C_MasterTransmit_BTF+0x8c>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d01a      	beq.n	8003db2 <I2C_MasterTransmit_BTF+0x8c>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d82:	d016      	beq.n	8003db2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d92:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2211      	movs	r2, #17
 8003d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fec1 	bl	8003b32 <HAL_I2C_MasterTxCpltCallback>
}
 8003db0:	e02b      	b.n	8003e0a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dc0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b40      	cmp	r3, #64	@ 0x40
 8003dea:	d107      	bne.n	8003dfc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fed6 	bl	8003ba6 <HAL_I2C_MemTxCpltCallback>
}
 8003dfa:	e006      	b.n	8003e0a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fe94 	bl	8003b32 <HAL_I2C_MasterTxCpltCallback>
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11d      	bne.n	8003e66 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d10b      	bne.n	8003e4a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003e48:	e077      	b.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	121b      	asrs	r3, r3, #8
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e64:	e069      	b.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d10b      	bne.n	8003e86 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e84:	e059      	b.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d152      	bne.n	8003f34 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b22      	cmp	r3, #34	@ 0x22
 8003e92:	d10d      	bne.n	8003eb0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003eae:	e044      	b.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d015      	beq.n	8003ee6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b21      	cmp	r3, #33	@ 0x21
 8003ebe:	d112      	bne.n	8003ee6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ee4:	e029      	b.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d124      	bne.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b21      	cmp	r3, #33	@ 0x21
 8003ef4:	d121      	bne.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f04:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f14:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fe3a 	bl	8003ba6 <HAL_I2C_MemTxCpltCallback>
}
 8003f32:	e002      	b.n	8003f3a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff f92b 	bl	8003190 <I2C_Flush_DR>
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b22      	cmp	r3, #34	@ 0x22
 8003f54:	f040 80b9 	bne.w	80040ca <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d921      	bls.n	8003fb0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	f040 8096 	bne.w	80040ca <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fac:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003fae:	e08c      	b.n	80040ca <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d07f      	beq.n	80040b8 <I2C_MasterReceive_RXNE+0x176>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d002      	beq.n	8003fc4 <I2C_MasterReceive_RXNE+0x82>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d179      	bne.n	80040b8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f001 fac7 	bl	8005558 <I2C_WaitOnSTOPRequestThroughIT>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d14c      	bne.n	800406a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fde:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d10a      	bne.n	8004040 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fdbd 	bl	8003bb8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800403e:	e044      	b.n	80040ca <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d002      	beq.n	8004054 <I2C_MasterReceive_RXNE+0x112>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b20      	cmp	r3, #32
 8004052:	d103      	bne.n	800405c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	@ 0x30
 800405a:	e002      	b.n	8004062 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2212      	movs	r2, #18
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fd6e 	bl	8003b44 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004068:	e02f      	b.n	80040ca <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004078:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fd8a 	bl	8003bca <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040b6:	e008      	b.n	80040ca <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c6:	605a      	str	r2, [r3, #4]
}
 80040c8:	e7ff      	b.n	80040ca <I2C_MasterReceive_RXNE+0x188>
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d11b      	bne.n	8004122 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004120:	e0c4      	b.n	80042ac <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b03      	cmp	r3, #3
 800412a:	d129      	bne.n	8004180 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d00a      	beq.n	8004158 <I2C_MasterReceive_BTF+0x86>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d007      	beq.n	8004158 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004156:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800417e:	e095      	b.n	80042ac <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d17d      	bne.n	8004286 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d002      	beq.n	8004196 <I2C_MasterReceive_BTF+0xc4>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b10      	cmp	r3, #16
 8004194:	d108      	bne.n	80041a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e016      	b.n	80041d6 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d002      	beq.n	80041b4 <I2C_MasterReceive_BTF+0xe2>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d108      	bne.n	80041c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e007      	b.n	80041d6 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004230:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b40      	cmp	r3, #64	@ 0x40
 8004244:	d10a      	bne.n	800425c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fcaf 	bl	8003bb8 <HAL_I2C_MemRxCpltCallback>
}
 800425a:	e027      	b.n	80042ac <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d002      	beq.n	8004270 <I2C_MasterReceive_BTF+0x19e>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b20      	cmp	r3, #32
 800426e:	d103      	bne.n	8004278 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	@ 0x30
 8004276:	e002      	b.n	800427e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2212      	movs	r2, #18
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fc60 	bl	8003b44 <HAL_I2C_MasterRxCpltCallback>
}
 8004284:	e012      	b.n	80042ac <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d117      	bne.n	80042f8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042e0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80042e2:	e067      	b.n	80043b4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	611a      	str	r2, [r3, #16]
}
 80042f6:	e05d      	b.n	80043b4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004300:	d133      	bne.n	800436a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b21      	cmp	r3, #33	@ 0x21
 800430c:	d109      	bne.n	8004322 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800431e:	611a      	str	r2, [r3, #16]
 8004320:	e008      	b.n	8004334 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <I2C_Master_SB+0x92>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	2b00      	cmp	r3, #0
 800434c:	d032      	beq.n	80043b4 <I2C_Master_SB+0x100>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02d      	beq.n	80043b4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004366:	605a      	str	r2, [r3, #4]
}
 8004368:	e024      	b.n	80043b4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10e      	bne.n	8004390 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	b29b      	uxth	r3, r3
 8004378:	11db      	asrs	r3, r3, #7
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0306 	and.w	r3, r3, #6
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f063 030f 	orn	r3, r3, #15
 8004386:	b2da      	uxtb	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]
}
 800438e:	e011      	b.n	80043b4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004394:	2b01      	cmp	r3, #1
 8004396:	d10d      	bne.n	80043b4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439c:	b29b      	uxth	r3, r3
 800439e:	11db      	asrs	r3, r3, #7
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0306 	and.w	r3, r3, #6
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f063 030e 	orn	r3, r3, #14
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	611a      	str	r2, [r3, #16]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <I2C_Master_ADD10+0x26>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <I2C_Master_ADD10+0x48>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004404:	605a      	str	r2, [r3, #4]
  }
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b091      	sub	sp, #68	@ 0x44
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800441e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b22      	cmp	r3, #34	@ 0x22
 8004438:	f040 8174 	bne.w	8004724 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10f      	bne.n	8004464 <I2C_Master_ADDR+0x54>
 8004444:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	d10b      	bne.n	8004464 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	633b      	str	r3, [r7, #48]	@ 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	e16b      	b.n	800473c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d11d      	bne.n	80044a8 <I2C_Master_ADDR+0x98>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004474:	d118      	bne.n	80044a8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800449a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80044a6:	e149      	b.n	800473c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d113      	bne.n	80044da <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	e120      	b.n	800471c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f040 808a 	bne.w	80045fa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044ec:	d137      	bne.n	800455e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800450c:	d113      	bne.n	8004536 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	e0f2      	b.n	800471c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e0de      	b.n	800471c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	2b08      	cmp	r3, #8
 8004562:	d02e      	beq.n	80045c2 <I2C_Master_ADDR+0x1b2>
 8004564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004566:	2b20      	cmp	r3, #32
 8004568:	d02b      	beq.n	80045c2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800456a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456c:	2b12      	cmp	r3, #18
 800456e:	d102      	bne.n	8004576 <I2C_Master_ADDR+0x166>
 8004570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004572:	2b01      	cmp	r3, #1
 8004574:	d125      	bne.n	80045c2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004578:	2b04      	cmp	r3, #4
 800457a:	d00e      	beq.n	800459a <I2C_Master_ADDR+0x18a>
 800457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457e:	2b02      	cmp	r3, #2
 8004580:	d00b      	beq.n	800459a <I2C_Master_ADDR+0x18a>
 8004582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004584:	2b10      	cmp	r3, #16
 8004586:	d008      	beq.n	800459a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e007      	b.n	80045aa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	e0ac      	b.n	800471c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e090      	b.n	800471c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d158      	bne.n	80046b6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	2b04      	cmp	r3, #4
 8004608:	d021      	beq.n	800464e <I2C_Master_ADDR+0x23e>
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	2b02      	cmp	r3, #2
 800460e:	d01e      	beq.n	800464e <I2C_Master_ADDR+0x23e>
 8004610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004612:	2b10      	cmp	r3, #16
 8004614:	d01b      	beq.n	800464e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004624:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	e012      	b.n	8004674 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004682:	d14b      	bne.n	800471c <I2C_Master_ADDR+0x30c>
 8004684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004686:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800468a:	d00b      	beq.n	80046a4 <I2C_Master_ADDR+0x294>
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	2b01      	cmp	r3, #1
 8004690:	d008      	beq.n	80046a4 <I2C_Master_ADDR+0x294>
 8004692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004694:	2b08      	cmp	r3, #8
 8004696:	d005      	beq.n	80046a4 <I2C_Master_ADDR+0x294>
 8004698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469a:	2b10      	cmp	r3, #16
 800469c:	d002      	beq.n	80046a4 <I2C_Master_ADDR+0x294>
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d13b      	bne.n	800471c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	e032      	b.n	800471c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d4:	d117      	bne.n	8004706 <I2C_Master_ADDR+0x2f6>
 80046d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046dc:	d00b      	beq.n	80046f6 <I2C_Master_ADDR+0x2e6>
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d008      	beq.n	80046f6 <I2C_Master_ADDR+0x2e6>
 80046e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d005      	beq.n	80046f6 <I2C_Master_ADDR+0x2e6>
 80046ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d002      	beq.n	80046f6 <I2C_Master_ADDR+0x2e6>
 80046f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d107      	bne.n	8004706 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004704:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004722:	e00b      	b.n	800473c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
}
 800473a:	e7ff      	b.n	800473c <I2C_Master_ADDR+0x32c>
 800473c:	bf00      	nop
 800473e:	3744      	adds	r7, #68	@ 0x44
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004754:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02b      	beq.n	80047b8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d114      	bne.n	80047b8 <I2C_SlaveTransmit_TXE+0x72>
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b29      	cmp	r3, #41	@ 0x29
 8004792:	d111      	bne.n	80047b8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2221      	movs	r2, #33	@ 0x21
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2228      	movs	r2, #40	@ 0x28
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff f9cf 	bl	8003b56 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d011      	beq.n	80047f6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02c      	beq.n	8004874 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d114      	bne.n	8004874 <I2C_SlaveReceive_RXNE+0x74>
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b2a      	cmp	r3, #42	@ 0x2a
 800484e:	d111      	bne.n	8004874 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800485e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2222      	movs	r2, #34	@ 0x22
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2228      	movs	r2, #40	@ 0x28
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff f97a 	bl	8003b68 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048d8:	2b28      	cmp	r3, #40	@ 0x28
 80048da:	d125      	bne.n	8004928 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	81bb      	strh	r3, [r7, #12]
 800490a:	e002      	b.n	8004912 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800491a:	89ba      	ldrh	r2, [r7, #12]
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff f92a 	bl	8003b7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004926:	e00e      	b.n	8004946 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800496e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ac:	d172      	bne.n	8004a94 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b22      	cmp	r3, #34	@ 0x22
 80049b2:	d002      	beq.n	80049ba <I2C_Slave_STOPF+0x6a>
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b8:	d135      	bne.n	8004a26 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe f8de 	bl	8002bb4 <HAL_DMA_GetState>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d049      	beq.n	8004a92 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	4a69      	ldr	r2, [pc, #420]	@ (8004ba8 <I2C_Slave_STOPF+0x258>)
 8004a04:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe f85a 	bl	8002ac4 <HAL_DMA_Abort_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d03d      	beq.n	8004a92 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a20:	4610      	mov	r0, r2
 8004a22:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a24:	e035      	b.n	8004a92 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe f8a8 	bl	8002bb4 <HAL_DMA_GetState>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d014      	beq.n	8004a94 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba8 <I2C_Slave_STOPF+0x258>)
 8004a70:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe f824 	bl	8002ac4 <HAL_DMA_Abort_IT>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4798      	blx	r3
 8004a90:	e000      	b.n	8004a94 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a92:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d03e      	beq.n	8004b1c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d112      	bne.n	8004ad2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b40      	cmp	r3, #64	@ 0x40
 8004ade:	d112      	bne.n	8004b06 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f843 	bl	8004bb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b2a:	e039      	b.n	8004ba0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b30:	d109      	bne.n	8004b46 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2228      	movs	r2, #40	@ 0x28
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff f811 	bl	8003b68 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b28      	cmp	r3, #40	@ 0x28
 8004b50:	d111      	bne.n	8004b76 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a15      	ldr	r2, [pc, #84]	@ (8004bac <I2C_Slave_STOPF+0x25c>)
 8004b56:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff f810 	bl	8003b94 <HAL_I2C_ListenCpltCallback>
}
 8004b74:	e014      	b.n	8004ba0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	2b22      	cmp	r3, #34	@ 0x22
 8004b7c:	d002      	beq.n	8004b84 <I2C_Slave_STOPF+0x234>
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b22      	cmp	r3, #34	@ 0x22
 8004b82:	d10d      	bne.n	8004ba0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fe ffe4 	bl	8003b68 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	080050b5 	.word	0x080050b5
 8004bac:	ffff0000 	.word	0xffff0000

08004bb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bc8:	7bbb      	ldrb	r3, [r7, #14]
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d002      	beq.n	8004bd4 <I2C_ITError+0x24>
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d10a      	bne.n	8004bea <I2C_ITError+0x3a>
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b22      	cmp	r3, #34	@ 0x22
 8004bd8:	d107      	bne.n	8004bea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bf0:	2b28      	cmp	r3, #40	@ 0x28
 8004bf2:	d107      	bne.n	8004c04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2228      	movs	r2, #40	@ 0x28
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c02:	e015      	b.n	8004c30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c12:	d00a      	beq.n	8004c2a <I2C_ITError+0x7a>
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b60      	cmp	r3, #96	@ 0x60
 8004c18:	d007      	beq.n	8004c2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c3e:	d162      	bne.n	8004d06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d020      	beq.n	8004ca0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c62:	4a6a      	ldr	r2, [pc, #424]	@ (8004e0c <I2C_ITError+0x25c>)
 8004c64:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd ff2a 	bl	8002ac4 <HAL_DMA_Abort_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8089 	beq.w	8004d8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4798      	blx	r3
 8004c9e:	e074      	b.n	8004d8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca4:	4a59      	ldr	r2, [pc, #356]	@ (8004e0c <I2C_ITError+0x25c>)
 8004ca6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fd ff09 	bl	8002ac4 <HAL_DMA_Abort_IT>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d068      	beq.n	8004d8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d10b      	bne.n	8004cde <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3
 8004d04:	e041      	b.n	8004d8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b60      	cmp	r3, #96	@ 0x60
 8004d10:	d125      	bne.n	8004d5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d10b      	bne.n	8004d46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fe ff40 	bl	8003bdc <HAL_I2C_AbortCpltCallback>
 8004d5c:	e015      	b.n	8004d8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b40      	cmp	r3, #64	@ 0x40
 8004d6a:	d10b      	bne.n	8004d84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fe ff20 	bl	8003bca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10e      	bne.n	8004db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d113      	bne.n	8004e04 <I2C_ITError+0x254>
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b28      	cmp	r3, #40	@ 0x28
 8004de0:	d110      	bne.n	8004e04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <I2C_ITError+0x260>)
 8004de6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fe fec8 	bl	8003b94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	080050b5 	.word	0x080050b5
 8004e10:	ffff0000 	.word	0xffff0000

08004e14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	460b      	mov	r3, r1
 8004e22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d006      	beq.n	8004e3e <I2C_MasterRequestWrite+0x2a>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d003      	beq.n	8004e3e <I2C_MasterRequestWrite+0x2a>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e3c:	d108      	bne.n	8004e50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e00b      	b.n	8004e68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	2b12      	cmp	r3, #18
 8004e56:	d107      	bne.n	8004e68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f9c5 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8e:	d103      	bne.n	8004e98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e035      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ea4:	d108      	bne.n	8004eb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ea6:	897b      	ldrh	r3, [r7, #10]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004eb4:	611a      	str	r2, [r3, #16]
 8004eb6:	e01b      	b.n	8004ef0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eb8:	897b      	ldrh	r3, [r7, #10]
 8004eba:	11db      	asrs	r3, r3, #7
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f063 030f 	orn	r3, r3, #15
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	490e      	ldr	r1, [pc, #56]	@ (8004f10 <I2C_MasterRequestWrite+0xfc>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fa0e 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e010      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4907      	ldr	r1, [pc, #28]	@ (8004f14 <I2C_MasterRequestWrite+0x100>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f9fe 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	00010008 	.word	0x00010008
 8004f14:	00010002 	.word	0x00010002

08004f18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d006      	beq.n	8004f52 <I2C_MasterRequestRead+0x3a>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d003      	beq.n	8004f52 <I2C_MasterRequestRead+0x3a>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f50:	d108      	bne.n	8004f64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e00b      	b.n	8004f7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	2b11      	cmp	r3, #17
 8004f6a:	d107      	bne.n	8004f7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f93b 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa2:	d103      	bne.n	8004fac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e079      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb8:	d108      	bne.n	8004fcc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	611a      	str	r2, [r3, #16]
 8004fca:	e05f      	b.n	800508c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fcc:	897b      	ldrh	r3, [r7, #10]
 8004fce:	11db      	asrs	r3, r3, #7
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f063 030f 	orn	r3, r3, #15
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4930      	ldr	r1, [pc, #192]	@ (80050ac <I2C_MasterRequestRead+0x194>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f984 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e054      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4929      	ldr	r1, [pc, #164]	@ (80050b0 <I2C_MasterRequestRead+0x198>)
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f974 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e044      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800503e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f8d9 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00d      	beq.n	8005074 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005066:	d103      	bne.n	8005070 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800506e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e017      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005074:	897b      	ldrh	r3, [r7, #10]
 8005076:	11db      	asrs	r3, r3, #7
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0306 	and.w	r3, r3, #6
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f063 030e 	orn	r3, r3, #14
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4907      	ldr	r1, [pc, #28]	@ (80050b0 <I2C_MasterRequestRead+0x198>)
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f930 	bl	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	00010008 	.word	0x00010008
 80050b0:	00010002 	.word	0x00010002

080050b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050ce:	4b4b      	ldr	r3, [pc, #300]	@ (80051fc <I2C_DMAAbort+0x148>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	08db      	lsrs	r3, r3, #3
 80050d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005200 <I2C_DMAAbort+0x14c>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0a1a      	lsrs	r2, r3, #8
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00da      	lsls	r2, r3, #3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80050fa:	e00a      	b.n	8005112 <I2C_DMAAbort+0x5e>
    }
    count--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800510c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005110:	d0ea      	beq.n	80050e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	2200      	movs	r2, #0
 8005130:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005140:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005154:	2200      	movs	r2, #0
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	2200      	movs	r2, #0
 8005166:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b60      	cmp	r3, #96	@ 0x60
 8005182:	d10e      	bne.n	80051a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800519a:	6978      	ldr	r0, [r7, #20]
 800519c:	f7fe fd1e 	bl	8003bdc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a0:	e027      	b.n	80051f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051a2:	7cfb      	ldrb	r3, [r7, #19]
 80051a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051a8:	2b28      	cmp	r3, #40	@ 0x28
 80051aa:	d117      	bne.n	80051dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2228      	movs	r2, #40	@ 0x28
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051da:	e007      	b.n	80051ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80051ec:	6978      	ldr	r0, [r7, #20]
 80051ee:	f7fe fcec 	bl	8003bca <HAL_I2C_ErrorCallback>
}
 80051f2:	bf00      	nop
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000000 	.word	0x20000000
 8005200:	14f8b589 	.word	0x14f8b589

08005204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005214:	e048      	b.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d044      	beq.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fc fda9 	bl	8001d74 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d139      	bne.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10d      	bne.n	800525a <I2C_WaitOnFlagUntilTimeout+0x56>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	43da      	mvns	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	e00c      	b.n	8005274 <I2C_WaitOnFlagUntilTimeout+0x70>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	43da      	mvns	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	429a      	cmp	r2, r3
 8005278:	d116      	bne.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e023      	b.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10d      	bne.n	80052ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	e00c      	b.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d093      	beq.n	8005216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005306:	e071      	b.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005316:	d123      	bne.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005326:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	f043 0204 	orr.w	r2, r3, #4
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e067      	b.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d041      	beq.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005368:	f7fc fd04 	bl	8001d74 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d302      	bcc.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d136      	bne.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	43da      	mvns	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e00b      	b.n	80053ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d016      	beq.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e021      	b.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d10c      	bne.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	43da      	mvns	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e00b      	b.n	8005428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	f47f af6d 	bne.w	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005444:	e034      	b.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f915 	bl	8005676 <I2C_IsAcknowledgeFailed>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e034      	b.n	80054c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d028      	beq.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545e:	f7fc fc89 	bl	8001d74 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	429a      	cmp	r2, r3
 800546c:	d302      	bcc.n	8005474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11d      	bne.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d016      	beq.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e007      	b.n	80054c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ba:	2b80      	cmp	r3, #128	@ 0x80
 80054bc:	d1c3      	bne.n	8005446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054d4:	e034      	b.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f8cd 	bl	8005676 <I2C_IsAcknowledgeFailed>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e034      	b.n	8005550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d028      	beq.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ee:	f7fc fc41 	bl	8001d74 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11d      	bne.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d016      	beq.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e007      	b.n	8005550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b04      	cmp	r3, #4
 800554c:	d1c3      	bne.n	80054d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005564:	4b13      	ldr	r3, [pc, #76]	@ (80055b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	4a13      	ldr	r2, [pc, #76]	@ (80055b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	0a1a      	lsrs	r2, r3, #8
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b01      	subs	r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d107      	bne.n	8005596 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e008      	b.n	80055a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a4:	d0e9      	beq.n	800557a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000000 	.word	0x20000000
 80055b8:	14f8b589 	.word	0x14f8b589

080055bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055c8:	e049      	b.n	800565e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d119      	bne.n	800560c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0210 	mvn.w	r2, #16
 80055e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e030      	b.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560c:	f7fc fbb2 	bl	8001d74 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	d302      	bcc.n	8005622 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d11d      	bne.n	800565e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562c:	2b40      	cmp	r3, #64	@ 0x40
 800562e:	d016      	beq.n	800565e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e007      	b.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005668:	2b40      	cmp	r3, #64	@ 0x40
 800566a:	d1ae      	bne.n	80055ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800568c:	d11b      	bne.n	80056c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005696:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	f043 0204 	orr.w	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80056e2:	d103      	bne.n	80056ec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056ea:	e007      	b.n	80056fc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056f4:	d102      	bne.n	80056fc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2208      	movs	r2, #8
 80056fa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
	...

08005708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e272      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8087 	beq.w	8005836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005728:	4b92      	ldr	r3, [pc, #584]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b04      	cmp	r3, #4
 8005732:	d00c      	beq.n	800574e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005734:	4b8f      	ldr	r3, [pc, #572]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	2b08      	cmp	r3, #8
 800573e:	d112      	bne.n	8005766 <HAL_RCC_OscConfig+0x5e>
 8005740:	4b8c      	ldr	r3, [pc, #560]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800574c:	d10b      	bne.n	8005766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574e:	4b89      	ldr	r3, [pc, #548]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d06c      	beq.n	8005834 <HAL_RCC_OscConfig+0x12c>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d168      	bne.n	8005834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e24c      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800576e:	d106      	bne.n	800577e <HAL_RCC_OscConfig+0x76>
 8005770:	4b80      	ldr	r3, [pc, #512]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a7f      	ldr	r2, [pc, #508]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e02e      	b.n	80057dc <HAL_RCC_OscConfig+0xd4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10c      	bne.n	80057a0 <HAL_RCC_OscConfig+0x98>
 8005786:	4b7b      	ldr	r3, [pc, #492]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a7a      	ldr	r2, [pc, #488]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 800578c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4b78      	ldr	r3, [pc, #480]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a77      	ldr	r2, [pc, #476]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005798:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e01d      	b.n	80057dc <HAL_RCC_OscConfig+0xd4>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0xbc>
 80057aa:	4b72      	ldr	r3, [pc, #456]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a71      	ldr	r2, [pc, #452]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e00b      	b.n	80057dc <HAL_RCC_OscConfig+0xd4>
 80057c4:	4b6b      	ldr	r3, [pc, #428]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a6a      	ldr	r2, [pc, #424]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	4b68      	ldr	r3, [pc, #416]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a67      	ldr	r2, [pc, #412]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80057d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d013      	beq.n	800580c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fc fac6 	bl	8001d74 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ec:	f7fc fac2 	bl	8001d74 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b64      	cmp	r3, #100	@ 0x64
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e200      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0xe4>
 800580a:	e014      	b.n	8005836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580c:	f7fc fab2 	bl	8001d74 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005814:	f7fc faae 	bl	8001d74 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b64      	cmp	r3, #100	@ 0x64
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1ec      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005826:	4b53      	ldr	r3, [pc, #332]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x10c>
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d063      	beq.n	800590a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005842:	4b4c      	ldr	r3, [pc, #304]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 030c 	and.w	r3, r3, #12
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800584e:	4b49      	ldr	r3, [pc, #292]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b08      	cmp	r3, #8
 8005858:	d11c      	bne.n	8005894 <HAL_RCC_OscConfig+0x18c>
 800585a:	4b46      	ldr	r3, [pc, #280]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d116      	bne.n	8005894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005866:	4b43      	ldr	r3, [pc, #268]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_RCC_OscConfig+0x176>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d001      	beq.n	800587e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e1c0      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587e:	4b3d      	ldr	r3, [pc, #244]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4939      	ldr	r1, [pc, #228]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005892:	e03a      	b.n	800590a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d020      	beq.n	80058de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800589c:	4b36      	ldr	r3, [pc, #216]	@ (8005978 <HAL_RCC_OscConfig+0x270>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a2:	f7fc fa67 	bl	8001d74 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058aa:	f7fc fa63 	bl	8001d74 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e1a1      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	4927      	ldr	r1, [pc, #156]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]
 80058dc:	e015      	b.n	800590a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058de:	4b26      	ldr	r3, [pc, #152]	@ (8005978 <HAL_RCC_OscConfig+0x270>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fc fa46 	bl	8001d74 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ec:	f7fc fa42 	bl	8001d74 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e180      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d03a      	beq.n	800598c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d019      	beq.n	8005952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591e:	4b17      	ldr	r3, [pc, #92]	@ (800597c <HAL_RCC_OscConfig+0x274>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005924:	f7fc fa26 	bl	8001d74 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800592c:	f7fc fa22 	bl	8001d74 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e160      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <HAL_RCC_OscConfig+0x26c>)
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800594a:	2001      	movs	r0, #1
 800594c:	f000 face 	bl	8005eec <RCC_Delay>
 8005950:	e01c      	b.n	800598c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005952:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <HAL_RCC_OscConfig+0x274>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005958:	f7fc fa0c 	bl	8001d74 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800595e:	e00f      	b.n	8005980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005960:	f7fc fa08 	bl	8001d74 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d908      	bls.n	8005980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e146      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
 8005978:	42420000 	.word	0x42420000
 800597c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005980:	4b92      	ldr	r3, [pc, #584]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e9      	bne.n	8005960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80a6 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800599e:	4b8b      	ldr	r3, [pc, #556]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059aa:	4b88      	ldr	r3, [pc, #544]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	4a87      	ldr	r2, [pc, #540]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b4:	61d3      	str	r3, [r2, #28]
 80059b6:	4b85      	ldr	r3, [pc, #532]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059c2:	2301      	movs	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c6:	4b82      	ldr	r3, [pc, #520]	@ (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d118      	bne.n	8005a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059d2:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a7e      	ldr	r2, [pc, #504]	@ (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059de:	f7fc f9c9 	bl	8001d74 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e6:	f7fc f9c5 	bl	8001d74 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b64      	cmp	r3, #100	@ 0x64
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e103      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f8:	4b75      	ldr	r3, [pc, #468]	@ (8005bd0 <HAL_RCC_OscConfig+0x4c8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCC_OscConfig+0x312>
 8005a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4a6e      	ldr	r2, [pc, #440]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	6213      	str	r3, [r2, #32]
 8005a18:	e02d      	b.n	8005a76 <HAL_RCC_OscConfig+0x36e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x334>
 8005a22:	4b6a      	ldr	r3, [pc, #424]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	4a69      	ldr	r2, [pc, #420]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	6213      	str	r3, [r2, #32]
 8005a2e:	4b67      	ldr	r3, [pc, #412]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4a66      	ldr	r2, [pc, #408]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	6213      	str	r3, [r2, #32]
 8005a3a:	e01c      	b.n	8005a76 <HAL_RCC_OscConfig+0x36e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCC_OscConfig+0x356>
 8005a44:	4b61      	ldr	r3, [pc, #388]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4a60      	ldr	r2, [pc, #384]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a4a:	f043 0304 	orr.w	r3, r3, #4
 8005a4e:	6213      	str	r3, [r2, #32]
 8005a50:	4b5e      	ldr	r3, [pc, #376]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	4a5d      	ldr	r2, [pc, #372]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a56:	f043 0301 	orr.w	r3, r3, #1
 8005a5a:	6213      	str	r3, [r2, #32]
 8005a5c:	e00b      	b.n	8005a76 <HAL_RCC_OscConfig+0x36e>
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4a5a      	ldr	r2, [pc, #360]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	6213      	str	r3, [r2, #32]
 8005a6a:	4b58      	ldr	r3, [pc, #352]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	4a57      	ldr	r2, [pc, #348]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d015      	beq.n	8005aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7e:	f7fc f979 	bl	8001d74 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fc f975 	bl	8001d74 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0b1      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ee      	beq.n	8005a86 <HAL_RCC_OscConfig+0x37e>
 8005aa8:	e014      	b.n	8005ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aaa:	f7fc f963 	bl	8001d74 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f7fc f95f 	bl	8001d74 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e09b      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac8:	4b40      	ldr	r3, [pc, #256]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1ee      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ada:	4b3c      	ldr	r3, [pc, #240]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	4a3b      	ldr	r2, [pc, #236]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8087 	beq.w	8005bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af0:	4b36      	ldr	r3, [pc, #216]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d061      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d146      	bne.n	8005b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b04:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <HAL_RCC_OscConfig+0x4cc>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0a:	f7fc f933 	bl	8001d74 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b12:	f7fc f92f 	bl	8001d74 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e06d      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b24:	4b29      	ldr	r3, [pc, #164]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b38:	d108      	bne.n	8005b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b3a:	4b24      	ldr	r3, [pc, #144]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4921      	ldr	r1, [pc, #132]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a19      	ldr	r1, [r3, #32]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	491b      	ldr	r1, [pc, #108]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b64:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <HAL_RCC_OscConfig+0x4cc>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6a:	f7fc f903 	bl	8001d74 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b72:	f7fc f8ff 	bl	8001d74 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e03d      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b84:	4b11      	ldr	r3, [pc, #68]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <HAL_RCC_OscConfig+0x46a>
 8005b90:	e035      	b.n	8005bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b92:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <HAL_RCC_OscConfig+0x4cc>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7fc f8ec 	bl	8001d74 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fc f8e8 	bl	8001d74 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e026      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bb2:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <HAL_RCC_OscConfig+0x4c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x498>
 8005bbe:	e01e      	b.n	8005bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d107      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e019      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40007000 	.word	0x40007000
 8005bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <HAL_RCC_OscConfig+0x500>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d106      	bne.n	8005bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d001      	beq.n	8005bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40021000 	.word	0x40021000

08005c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0d0      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c20:	4b6a      	ldr	r3, [pc, #424]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d910      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b67      	ldr	r3, [pc, #412]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 0207 	bic.w	r2, r3, #7
 8005c36:	4965      	ldr	r1, [pc, #404]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b63      	ldr	r3, [pc, #396]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0b8      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d020      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c68:	4b59      	ldr	r3, [pc, #356]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4a58      	ldr	r2, [pc, #352]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c80:	4b53      	ldr	r3, [pc, #332]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a52      	ldr	r2, [pc, #328]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c8c:	4b50      	ldr	r3, [pc, #320]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	494d      	ldr	r1, [pc, #308]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d040      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b47      	ldr	r3, [pc, #284]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d115      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e07f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cca:	4b41      	ldr	r3, [pc, #260]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e073      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cda:	4b3d      	ldr	r3, [pc, #244]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e06b      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cea:	4b39      	ldr	r3, [pc, #228]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f023 0203 	bic.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4936      	ldr	r1, [pc, #216]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cfc:	f7fc f83a 	bl	8001d74 <HAL_GetTick>
 8005d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d04:	f7fc f836 	bl	8001d74 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e053      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 020c 	and.w	r2, r3, #12
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d1eb      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d2c:	4b27      	ldr	r3, [pc, #156]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d210      	bcs.n	8005d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3a:	4b24      	ldr	r3, [pc, #144]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f023 0207 	bic.w	r2, r3, #7
 8005d42:	4922      	ldr	r1, [pc, #136]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4a:	4b20      	ldr	r3, [pc, #128]	@ (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e032      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d68:	4b19      	ldr	r3, [pc, #100]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4916      	ldr	r1, [pc, #88]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d86:	4b12      	ldr	r3, [pc, #72]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	490e      	ldr	r1, [pc, #56]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d9a:	f000 f821 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	490a      	ldr	r1, [pc, #40]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dac:	5ccb      	ldrb	r3, [r1, r3]
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	4a09      	ldr	r2, [pc, #36]	@ (8005dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8005db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005db6:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <HAL_RCC_ClockConfig+0x1d0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fb ff98 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40022000 	.word	0x40022000
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	0800b754 	.word	0x0800b754
 8005dd8:	20000000 	.word	0x20000000
 8005ddc:	20000004 	.word	0x20000004

08005de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	2300      	movs	r3, #0
 8005df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d002      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x30>
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d003      	beq.n	8005e16 <HAL_RCC_GetSysClockFreq+0x36>
 8005e0e:	e027      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e10:	4b19      	ldr	r3, [pc, #100]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e12:	613b      	str	r3, [r7, #16]
      break;
 8005e14:	e027      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	0c9b      	lsrs	r3, r3, #18
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e20:	5cd3      	ldrb	r3, [r2, r3]
 8005e22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d010      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e2e:	4b11      	ldr	r3, [pc, #68]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	0c5b      	lsrs	r3, r3, #17
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	4a11      	ldr	r2, [pc, #68]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e3a:	5cd3      	ldrb	r3, [r2, r3]
 8005e3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a0d      	ldr	r2, [pc, #52]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e42:	fb03 f202 	mul.w	r2, r3, r2
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e004      	b.n	8005e5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a0c      	ldr	r2, [pc, #48]	@ (8005e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e54:	fb02 f303 	mul.w	r3, r2, r3
 8005e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	613b      	str	r3, [r7, #16]
      break;
 8005e5e:	e002      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e60:	4b05      	ldr	r3, [pc, #20]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e62:	613b      	str	r3, [r7, #16]
      break;
 8005e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e66:	693b      	ldr	r3, [r7, #16]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40021000 	.word	0x40021000
 8005e78:	007a1200 	.word	0x007a1200
 8005e7c:	0800b76c 	.word	0x0800b76c
 8005e80:	0800b77c 	.word	0x0800b77c
 8005e84:	003d0900 	.word	0x003d0900

08005e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e8c:	4b02      	ldr	r3, [pc, #8]	@ (8005e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	20000000 	.word	0x20000000

08005e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ea0:	f7ff fff2 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	4903      	ldr	r1, [pc, #12]	@ (8005ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	0800b764 	.word	0x0800b764

08005ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ec8:	f7ff ffde 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	0adb      	lsrs	r3, r3, #11
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4903      	ldr	r1, [pc, #12]	@ (8005ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eda:	5ccb      	ldrb	r3, [r1, r3]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	0800b764 	.word	0x0800b764

08005eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f20 <RCC_Delay+0x34>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8005f24 <RCC_Delay+0x38>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0a5b      	lsrs	r3, r3, #9
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f08:	bf00      	nop
  }
  while (Delay --);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1e5a      	subs	r2, r3, #1
 8005f0e:	60fa      	str	r2, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f9      	bne.n	8005f08 <RCC_Delay+0x1c>
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr
 8005f20:	20000000 	.word	0x20000000
 8005f24:	10624dd3 	.word	0x10624dd3

08005f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d07d      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f44:	2300      	movs	r3, #0
 8005f46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f48:	4b4f      	ldr	r3, [pc, #316]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10d      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f54:	4b4c      	ldr	r3, [pc, #304]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	4a4b      	ldr	r2, [pc, #300]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	61d3      	str	r3, [r2, #28]
 8005f60:	4b49      	ldr	r3, [pc, #292]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	4b46      	ldr	r3, [pc, #280]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d118      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a42      	ldr	r2, [pc, #264]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f88:	f7fb fef4 	bl	8001d74 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fb fef0 	bl	8001d74 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	@ 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e06d      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fae:	4b36      	ldr	r3, [pc, #216]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02e      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d027      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fe2:	4a29      	ldr	r2, [pc, #164]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d014      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff2:	f7fb febf 	bl	8001d74 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fb febb 	bl	8001d74 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e036      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006010:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ee      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800601c:	4b1a      	ldr	r3, [pc, #104]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4917      	ldr	r1, [pc, #92]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602a:	4313      	orrs	r3, r2
 800602c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d105      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006034:	4b14      	ldr	r3, [pc, #80]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	4a13      	ldr	r2, [pc, #76]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800603e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800604c:	4b0e      	ldr	r3, [pc, #56]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	490b      	ldr	r1, [pc, #44]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800606a:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	4904      	ldr	r1, [pc, #16]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40021000 	.word	0x40021000
 800608c:	40007000 	.word	0x40007000
 8006090:	42420440 	.word	0x42420440

08006094 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	2300      	movs	r3, #0
 80060ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d00a      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	f200 808a 	bhi.w	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d045      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d075      	beq.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80060ca:	e082      	b.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80060cc:	4b46      	ldr	r3, [pc, #280]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80060d2:	4b45      	ldr	r3, [pc, #276]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d07b      	beq.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	0c9b      	lsrs	r3, r3, #18
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	4a41      	ldr	r2, [pc, #260]	@ (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80060e8:	5cd3      	ldrb	r3, [r2, r3]
 80060ea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d015      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060f6:	4b3c      	ldr	r3, [pc, #240]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	0c5b      	lsrs	r3, r3, #17
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	4a3b      	ldr	r2, [pc, #236]	@ (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006102:	5cd3      	ldrb	r3, [r2, r3]
 8006104:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00d      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006110:	4a38      	ldr	r2, [pc, #224]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	fbb2 f2f3 	udiv	r2, r2, r3
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	e004      	b.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4a34      	ldr	r2, [pc, #208]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800612c:	4b2e      	ldr	r3, [pc, #184]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006138:	d102      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	61bb      	str	r3, [r7, #24]
      break;
 800613e:	e04a      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	4a2d      	ldr	r2, [pc, #180]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	61bb      	str	r3, [r7, #24]
      break;
 800614e:	e042      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006150:	4b25      	ldr	r3, [pc, #148]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800615c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006160:	d108      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800616c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e01f      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800617a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800617e:	d109      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006180:	4b19      	ldr	r3, [pc, #100]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800618c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	e00f      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800619a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619e:	d11c      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061a0:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d016      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80061ac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80061b0:	61bb      	str	r3, [r7, #24]
      break;
 80061b2:	e012      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061b4:	e011      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80061b6:	f7ff fe85 	bl	8005ec4 <HAL_RCC_GetPCLK2Freq>
 80061ba:	4602      	mov	r2, r0
 80061bc:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	0b9b      	lsrs	r3, r3, #14
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	3301      	adds	r3, #1
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	61bb      	str	r3, [r7, #24]
      break;
 80061d0:	e004      	b.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061d2:	bf00      	nop
 80061d4:	e002      	b.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061d6:	bf00      	nop
 80061d8:	e000      	b.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061da:	bf00      	nop
    }
  }
  return (frequency);
 80061dc:	69bb      	ldr	r3, [r7, #24]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	0800b780 	.word	0x0800b780
 80061f0:	0800b790 	.word	0x0800b790
 80061f4:	007a1200 	.word	0x007a1200
 80061f8:	003d0900 	.word	0x003d0900
 80061fc:	aaaaaaab 	.word	0xaaaaaaab

08006200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e076      	b.n	8006300 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006216:	2b00      	cmp	r3, #0
 8006218:	d108      	bne.n	800622c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006222:	d009      	beq.n	8006238 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	61da      	str	r2, [r3, #28]
 800622a:	e005      	b.n	8006238 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fb fb86 	bl	8001964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800626e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062bc:	ea42 0103 	orr.w	r1, r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	0c1a      	lsrs	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f002 0204 	and.w	r2, r2, #4
 80062de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e042      	b.n	80063a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fb fb58 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2224      	movs	r2, #36	@ 0x24
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800634a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fdb7 	bl	8006ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	@ 0x28
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d175      	bne.n	80064b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Transmit+0x2c>
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e06e      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2221      	movs	r2, #33	@ 0x21
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063e6:	f7fb fcc5 	bl	8001d74 <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006400:	d108      	bne.n	8006414 <HAL_UART_Transmit+0x6c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	e003      	b.n	800641c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800641c:	e02e      	b.n	800647c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2200      	movs	r2, #0
 8006426:	2180      	movs	r1, #128	@ 0x80
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fb1c 	bl	8006a66 <UART_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e03a      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3302      	adds	r3, #2
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	e007      	b.n	800646e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1cb      	bne.n	800641e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2200      	movs	r2, #0
 800648e:	2140      	movs	r1, #64	@ 0x40
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fae8 	bl	8006a66 <UART_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e006      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d112      	bne.n	80064fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_UART_Receive_IT+0x26>
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e00b      	b.n	8006500 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	461a      	mov	r2, r3
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 fb0f 	bl	8006b18 <UART_Start_Receive_IT>
 80064fa:	4603      	mov	r3, r0
 80064fc:	e000      	b.n	8006500 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b0ba      	sub	sp, #232	@ 0xe8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800652e:	2300      	movs	r3, #0
 8006530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10f      	bne.n	800656e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <HAL_UART_IRQHandler+0x66>
 800655a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fbec 	bl	8006d44 <UART_Receive_IT>
      return;
 800656c:	e25b      	b.n	8006a26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800656e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80de 	beq.w	8006734 <HAL_UART_IRQHandler+0x22c>
 8006578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d106      	bne.n	8006592 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006588:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80d1 	beq.w	8006734 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <HAL_UART_IRQHandler+0xae>
 800659e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ae:	f043 0201 	orr.w	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <HAL_UART_IRQHandler+0xd2>
 80065c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	f043 0202 	orr.w	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <HAL_UART_IRQHandler+0xf6>
 80065e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f6:	f043 0204 	orr.w	r2, r3, #4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <HAL_UART_IRQHandler+0x126>
 800660a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d105      	bne.n	8006622 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006626:	f043 0208 	orr.w	r2, r3, #8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 81f2 	beq.w	8006a1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d008      	beq.n	8006656 <HAL_UART_IRQHandler+0x14e>
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb77 	bl	8006d44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <HAL_UART_IRQHandler+0x17a>
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d04f      	beq.n	8006722 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa81 	bl	8006b8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d041      	beq.n	800671a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3314      	adds	r3, #20
 800669c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3314      	adds	r3, #20
 80066be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1d9      	bne.n	8006696 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d013      	beq.n	8006712 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	4a7e      	ldr	r2, [pc, #504]	@ (80068e8 <HAL_UART_IRQHandler+0x3e0>)
 80066f0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fc f9e4 	bl	8002ac4 <HAL_DMA_Abort_IT>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d016      	beq.n	8006730 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	e00e      	b.n	8006730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f993 	bl	8006a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	e00a      	b.n	8006730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f98f 	bl	8006a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	e006      	b.n	8006730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f98b 	bl	8006a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800672e:	e175      	b.n	8006a1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	bf00      	nop
    return;
 8006732:	e173      	b.n	8006a1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	2b01      	cmp	r3, #1
 800673a:	f040 814f 	bne.w	80069dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 8148 	beq.w	80069dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8141 	beq.w	80069dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800675a:	2300      	movs	r3, #0
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80b6 	beq.w	80068ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800678c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8145 	beq.w	8006a20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800679a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800679e:	429a      	cmp	r2, r3
 80067a0:	f080 813e 	bcs.w	8006a20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f000 8088 	beq.w	80068c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	330c      	adds	r3, #12
 80067be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	330c      	adds	r3, #12
 80067e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1d9      	bne.n	80067b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3314      	adds	r3, #20
 800680a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3314      	adds	r3, #20
 8006824:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006828:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800682c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006830:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800683a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e1      	bne.n	8006804 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006864:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006866:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800686a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e3      	bne.n	8006840 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006898:	f023 0310 	bic.w	r3, r3, #16
 800689c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80068aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e3      	bne.n	8006886 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fc f8c3 	bl	8002a4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f8b6 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068e4:	e09c      	b.n	8006a20 <HAL_UART_IRQHandler+0x518>
 80068e6:	bf00      	nop
 80068e8:	08006c4f 	.word	0x08006c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 808e 	beq.w	8006a24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8089 	beq.w	8006a24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006928:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006936:	647a      	str	r2, [r7, #68]	@ 0x44
 8006938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800693c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e3      	bne.n	8006912 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3314      	adds	r3, #20
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	623b      	str	r3, [r7, #32]
   return(result);
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3314      	adds	r3, #20
 800696a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800696e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800697c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e3      	bne.n	800694a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069b4:	61fa      	str	r2, [r7, #28]
 80069b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	617b      	str	r3, [r7, #20]
   return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e3      	bne.n	8006990 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f83b 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069da:	e023      	b.n	8006a24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_UART_IRQHandler+0x4f4>
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f93e 	bl	8006c76 <UART_Transmit_IT>
    return;
 80069fa:	e014      	b.n	8006a26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00e      	beq.n	8006a26 <HAL_UART_IRQHandler+0x51e>
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d008      	beq.n	8006a26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f97d 	bl	8006d14 <UART_EndTransmit_IT>
    return;
 8006a1a:	e004      	b.n	8006a26 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a24:	bf00      	nop
  }
}
 8006a26:	37e8      	adds	r7, #232	@ 0xe8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	4613      	mov	r3, r2
 8006a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a76:	e03b      	b.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d037      	beq.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a80:	f7fb f978 	bl	8001d74 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	6a3a      	ldr	r2, [r7, #32]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d302      	bcc.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e03a      	b.n	8006b10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d023      	beq.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b80      	cmp	r3, #128	@ 0x80
 8006aac:	d020      	beq.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b40      	cmp	r3, #64	@ 0x40
 8006ab2:	d01d      	beq.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b08      	cmp	r3, #8
 8006ac0:	d116      	bne.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f856 	bl	8006b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e00f      	b.n	8006b10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	bf0c      	ite	eq
 8006b00:	2301      	moveq	r3, #1
 8006b02:	2300      	movne	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d0b4      	beq.n	8006a78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	88fa      	ldrh	r2, [r7, #6]
 8006b30:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	88fa      	ldrh	r2, [r7, #6]
 8006b36:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2222      	movs	r2, #34	@ 0x22
 8006b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0201 	orr.w	r2, r2, #1
 8006b6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0220 	orr.w	r2, r2, #32
 8006b7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b095      	sub	sp, #84	@ 0x54
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e5      	bne.n	8006b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3314      	adds	r3, #20
 8006be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d119      	bne.n	8006c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f023 0310 	bic.w	r3, r3, #16
 8006c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c22:	61ba      	str	r2, [r7, #24]
 8006c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6979      	ldr	r1, [r7, #20]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c44:	bf00      	nop
 8006c46:	3754      	adds	r7, #84	@ 0x54
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fee8 	bl	8006a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b21      	cmp	r3, #33	@ 0x21
 8006c88:	d13e      	bne.n	8006d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c92:	d114      	bne.n	8006cbe <UART_Transmit_IT+0x48>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d110      	bne.n	8006cbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	1c9a      	adds	r2, r3, #2
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	621a      	str	r2, [r3, #32]
 8006cbc:	e008      	b.n	8006cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6211      	str	r1, [r2, #32]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10f      	bne.n	8006d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fe79 	bl	8006a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	@ 0x30
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b22      	cmp	r3, #34	@ 0x22
 8006d56:	f040 80ae 	bne.w	8006eb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d62:	d117      	bne.n	8006d94 <UART_Receive_IT+0x50>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d113      	bne.n	8006d94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d92:	e026      	b.n	8006de2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006da6:	d007      	beq.n	8006db8 <UART_Receive_IT+0x74>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <UART_Receive_IT+0x82>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e008      	b.n	8006dd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	4619      	mov	r1, r3
 8006df0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d15d      	bne.n	8006eb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0220 	bic.w	r2, r2, #32
 8006e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d135      	bne.n	8006ea8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	613b      	str	r3, [r7, #16]
   return(result);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f023 0310 	bic.w	r3, r3, #16
 8006e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e62:	623a      	str	r2, [r7, #32]
 8006e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	69f9      	ldr	r1, [r7, #28]
 8006e68:	6a3a      	ldr	r2, [r7, #32]
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d10a      	bne.n	8006e9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff fdd5 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
 8006ea6:	e002      	b.n	8006eae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7fa f98b 	bl	80011c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e002      	b.n	8006eb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e000      	b.n	8006eb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006eb6:	2302      	movs	r3, #2
  }
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3730      	adds	r7, #48	@ 0x30
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006efa:	f023 030c 	bic.w	r3, r3, #12
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a2c      	ldr	r2, [pc, #176]	@ (8006fd4 <UART_SetConfig+0x114>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d103      	bne.n	8006f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f28:	f7fe ffcc 	bl	8005ec4 <HAL_RCC_GetPCLK2Freq>
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	e002      	b.n	8006f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f30:	f7fe ffb4 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8006f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009a      	lsls	r2, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	4a22      	ldr	r2, [pc, #136]	@ (8006fd8 <UART_SetConfig+0x118>)
 8006f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	0119      	lsls	r1, r3, #4
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009a      	lsls	r2, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd8 <UART_SetConfig+0x118>)
 8006f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	2064      	movs	r0, #100	@ 0x64
 8006f76:	fb00 f303 	mul.w	r3, r0, r3
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	3332      	adds	r3, #50	@ 0x32
 8006f80:	4a15      	ldr	r2, [pc, #84]	@ (8006fd8 <UART_SetConfig+0x118>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	095b      	lsrs	r3, r3, #5
 8006f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f8c:	4419      	add	r1, r3
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009a      	lsls	r2, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd8 <UART_SetConfig+0x118>)
 8006fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	2064      	movs	r0, #100	@ 0x64
 8006fae:	fb00 f303 	mul.w	r3, r0, r3
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	3332      	adds	r3, #50	@ 0x32
 8006fb8:	4a07      	ldr	r2, [pc, #28]	@ (8006fd8 <UART_SetConfig+0x118>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	f003 020f 	and.w	r2, r3, #15
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	440a      	add	r2, r1
 8006fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40013800 	.word	0x40013800
 8006fd8:	51eb851f 	.word	0x51eb851f

08006fdc <__cvt>:
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	bfbb      	ittet	lt
 8006fe6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006fea:	461d      	movlt	r5, r3
 8006fec:	2300      	movge	r3, #0
 8006fee:	232d      	movlt	r3, #45	@ 0x2d
 8006ff0:	b088      	sub	sp, #32
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	bfb8      	it	lt
 8006ff6:	4614      	movlt	r4, r2
 8006ff8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ffa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006ffc:	7013      	strb	r3, [r2, #0]
 8006ffe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007000:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007004:	f023 0820 	bic.w	r8, r3, #32
 8007008:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800700c:	d005      	beq.n	800701a <__cvt+0x3e>
 800700e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007012:	d100      	bne.n	8007016 <__cvt+0x3a>
 8007014:	3601      	adds	r6, #1
 8007016:	2302      	movs	r3, #2
 8007018:	e000      	b.n	800701c <__cvt+0x40>
 800701a:	2303      	movs	r3, #3
 800701c:	aa07      	add	r2, sp, #28
 800701e:	9204      	str	r2, [sp, #16]
 8007020:	aa06      	add	r2, sp, #24
 8007022:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007026:	e9cd 3600 	strd	r3, r6, [sp]
 800702a:	4622      	mov	r2, r4
 800702c:	462b      	mov	r3, r5
 800702e:	f001 f893 	bl	8008158 <_dtoa_r>
 8007032:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007036:	4607      	mov	r7, r0
 8007038:	d119      	bne.n	800706e <__cvt+0x92>
 800703a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800703c:	07db      	lsls	r3, r3, #31
 800703e:	d50e      	bpl.n	800705e <__cvt+0x82>
 8007040:	eb00 0906 	add.w	r9, r0, r6
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	4620      	mov	r0, r4
 800704a:	4629      	mov	r1, r5
 800704c:	f7f9 fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8007050:	b108      	cbz	r0, 8007056 <__cvt+0x7a>
 8007052:	f8cd 901c 	str.w	r9, [sp, #28]
 8007056:	2230      	movs	r2, #48	@ 0x30
 8007058:	9b07      	ldr	r3, [sp, #28]
 800705a:	454b      	cmp	r3, r9
 800705c:	d31e      	bcc.n	800709c <__cvt+0xc0>
 800705e:	4638      	mov	r0, r7
 8007060:	9b07      	ldr	r3, [sp, #28]
 8007062:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007064:	1bdb      	subs	r3, r3, r7
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	b008      	add	sp, #32
 800706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007072:	eb00 0906 	add.w	r9, r0, r6
 8007076:	d1e5      	bne.n	8007044 <__cvt+0x68>
 8007078:	7803      	ldrb	r3, [r0, #0]
 800707a:	2b30      	cmp	r3, #48	@ 0x30
 800707c:	d10a      	bne.n	8007094 <__cvt+0xb8>
 800707e:	2200      	movs	r2, #0
 8007080:	2300      	movs	r3, #0
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 fc8f 	bl	80009a8 <__aeabi_dcmpeq>
 800708a:	b918      	cbnz	r0, 8007094 <__cvt+0xb8>
 800708c:	f1c6 0601 	rsb	r6, r6, #1
 8007090:	f8ca 6000 	str.w	r6, [sl]
 8007094:	f8da 3000 	ldr.w	r3, [sl]
 8007098:	4499      	add	r9, r3
 800709a:	e7d3      	b.n	8007044 <__cvt+0x68>
 800709c:	1c59      	adds	r1, r3, #1
 800709e:	9107      	str	r1, [sp, #28]
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	e7d9      	b.n	8007058 <__cvt+0x7c>

080070a4 <__exponent>:
 80070a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a6:	2900      	cmp	r1, #0
 80070a8:	bfb6      	itet	lt
 80070aa:	232d      	movlt	r3, #45	@ 0x2d
 80070ac:	232b      	movge	r3, #43	@ 0x2b
 80070ae:	4249      	neglt	r1, r1
 80070b0:	2909      	cmp	r1, #9
 80070b2:	7002      	strb	r2, [r0, #0]
 80070b4:	7043      	strb	r3, [r0, #1]
 80070b6:	dd29      	ble.n	800710c <__exponent+0x68>
 80070b8:	f10d 0307 	add.w	r3, sp, #7
 80070bc:	461d      	mov	r5, r3
 80070be:	270a      	movs	r7, #10
 80070c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80070c4:	461a      	mov	r2, r3
 80070c6:	fb07 1416 	mls	r4, r7, r6, r1
 80070ca:	3430      	adds	r4, #48	@ 0x30
 80070cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070d0:	460c      	mov	r4, r1
 80070d2:	2c63      	cmp	r4, #99	@ 0x63
 80070d4:	4631      	mov	r1, r6
 80070d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80070da:	dcf1      	bgt.n	80070c0 <__exponent+0x1c>
 80070dc:	3130      	adds	r1, #48	@ 0x30
 80070de:	1e94      	subs	r4, r2, #2
 80070e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070e4:	4623      	mov	r3, r4
 80070e6:	1c41      	adds	r1, r0, #1
 80070e8:	42ab      	cmp	r3, r5
 80070ea:	d30a      	bcc.n	8007102 <__exponent+0x5e>
 80070ec:	f10d 0309 	add.w	r3, sp, #9
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	42ac      	cmp	r4, r5
 80070f4:	bf88      	it	hi
 80070f6:	2300      	movhi	r3, #0
 80070f8:	3302      	adds	r3, #2
 80070fa:	4403      	add	r3, r0
 80070fc:	1a18      	subs	r0, r3, r0
 80070fe:	b003      	add	sp, #12
 8007100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007102:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007106:	f801 6f01 	strb.w	r6, [r1, #1]!
 800710a:	e7ed      	b.n	80070e8 <__exponent+0x44>
 800710c:	2330      	movs	r3, #48	@ 0x30
 800710e:	3130      	adds	r1, #48	@ 0x30
 8007110:	7083      	strb	r3, [r0, #2]
 8007112:	70c1      	strb	r1, [r0, #3]
 8007114:	1d03      	adds	r3, r0, #4
 8007116:	e7f1      	b.n	80070fc <__exponent+0x58>

08007118 <_printf_float>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	b091      	sub	sp, #68	@ 0x44
 800711e:	460c      	mov	r4, r1
 8007120:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007124:	4616      	mov	r6, r2
 8007126:	461f      	mov	r7, r3
 8007128:	4605      	mov	r5, r0
 800712a:	f000 ff03 	bl	8007f34 <_localeconv_r>
 800712e:	6803      	ldr	r3, [r0, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	9308      	str	r3, [sp, #32]
 8007134:	f7f9 f80c 	bl	8000150 <strlen>
 8007138:	2300      	movs	r3, #0
 800713a:	930e      	str	r3, [sp, #56]	@ 0x38
 800713c:	f8d8 3000 	ldr.w	r3, [r8]
 8007140:	9009      	str	r0, [sp, #36]	@ 0x24
 8007142:	3307      	adds	r3, #7
 8007144:	f023 0307 	bic.w	r3, r3, #7
 8007148:	f103 0208 	add.w	r2, r3, #8
 800714c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007150:	f8d4 b000 	ldr.w	fp, [r4]
 8007154:	f8c8 2000 	str.w	r2, [r8]
 8007158:	e9d3 8900 	ldrd	r8, r9, [r3]
 800715c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007160:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007162:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007166:	f04f 32ff 	mov.w	r2, #4294967295
 800716a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800716e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007172:	4b9c      	ldr	r3, [pc, #624]	@ (80073e4 <_printf_float+0x2cc>)
 8007174:	f7f9 fc4a 	bl	8000a0c <__aeabi_dcmpun>
 8007178:	bb70      	cbnz	r0, 80071d8 <_printf_float+0xc0>
 800717a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800717e:	f04f 32ff 	mov.w	r2, #4294967295
 8007182:	4b98      	ldr	r3, [pc, #608]	@ (80073e4 <_printf_float+0x2cc>)
 8007184:	f7f9 fc24 	bl	80009d0 <__aeabi_dcmple>
 8007188:	bb30      	cbnz	r0, 80071d8 <_printf_float+0xc0>
 800718a:	2200      	movs	r2, #0
 800718c:	2300      	movs	r3, #0
 800718e:	4640      	mov	r0, r8
 8007190:	4649      	mov	r1, r9
 8007192:	f7f9 fc13 	bl	80009bc <__aeabi_dcmplt>
 8007196:	b110      	cbz	r0, 800719e <_printf_float+0x86>
 8007198:	232d      	movs	r3, #45	@ 0x2d
 800719a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800719e:	4a92      	ldr	r2, [pc, #584]	@ (80073e8 <_printf_float+0x2d0>)
 80071a0:	4b92      	ldr	r3, [pc, #584]	@ (80073ec <_printf_float+0x2d4>)
 80071a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071a6:	bf94      	ite	ls
 80071a8:	4690      	movls	r8, r2
 80071aa:	4698      	movhi	r8, r3
 80071ac:	2303      	movs	r3, #3
 80071ae:	f04f 0900 	mov.w	r9, #0
 80071b2:	6123      	str	r3, [r4, #16]
 80071b4:	f02b 0304 	bic.w	r3, fp, #4
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	4633      	mov	r3, r6
 80071bc:	4621      	mov	r1, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	9700      	str	r7, [sp, #0]
 80071c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80071c4:	f000 f9d4 	bl	8007570 <_printf_common>
 80071c8:	3001      	adds	r0, #1
 80071ca:	f040 8090 	bne.w	80072ee <_printf_float+0x1d6>
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295
 80071d2:	b011      	add	sp, #68	@ 0x44
 80071d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	4640      	mov	r0, r8
 80071de:	4649      	mov	r1, r9
 80071e0:	f7f9 fc14 	bl	8000a0c <__aeabi_dcmpun>
 80071e4:	b148      	cbz	r0, 80071fa <_printf_float+0xe2>
 80071e6:	464b      	mov	r3, r9
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfb8      	it	lt
 80071ec:	232d      	movlt	r3, #45	@ 0x2d
 80071ee:	4a80      	ldr	r2, [pc, #512]	@ (80073f0 <_printf_float+0x2d8>)
 80071f0:	bfb8      	it	lt
 80071f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80071f6:	4b7f      	ldr	r3, [pc, #508]	@ (80073f4 <_printf_float+0x2dc>)
 80071f8:	e7d3      	b.n	80071a2 <_printf_float+0x8a>
 80071fa:	6863      	ldr	r3, [r4, #4]
 80071fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	d13f      	bne.n	8007284 <_printf_float+0x16c>
 8007204:	2306      	movs	r3, #6
 8007206:	6063      	str	r3, [r4, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800720e:	6023      	str	r3, [r4, #0]
 8007210:	9206      	str	r2, [sp, #24]
 8007212:	aa0e      	add	r2, sp, #56	@ 0x38
 8007214:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007218:	aa0d      	add	r2, sp, #52	@ 0x34
 800721a:	9203      	str	r2, [sp, #12]
 800721c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007220:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	4642      	mov	r2, r8
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4628      	mov	r0, r5
 800722c:	464b      	mov	r3, r9
 800722e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007230:	f7ff fed4 	bl	8006fdc <__cvt>
 8007234:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007236:	4680      	mov	r8, r0
 8007238:	2947      	cmp	r1, #71	@ 0x47
 800723a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800723c:	d128      	bne.n	8007290 <_printf_float+0x178>
 800723e:	1cc8      	adds	r0, r1, #3
 8007240:	db02      	blt.n	8007248 <_printf_float+0x130>
 8007242:	6863      	ldr	r3, [r4, #4]
 8007244:	4299      	cmp	r1, r3
 8007246:	dd40      	ble.n	80072ca <_printf_float+0x1b2>
 8007248:	f1aa 0a02 	sub.w	sl, sl, #2
 800724c:	fa5f fa8a 	uxtb.w	sl, sl
 8007250:	4652      	mov	r2, sl
 8007252:	3901      	subs	r1, #1
 8007254:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007258:	910d      	str	r1, [sp, #52]	@ 0x34
 800725a:	f7ff ff23 	bl	80070a4 <__exponent>
 800725e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007260:	4681      	mov	r9, r0
 8007262:	1813      	adds	r3, r2, r0
 8007264:	2a01      	cmp	r2, #1
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	dc02      	bgt.n	8007270 <_printf_float+0x158>
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	07d2      	lsls	r2, r2, #31
 800726e:	d501      	bpl.n	8007274 <_printf_float+0x15c>
 8007270:	3301      	adds	r3, #1
 8007272:	6123      	str	r3, [r4, #16]
 8007274:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007278:	2b00      	cmp	r3, #0
 800727a:	d09e      	beq.n	80071ba <_printf_float+0xa2>
 800727c:	232d      	movs	r3, #45	@ 0x2d
 800727e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007282:	e79a      	b.n	80071ba <_printf_float+0xa2>
 8007284:	2947      	cmp	r1, #71	@ 0x47
 8007286:	d1bf      	bne.n	8007208 <_printf_float+0xf0>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1bd      	bne.n	8007208 <_printf_float+0xf0>
 800728c:	2301      	movs	r3, #1
 800728e:	e7ba      	b.n	8007206 <_printf_float+0xee>
 8007290:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007294:	d9dc      	bls.n	8007250 <_printf_float+0x138>
 8007296:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800729a:	d118      	bne.n	80072ce <_printf_float+0x1b6>
 800729c:	2900      	cmp	r1, #0
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	dd0b      	ble.n	80072ba <_printf_float+0x1a2>
 80072a2:	6121      	str	r1, [r4, #16]
 80072a4:	b913      	cbnz	r3, 80072ac <_printf_float+0x194>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	07d0      	lsls	r0, r2, #31
 80072aa:	d502      	bpl.n	80072b2 <_printf_float+0x19a>
 80072ac:	3301      	adds	r3, #1
 80072ae:	440b      	add	r3, r1
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	f04f 0900 	mov.w	r9, #0
 80072b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072b8:	e7dc      	b.n	8007274 <_printf_float+0x15c>
 80072ba:	b913      	cbnz	r3, 80072c2 <_printf_float+0x1aa>
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	07d2      	lsls	r2, r2, #31
 80072c0:	d501      	bpl.n	80072c6 <_printf_float+0x1ae>
 80072c2:	3302      	adds	r3, #2
 80072c4:	e7f4      	b.n	80072b0 <_printf_float+0x198>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e7f2      	b.n	80072b0 <_printf_float+0x198>
 80072ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d0:	4299      	cmp	r1, r3
 80072d2:	db05      	blt.n	80072e0 <_printf_float+0x1c8>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	6121      	str	r1, [r4, #16]
 80072d8:	07d8      	lsls	r0, r3, #31
 80072da:	d5ea      	bpl.n	80072b2 <_printf_float+0x19a>
 80072dc:	1c4b      	adds	r3, r1, #1
 80072de:	e7e7      	b.n	80072b0 <_printf_float+0x198>
 80072e0:	2900      	cmp	r1, #0
 80072e2:	bfcc      	ite	gt
 80072e4:	2201      	movgt	r2, #1
 80072e6:	f1c1 0202 	rsble	r2, r1, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	e7e0      	b.n	80072b0 <_printf_float+0x198>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	055a      	lsls	r2, r3, #21
 80072f2:	d407      	bmi.n	8007304 <_printf_float+0x1ec>
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	4642      	mov	r2, r8
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	d12b      	bne.n	800735a <_printf_float+0x242>
 8007302:	e764      	b.n	80071ce <_printf_float+0xb6>
 8007304:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007308:	f240 80dc 	bls.w	80074c4 <_printf_float+0x3ac>
 800730c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007310:	2200      	movs	r2, #0
 8007312:	2300      	movs	r3, #0
 8007314:	f7f9 fb48 	bl	80009a8 <__aeabi_dcmpeq>
 8007318:	2800      	cmp	r0, #0
 800731a:	d033      	beq.n	8007384 <_printf_float+0x26c>
 800731c:	2301      	movs	r3, #1
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	4a35      	ldr	r2, [pc, #212]	@ (80073f8 <_printf_float+0x2e0>)
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f af51 	beq.w	80071ce <_printf_float+0xb6>
 800732c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007330:	4543      	cmp	r3, r8
 8007332:	db02      	blt.n	800733a <_printf_float+0x222>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07d8      	lsls	r0, r3, #31
 8007338:	d50f      	bpl.n	800735a <_printf_float+0x242>
 800733a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f af42 	beq.w	80071ce <_printf_float+0xb6>
 800734a:	f04f 0900 	mov.w	r9, #0
 800734e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007352:	f104 0a1a 	add.w	sl, r4, #26
 8007356:	45c8      	cmp	r8, r9
 8007358:	dc09      	bgt.n	800736e <_printf_float+0x256>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	079b      	lsls	r3, r3, #30
 800735e:	f100 8102 	bmi.w	8007566 <_printf_float+0x44e>
 8007362:	68e0      	ldr	r0, [r4, #12]
 8007364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007366:	4298      	cmp	r0, r3
 8007368:	bfb8      	it	lt
 800736a:	4618      	movlt	r0, r3
 800736c:	e731      	b.n	80071d2 <_printf_float+0xba>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	f43f af28 	beq.w	80071ce <_printf_float+0xb6>
 800737e:	f109 0901 	add.w	r9, r9, #1
 8007382:	e7e8      	b.n	8007356 <_printf_float+0x23e>
 8007384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007386:	2b00      	cmp	r3, #0
 8007388:	dc38      	bgt.n	80073fc <_printf_float+0x2e4>
 800738a:	2301      	movs	r3, #1
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	4a19      	ldr	r2, [pc, #100]	@ (80073f8 <_printf_float+0x2e0>)
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	f43f af1a 	beq.w	80071ce <_printf_float+0xb6>
 800739a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800739e:	ea59 0303 	orrs.w	r3, r9, r3
 80073a2:	d102      	bne.n	80073aa <_printf_float+0x292>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d5d7      	bpl.n	800735a <_printf_float+0x242>
 80073aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	f43f af0a 	beq.w	80071ce <_printf_float+0xb6>
 80073ba:	f04f 0a00 	mov.w	sl, #0
 80073be:	f104 0b1a 	add.w	fp, r4, #26
 80073c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073c4:	425b      	negs	r3, r3
 80073c6:	4553      	cmp	r3, sl
 80073c8:	dc01      	bgt.n	80073ce <_printf_float+0x2b6>
 80073ca:	464b      	mov	r3, r9
 80073cc:	e793      	b.n	80072f6 <_printf_float+0x1de>
 80073ce:	2301      	movs	r3, #1
 80073d0:	465a      	mov	r2, fp
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	f43f aef8 	beq.w	80071ce <_printf_float+0xb6>
 80073de:	f10a 0a01 	add.w	sl, sl, #1
 80073e2:	e7ee      	b.n	80073c2 <_printf_float+0x2aa>
 80073e4:	7fefffff 	.word	0x7fefffff
 80073e8:	0800b792 	.word	0x0800b792
 80073ec:	0800b796 	.word	0x0800b796
 80073f0:	0800b79a 	.word	0x0800b79a
 80073f4:	0800b79e 	.word	0x0800b79e
 80073f8:	0800b7a2 	.word	0x0800b7a2
 80073fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007402:	4553      	cmp	r3, sl
 8007404:	bfa8      	it	ge
 8007406:	4653      	movge	r3, sl
 8007408:	2b00      	cmp	r3, #0
 800740a:	4699      	mov	r9, r3
 800740c:	dc36      	bgt.n	800747c <_printf_float+0x364>
 800740e:	f04f 0b00 	mov.w	fp, #0
 8007412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007416:	f104 021a 	add.w	r2, r4, #26
 800741a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800741c:	930a      	str	r3, [sp, #40]	@ 0x28
 800741e:	eba3 0309 	sub.w	r3, r3, r9
 8007422:	455b      	cmp	r3, fp
 8007424:	dc31      	bgt.n	800748a <_printf_float+0x372>
 8007426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007428:	459a      	cmp	sl, r3
 800742a:	dc3a      	bgt.n	80074a2 <_printf_float+0x38a>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07da      	lsls	r2, r3, #31
 8007430:	d437      	bmi.n	80074a2 <_printf_float+0x38a>
 8007432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007434:	ebaa 0903 	sub.w	r9, sl, r3
 8007438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800743a:	ebaa 0303 	sub.w	r3, sl, r3
 800743e:	4599      	cmp	r9, r3
 8007440:	bfa8      	it	ge
 8007442:	4699      	movge	r9, r3
 8007444:	f1b9 0f00 	cmp.w	r9, #0
 8007448:	dc33      	bgt.n	80074b2 <_printf_float+0x39a>
 800744a:	f04f 0800 	mov.w	r8, #0
 800744e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007452:	f104 0b1a 	add.w	fp, r4, #26
 8007456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007458:	ebaa 0303 	sub.w	r3, sl, r3
 800745c:	eba3 0309 	sub.w	r3, r3, r9
 8007460:	4543      	cmp	r3, r8
 8007462:	f77f af7a 	ble.w	800735a <_printf_float+0x242>
 8007466:	2301      	movs	r3, #1
 8007468:	465a      	mov	r2, fp
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f aeac 	beq.w	80071ce <_printf_float+0xb6>
 8007476:	f108 0801 	add.w	r8, r8, #1
 800747a:	e7ec      	b.n	8007456 <_printf_float+0x33e>
 800747c:	4642      	mov	r2, r8
 800747e:	4631      	mov	r1, r6
 8007480:	4628      	mov	r0, r5
 8007482:	47b8      	blx	r7
 8007484:	3001      	adds	r0, #1
 8007486:	d1c2      	bne.n	800740e <_printf_float+0x2f6>
 8007488:	e6a1      	b.n	80071ce <_printf_float+0xb6>
 800748a:	2301      	movs	r3, #1
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	920a      	str	r2, [sp, #40]	@ 0x28
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	f43f ae9a 	beq.w	80071ce <_printf_float+0xb6>
 800749a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800749c:	f10b 0b01 	add.w	fp, fp, #1
 80074a0:	e7bb      	b.n	800741a <_printf_float+0x302>
 80074a2:	4631      	mov	r1, r6
 80074a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	d1c0      	bne.n	8007432 <_printf_float+0x31a>
 80074b0:	e68d      	b.n	80071ce <_printf_float+0xb6>
 80074b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074b4:	464b      	mov	r3, r9
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	4442      	add	r2, r8
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	d1c3      	bne.n	800744a <_printf_float+0x332>
 80074c2:	e684      	b.n	80071ce <_printf_float+0xb6>
 80074c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80074c8:	f1ba 0f01 	cmp.w	sl, #1
 80074cc:	dc01      	bgt.n	80074d2 <_printf_float+0x3ba>
 80074ce:	07db      	lsls	r3, r3, #31
 80074d0:	d536      	bpl.n	8007540 <_printf_float+0x428>
 80074d2:	2301      	movs	r3, #1
 80074d4:	4642      	mov	r2, r8
 80074d6:	4631      	mov	r1, r6
 80074d8:	4628      	mov	r0, r5
 80074da:	47b8      	blx	r7
 80074dc:	3001      	adds	r0, #1
 80074de:	f43f ae76 	beq.w	80071ce <_printf_float+0xb6>
 80074e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b8      	blx	r7
 80074ec:	3001      	adds	r0, #1
 80074ee:	f43f ae6e 	beq.w	80071ce <_printf_float+0xb6>
 80074f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074f6:	2200      	movs	r2, #0
 80074f8:	2300      	movs	r3, #0
 80074fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074fe:	f7f9 fa53 	bl	80009a8 <__aeabi_dcmpeq>
 8007502:	b9c0      	cbnz	r0, 8007536 <_printf_float+0x41e>
 8007504:	4653      	mov	r3, sl
 8007506:	f108 0201 	add.w	r2, r8, #1
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	d10c      	bne.n	800752e <_printf_float+0x416>
 8007514:	e65b      	b.n	80071ce <_printf_float+0xb6>
 8007516:	2301      	movs	r3, #1
 8007518:	465a      	mov	r2, fp
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	47b8      	blx	r7
 8007520:	3001      	adds	r0, #1
 8007522:	f43f ae54 	beq.w	80071ce <_printf_float+0xb6>
 8007526:	f108 0801 	add.w	r8, r8, #1
 800752a:	45d0      	cmp	r8, sl
 800752c:	dbf3      	blt.n	8007516 <_printf_float+0x3fe>
 800752e:	464b      	mov	r3, r9
 8007530:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007534:	e6e0      	b.n	80072f8 <_printf_float+0x1e0>
 8007536:	f04f 0800 	mov.w	r8, #0
 800753a:	f104 0b1a 	add.w	fp, r4, #26
 800753e:	e7f4      	b.n	800752a <_printf_float+0x412>
 8007540:	2301      	movs	r3, #1
 8007542:	4642      	mov	r2, r8
 8007544:	e7e1      	b.n	800750a <_printf_float+0x3f2>
 8007546:	2301      	movs	r3, #1
 8007548:	464a      	mov	r2, r9
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f ae3c 	beq.w	80071ce <_printf_float+0xb6>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800755e:	1a5b      	subs	r3, r3, r1
 8007560:	4543      	cmp	r3, r8
 8007562:	dcf0      	bgt.n	8007546 <_printf_float+0x42e>
 8007564:	e6fd      	b.n	8007362 <_printf_float+0x24a>
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	f104 0919 	add.w	r9, r4, #25
 800756e:	e7f4      	b.n	800755a <_printf_float+0x442>

08007570 <_printf_common>:
 8007570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007574:	4616      	mov	r6, r2
 8007576:	4698      	mov	r8, r3
 8007578:	688a      	ldr	r2, [r1, #8]
 800757a:	690b      	ldr	r3, [r1, #16]
 800757c:	4607      	mov	r7, r0
 800757e:	4293      	cmp	r3, r2
 8007580:	bfb8      	it	lt
 8007582:	4613      	movlt	r3, r2
 8007584:	6033      	str	r3, [r6, #0]
 8007586:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800758a:	460c      	mov	r4, r1
 800758c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007590:	b10a      	cbz	r2, 8007596 <_printf_common+0x26>
 8007592:	3301      	adds	r3, #1
 8007594:	6033      	str	r3, [r6, #0]
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	0699      	lsls	r1, r3, #26
 800759a:	bf42      	ittt	mi
 800759c:	6833      	ldrmi	r3, [r6, #0]
 800759e:	3302      	addmi	r3, #2
 80075a0:	6033      	strmi	r3, [r6, #0]
 80075a2:	6825      	ldr	r5, [r4, #0]
 80075a4:	f015 0506 	ands.w	r5, r5, #6
 80075a8:	d106      	bne.n	80075b8 <_printf_common+0x48>
 80075aa:	f104 0a19 	add.w	sl, r4, #25
 80075ae:	68e3      	ldr	r3, [r4, #12]
 80075b0:	6832      	ldr	r2, [r6, #0]
 80075b2:	1a9b      	subs	r3, r3, r2
 80075b4:	42ab      	cmp	r3, r5
 80075b6:	dc2b      	bgt.n	8007610 <_printf_common+0xa0>
 80075b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	3b00      	subs	r3, #0
 80075c0:	bf18      	it	ne
 80075c2:	2301      	movne	r3, #1
 80075c4:	0692      	lsls	r2, r2, #26
 80075c6:	d430      	bmi.n	800762a <_printf_common+0xba>
 80075c8:	4641      	mov	r1, r8
 80075ca:	4638      	mov	r0, r7
 80075cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075d0:	47c8      	blx	r9
 80075d2:	3001      	adds	r0, #1
 80075d4:	d023      	beq.n	800761e <_printf_common+0xae>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	6922      	ldr	r2, [r4, #16]
 80075da:	f003 0306 	and.w	r3, r3, #6
 80075de:	2b04      	cmp	r3, #4
 80075e0:	bf14      	ite	ne
 80075e2:	2500      	movne	r5, #0
 80075e4:	6833      	ldreq	r3, [r6, #0]
 80075e6:	f04f 0600 	mov.w	r6, #0
 80075ea:	bf08      	it	eq
 80075ec:	68e5      	ldreq	r5, [r4, #12]
 80075ee:	f104 041a 	add.w	r4, r4, #26
 80075f2:	bf08      	it	eq
 80075f4:	1aed      	subeq	r5, r5, r3
 80075f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80075fa:	bf08      	it	eq
 80075fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007600:	4293      	cmp	r3, r2
 8007602:	bfc4      	itt	gt
 8007604:	1a9b      	subgt	r3, r3, r2
 8007606:	18ed      	addgt	r5, r5, r3
 8007608:	42b5      	cmp	r5, r6
 800760a:	d11a      	bne.n	8007642 <_printf_common+0xd2>
 800760c:	2000      	movs	r0, #0
 800760e:	e008      	b.n	8007622 <_printf_common+0xb2>
 8007610:	2301      	movs	r3, #1
 8007612:	4652      	mov	r2, sl
 8007614:	4641      	mov	r1, r8
 8007616:	4638      	mov	r0, r7
 8007618:	47c8      	blx	r9
 800761a:	3001      	adds	r0, #1
 800761c:	d103      	bne.n	8007626 <_printf_common+0xb6>
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007626:	3501      	adds	r5, #1
 8007628:	e7c1      	b.n	80075ae <_printf_common+0x3e>
 800762a:	2030      	movs	r0, #48	@ 0x30
 800762c:	18e1      	adds	r1, r4, r3
 800762e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007638:	4422      	add	r2, r4
 800763a:	3302      	adds	r3, #2
 800763c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007640:	e7c2      	b.n	80075c8 <_printf_common+0x58>
 8007642:	2301      	movs	r3, #1
 8007644:	4622      	mov	r2, r4
 8007646:	4641      	mov	r1, r8
 8007648:	4638      	mov	r0, r7
 800764a:	47c8      	blx	r9
 800764c:	3001      	adds	r0, #1
 800764e:	d0e6      	beq.n	800761e <_printf_common+0xae>
 8007650:	3601      	adds	r6, #1
 8007652:	e7d9      	b.n	8007608 <_printf_common+0x98>

08007654 <_printf_i>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	7e0f      	ldrb	r7, [r1, #24]
 800765a:	4691      	mov	r9, r2
 800765c:	2f78      	cmp	r7, #120	@ 0x78
 800765e:	4680      	mov	r8, r0
 8007660:	460c      	mov	r4, r1
 8007662:	469a      	mov	sl, r3
 8007664:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800766a:	d807      	bhi.n	800767c <_printf_i+0x28>
 800766c:	2f62      	cmp	r7, #98	@ 0x62
 800766e:	d80a      	bhi.n	8007686 <_printf_i+0x32>
 8007670:	2f00      	cmp	r7, #0
 8007672:	f000 80d3 	beq.w	800781c <_printf_i+0x1c8>
 8007676:	2f58      	cmp	r7, #88	@ 0x58
 8007678:	f000 80ba 	beq.w	80077f0 <_printf_i+0x19c>
 800767c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007684:	e03a      	b.n	80076fc <_printf_i+0xa8>
 8007686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800768a:	2b15      	cmp	r3, #21
 800768c:	d8f6      	bhi.n	800767c <_printf_i+0x28>
 800768e:	a101      	add	r1, pc, #4	@ (adr r1, 8007694 <_printf_i+0x40>)
 8007690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007694:	080076ed 	.word	0x080076ed
 8007698:	08007701 	.word	0x08007701
 800769c:	0800767d 	.word	0x0800767d
 80076a0:	0800767d 	.word	0x0800767d
 80076a4:	0800767d 	.word	0x0800767d
 80076a8:	0800767d 	.word	0x0800767d
 80076ac:	08007701 	.word	0x08007701
 80076b0:	0800767d 	.word	0x0800767d
 80076b4:	0800767d 	.word	0x0800767d
 80076b8:	0800767d 	.word	0x0800767d
 80076bc:	0800767d 	.word	0x0800767d
 80076c0:	08007803 	.word	0x08007803
 80076c4:	0800772b 	.word	0x0800772b
 80076c8:	080077bd 	.word	0x080077bd
 80076cc:	0800767d 	.word	0x0800767d
 80076d0:	0800767d 	.word	0x0800767d
 80076d4:	08007825 	.word	0x08007825
 80076d8:	0800767d 	.word	0x0800767d
 80076dc:	0800772b 	.word	0x0800772b
 80076e0:	0800767d 	.word	0x0800767d
 80076e4:	0800767d 	.word	0x0800767d
 80076e8:	080077c5 	.word	0x080077c5
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6032      	str	r2, [r6, #0]
 80076f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076fc:	2301      	movs	r3, #1
 80076fe:	e09e      	b.n	800783e <_printf_i+0x1ea>
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	6031      	str	r1, [r6, #0]
 8007708:	0606      	lsls	r6, r0, #24
 800770a:	d501      	bpl.n	8007710 <_printf_i+0xbc>
 800770c:	681d      	ldr	r5, [r3, #0]
 800770e:	e003      	b.n	8007718 <_printf_i+0xc4>
 8007710:	0645      	lsls	r5, r0, #25
 8007712:	d5fb      	bpl.n	800770c <_printf_i+0xb8>
 8007714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007718:	2d00      	cmp	r5, #0
 800771a:	da03      	bge.n	8007724 <_printf_i+0xd0>
 800771c:	232d      	movs	r3, #45	@ 0x2d
 800771e:	426d      	negs	r5, r5
 8007720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007724:	230a      	movs	r3, #10
 8007726:	4859      	ldr	r0, [pc, #356]	@ (800788c <_printf_i+0x238>)
 8007728:	e011      	b.n	800774e <_printf_i+0xfa>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	0608      	lsls	r0, r1, #24
 8007730:	f853 5b04 	ldr.w	r5, [r3], #4
 8007734:	d402      	bmi.n	800773c <_printf_i+0xe8>
 8007736:	0649      	lsls	r1, r1, #25
 8007738:	bf48      	it	mi
 800773a:	b2ad      	uxthmi	r5, r5
 800773c:	2f6f      	cmp	r7, #111	@ 0x6f
 800773e:	6033      	str	r3, [r6, #0]
 8007740:	bf14      	ite	ne
 8007742:	230a      	movne	r3, #10
 8007744:	2308      	moveq	r3, #8
 8007746:	4851      	ldr	r0, [pc, #324]	@ (800788c <_printf_i+0x238>)
 8007748:	2100      	movs	r1, #0
 800774a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800774e:	6866      	ldr	r6, [r4, #4]
 8007750:	2e00      	cmp	r6, #0
 8007752:	bfa8      	it	ge
 8007754:	6821      	ldrge	r1, [r4, #0]
 8007756:	60a6      	str	r6, [r4, #8]
 8007758:	bfa4      	itt	ge
 800775a:	f021 0104 	bicge.w	r1, r1, #4
 800775e:	6021      	strge	r1, [r4, #0]
 8007760:	b90d      	cbnz	r5, 8007766 <_printf_i+0x112>
 8007762:	2e00      	cmp	r6, #0
 8007764:	d04b      	beq.n	80077fe <_printf_i+0x1aa>
 8007766:	4616      	mov	r6, r2
 8007768:	fbb5 f1f3 	udiv	r1, r5, r3
 800776c:	fb03 5711 	mls	r7, r3, r1, r5
 8007770:	5dc7      	ldrb	r7, [r0, r7]
 8007772:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007776:	462f      	mov	r7, r5
 8007778:	42bb      	cmp	r3, r7
 800777a:	460d      	mov	r5, r1
 800777c:	d9f4      	bls.n	8007768 <_printf_i+0x114>
 800777e:	2b08      	cmp	r3, #8
 8007780:	d10b      	bne.n	800779a <_printf_i+0x146>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	07df      	lsls	r7, r3, #31
 8007786:	d508      	bpl.n	800779a <_printf_i+0x146>
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	6861      	ldr	r1, [r4, #4]
 800778c:	4299      	cmp	r1, r3
 800778e:	bfde      	ittt	le
 8007790:	2330      	movle	r3, #48	@ 0x30
 8007792:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007796:	f106 36ff 	addle.w	r6, r6, #4294967295
 800779a:	1b92      	subs	r2, r2, r6
 800779c:	6122      	str	r2, [r4, #16]
 800779e:	464b      	mov	r3, r9
 80077a0:	4621      	mov	r1, r4
 80077a2:	4640      	mov	r0, r8
 80077a4:	f8cd a000 	str.w	sl, [sp]
 80077a8:	aa03      	add	r2, sp, #12
 80077aa:	f7ff fee1 	bl	8007570 <_printf_common>
 80077ae:	3001      	adds	r0, #1
 80077b0:	d14a      	bne.n	8007848 <_printf_i+0x1f4>
 80077b2:	f04f 30ff 	mov.w	r0, #4294967295
 80077b6:	b004      	add	sp, #16
 80077b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	f043 0320 	orr.w	r3, r3, #32
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	2778      	movs	r7, #120	@ 0x78
 80077c6:	4832      	ldr	r0, [pc, #200]	@ (8007890 <_printf_i+0x23c>)
 80077c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	6831      	ldr	r1, [r6, #0]
 80077d0:	061f      	lsls	r7, r3, #24
 80077d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80077d6:	d402      	bmi.n	80077de <_printf_i+0x18a>
 80077d8:	065f      	lsls	r7, r3, #25
 80077da:	bf48      	it	mi
 80077dc:	b2ad      	uxthmi	r5, r5
 80077de:	6031      	str	r1, [r6, #0]
 80077e0:	07d9      	lsls	r1, r3, #31
 80077e2:	bf44      	itt	mi
 80077e4:	f043 0320 	orrmi.w	r3, r3, #32
 80077e8:	6023      	strmi	r3, [r4, #0]
 80077ea:	b11d      	cbz	r5, 80077f4 <_printf_i+0x1a0>
 80077ec:	2310      	movs	r3, #16
 80077ee:	e7ab      	b.n	8007748 <_printf_i+0xf4>
 80077f0:	4826      	ldr	r0, [pc, #152]	@ (800788c <_printf_i+0x238>)
 80077f2:	e7e9      	b.n	80077c8 <_printf_i+0x174>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	f023 0320 	bic.w	r3, r3, #32
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	e7f6      	b.n	80077ec <_printf_i+0x198>
 80077fe:	4616      	mov	r6, r2
 8007800:	e7bd      	b.n	800777e <_printf_i+0x12a>
 8007802:	6833      	ldr	r3, [r6, #0]
 8007804:	6825      	ldr	r5, [r4, #0]
 8007806:	1d18      	adds	r0, r3, #4
 8007808:	6961      	ldr	r1, [r4, #20]
 800780a:	6030      	str	r0, [r6, #0]
 800780c:	062e      	lsls	r6, r5, #24
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	d501      	bpl.n	8007816 <_printf_i+0x1c2>
 8007812:	6019      	str	r1, [r3, #0]
 8007814:	e002      	b.n	800781c <_printf_i+0x1c8>
 8007816:	0668      	lsls	r0, r5, #25
 8007818:	d5fb      	bpl.n	8007812 <_printf_i+0x1be>
 800781a:	8019      	strh	r1, [r3, #0]
 800781c:	2300      	movs	r3, #0
 800781e:	4616      	mov	r6, r2
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	e7bc      	b.n	800779e <_printf_i+0x14a>
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	2100      	movs	r1, #0
 8007828:	1d1a      	adds	r2, r3, #4
 800782a:	6032      	str	r2, [r6, #0]
 800782c:	681e      	ldr	r6, [r3, #0]
 800782e:	6862      	ldr	r2, [r4, #4]
 8007830:	4630      	mov	r0, r6
 8007832:	f000 fbf6 	bl	8008022 <memchr>
 8007836:	b108      	cbz	r0, 800783c <_printf_i+0x1e8>
 8007838:	1b80      	subs	r0, r0, r6
 800783a:	6060      	str	r0, [r4, #4]
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	2300      	movs	r3, #0
 8007842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007846:	e7aa      	b.n	800779e <_printf_i+0x14a>
 8007848:	4632      	mov	r2, r6
 800784a:	4649      	mov	r1, r9
 800784c:	4640      	mov	r0, r8
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	47d0      	blx	sl
 8007852:	3001      	adds	r0, #1
 8007854:	d0ad      	beq.n	80077b2 <_printf_i+0x15e>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	079b      	lsls	r3, r3, #30
 800785a:	d413      	bmi.n	8007884 <_printf_i+0x230>
 800785c:	68e0      	ldr	r0, [r4, #12]
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	4298      	cmp	r0, r3
 8007862:	bfb8      	it	lt
 8007864:	4618      	movlt	r0, r3
 8007866:	e7a6      	b.n	80077b6 <_printf_i+0x162>
 8007868:	2301      	movs	r3, #1
 800786a:	4632      	mov	r2, r6
 800786c:	4649      	mov	r1, r9
 800786e:	4640      	mov	r0, r8
 8007870:	47d0      	blx	sl
 8007872:	3001      	adds	r0, #1
 8007874:	d09d      	beq.n	80077b2 <_printf_i+0x15e>
 8007876:	3501      	adds	r5, #1
 8007878:	68e3      	ldr	r3, [r4, #12]
 800787a:	9903      	ldr	r1, [sp, #12]
 800787c:	1a5b      	subs	r3, r3, r1
 800787e:	42ab      	cmp	r3, r5
 8007880:	dcf2      	bgt.n	8007868 <_printf_i+0x214>
 8007882:	e7eb      	b.n	800785c <_printf_i+0x208>
 8007884:	2500      	movs	r5, #0
 8007886:	f104 0619 	add.w	r6, r4, #25
 800788a:	e7f5      	b.n	8007878 <_printf_i+0x224>
 800788c:	0800b7a4 	.word	0x0800b7a4
 8007890:	0800b7b5 	.word	0x0800b7b5

08007894 <_scanf_float>:
 8007894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	b087      	sub	sp, #28
 800789a:	9303      	str	r3, [sp, #12]
 800789c:	688b      	ldr	r3, [r1, #8]
 800789e:	4617      	mov	r7, r2
 80078a0:	1e5a      	subs	r2, r3, #1
 80078a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078a6:	bf82      	ittt	hi
 80078a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80078ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80078b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80078b4:	460a      	mov	r2, r1
 80078b6:	f04f 0500 	mov.w	r5, #0
 80078ba:	bf88      	it	hi
 80078bc:	608b      	strhi	r3, [r1, #8]
 80078be:	680b      	ldr	r3, [r1, #0]
 80078c0:	4680      	mov	r8, r0
 80078c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80078c6:	f842 3b1c 	str.w	r3, [r2], #28
 80078ca:	460c      	mov	r4, r1
 80078cc:	bf98      	it	ls
 80078ce:	f04f 0b00 	movls.w	fp, #0
 80078d2:	4616      	mov	r6, r2
 80078d4:	46aa      	mov	sl, r5
 80078d6:	46a9      	mov	r9, r5
 80078d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	9502      	str	r5, [sp, #8]
 80078e0:	68a2      	ldr	r2, [r4, #8]
 80078e2:	b152      	cbz	r2, 80078fa <_scanf_float+0x66>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80078ea:	d865      	bhi.n	80079b8 <_scanf_float+0x124>
 80078ec:	2b40      	cmp	r3, #64	@ 0x40
 80078ee:	d83d      	bhi.n	800796c <_scanf_float+0xd8>
 80078f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80078f4:	b2c8      	uxtb	r0, r1
 80078f6:	280e      	cmp	r0, #14
 80078f8:	d93b      	bls.n	8007972 <_scanf_float+0xde>
 80078fa:	f1b9 0f00 	cmp.w	r9, #0
 80078fe:	d003      	beq.n	8007908 <_scanf_float+0x74>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	f10a 3aff 	add.w	sl, sl, #4294967295
 800790c:	f1ba 0f01 	cmp.w	sl, #1
 8007910:	f200 8118 	bhi.w	8007b44 <_scanf_float+0x2b0>
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	429e      	cmp	r6, r3
 8007918:	f200 8109 	bhi.w	8007b2e <_scanf_float+0x29a>
 800791c:	2001      	movs	r0, #1
 800791e:	b007      	add	sp, #28
 8007920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007924:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007928:	2a0d      	cmp	r2, #13
 800792a:	d8e6      	bhi.n	80078fa <_scanf_float+0x66>
 800792c:	a101      	add	r1, pc, #4	@ (adr r1, 8007934 <_scanf_float+0xa0>)
 800792e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007a7b 	.word	0x08007a7b
 8007938:	080078fb 	.word	0x080078fb
 800793c:	080078fb 	.word	0x080078fb
 8007940:	080078fb 	.word	0x080078fb
 8007944:	08007adb 	.word	0x08007adb
 8007948:	08007ab3 	.word	0x08007ab3
 800794c:	080078fb 	.word	0x080078fb
 8007950:	080078fb 	.word	0x080078fb
 8007954:	08007a89 	.word	0x08007a89
 8007958:	080078fb 	.word	0x080078fb
 800795c:	080078fb 	.word	0x080078fb
 8007960:	080078fb 	.word	0x080078fb
 8007964:	080078fb 	.word	0x080078fb
 8007968:	08007a41 	.word	0x08007a41
 800796c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007970:	e7da      	b.n	8007928 <_scanf_float+0x94>
 8007972:	290e      	cmp	r1, #14
 8007974:	d8c1      	bhi.n	80078fa <_scanf_float+0x66>
 8007976:	a001      	add	r0, pc, #4	@ (adr r0, 800797c <_scanf_float+0xe8>)
 8007978:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800797c:	08007a31 	.word	0x08007a31
 8007980:	080078fb 	.word	0x080078fb
 8007984:	08007a31 	.word	0x08007a31
 8007988:	08007ac7 	.word	0x08007ac7
 800798c:	080078fb 	.word	0x080078fb
 8007990:	080079d9 	.word	0x080079d9
 8007994:	08007a17 	.word	0x08007a17
 8007998:	08007a17 	.word	0x08007a17
 800799c:	08007a17 	.word	0x08007a17
 80079a0:	08007a17 	.word	0x08007a17
 80079a4:	08007a17 	.word	0x08007a17
 80079a8:	08007a17 	.word	0x08007a17
 80079ac:	08007a17 	.word	0x08007a17
 80079b0:	08007a17 	.word	0x08007a17
 80079b4:	08007a17 	.word	0x08007a17
 80079b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80079ba:	d809      	bhi.n	80079d0 <_scanf_float+0x13c>
 80079bc:	2b60      	cmp	r3, #96	@ 0x60
 80079be:	d8b1      	bhi.n	8007924 <_scanf_float+0x90>
 80079c0:	2b54      	cmp	r3, #84	@ 0x54
 80079c2:	d07b      	beq.n	8007abc <_scanf_float+0x228>
 80079c4:	2b59      	cmp	r3, #89	@ 0x59
 80079c6:	d198      	bne.n	80078fa <_scanf_float+0x66>
 80079c8:	2d07      	cmp	r5, #7
 80079ca:	d196      	bne.n	80078fa <_scanf_float+0x66>
 80079cc:	2508      	movs	r5, #8
 80079ce:	e02c      	b.n	8007a2a <_scanf_float+0x196>
 80079d0:	2b74      	cmp	r3, #116	@ 0x74
 80079d2:	d073      	beq.n	8007abc <_scanf_float+0x228>
 80079d4:	2b79      	cmp	r3, #121	@ 0x79
 80079d6:	e7f6      	b.n	80079c6 <_scanf_float+0x132>
 80079d8:	6821      	ldr	r1, [r4, #0]
 80079da:	05c8      	lsls	r0, r1, #23
 80079dc:	d51b      	bpl.n	8007a16 <_scanf_float+0x182>
 80079de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80079e2:	6021      	str	r1, [r4, #0]
 80079e4:	f109 0901 	add.w	r9, r9, #1
 80079e8:	f1bb 0f00 	cmp.w	fp, #0
 80079ec:	d003      	beq.n	80079f6 <_scanf_float+0x162>
 80079ee:	3201      	adds	r2, #1
 80079f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079f4:	60a2      	str	r2, [r4, #8]
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	3301      	adds	r3, #1
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	f340 8087 	ble.w	8007b1c <_scanf_float+0x288>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	3301      	adds	r3, #1
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	e764      	b.n	80078e0 <_scanf_float+0x4c>
 8007a16:	eb1a 0105 	adds.w	r1, sl, r5
 8007a1a:	f47f af6e 	bne.w	80078fa <_scanf_float+0x66>
 8007a1e:	460d      	mov	r5, r1
 8007a20:	468a      	mov	sl, r1
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007a28:	6022      	str	r2, [r4, #0]
 8007a2a:	f806 3b01 	strb.w	r3, [r6], #1
 8007a2e:	e7e2      	b.n	80079f6 <_scanf_float+0x162>
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	0610      	lsls	r0, r2, #24
 8007a34:	f57f af61 	bpl.w	80078fa <_scanf_float+0x66>
 8007a38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a3c:	6022      	str	r2, [r4, #0]
 8007a3e:	e7f4      	b.n	8007a2a <_scanf_float+0x196>
 8007a40:	f1ba 0f00 	cmp.w	sl, #0
 8007a44:	d10e      	bne.n	8007a64 <_scanf_float+0x1d0>
 8007a46:	f1b9 0f00 	cmp.w	r9, #0
 8007a4a:	d10e      	bne.n	8007a6a <_scanf_float+0x1d6>
 8007a4c:	6822      	ldr	r2, [r4, #0]
 8007a4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a56:	d108      	bne.n	8007a6a <_scanf_float+0x1d6>
 8007a58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a5c:	f04f 0a01 	mov.w	sl, #1
 8007a60:	6022      	str	r2, [r4, #0]
 8007a62:	e7e2      	b.n	8007a2a <_scanf_float+0x196>
 8007a64:	f1ba 0f02 	cmp.w	sl, #2
 8007a68:	d055      	beq.n	8007b16 <_scanf_float+0x282>
 8007a6a:	2d01      	cmp	r5, #1
 8007a6c:	d002      	beq.n	8007a74 <_scanf_float+0x1e0>
 8007a6e:	2d04      	cmp	r5, #4
 8007a70:	f47f af43 	bne.w	80078fa <_scanf_float+0x66>
 8007a74:	3501      	adds	r5, #1
 8007a76:	b2ed      	uxtb	r5, r5
 8007a78:	e7d7      	b.n	8007a2a <_scanf_float+0x196>
 8007a7a:	f1ba 0f01 	cmp.w	sl, #1
 8007a7e:	f47f af3c 	bne.w	80078fa <_scanf_float+0x66>
 8007a82:	f04f 0a02 	mov.w	sl, #2
 8007a86:	e7d0      	b.n	8007a2a <_scanf_float+0x196>
 8007a88:	b97d      	cbnz	r5, 8007aaa <_scanf_float+0x216>
 8007a8a:	f1b9 0f00 	cmp.w	r9, #0
 8007a8e:	f47f af37 	bne.w	8007900 <_scanf_float+0x6c>
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a9c:	f040 8103 	bne.w	8007ca6 <_scanf_float+0x412>
 8007aa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007aa4:	2501      	movs	r5, #1
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	e7bf      	b.n	8007a2a <_scanf_float+0x196>
 8007aaa:	2d03      	cmp	r5, #3
 8007aac:	d0e2      	beq.n	8007a74 <_scanf_float+0x1e0>
 8007aae:	2d05      	cmp	r5, #5
 8007ab0:	e7de      	b.n	8007a70 <_scanf_float+0x1dc>
 8007ab2:	2d02      	cmp	r5, #2
 8007ab4:	f47f af21 	bne.w	80078fa <_scanf_float+0x66>
 8007ab8:	2503      	movs	r5, #3
 8007aba:	e7b6      	b.n	8007a2a <_scanf_float+0x196>
 8007abc:	2d06      	cmp	r5, #6
 8007abe:	f47f af1c 	bne.w	80078fa <_scanf_float+0x66>
 8007ac2:	2507      	movs	r5, #7
 8007ac4:	e7b1      	b.n	8007a2a <_scanf_float+0x196>
 8007ac6:	6822      	ldr	r2, [r4, #0]
 8007ac8:	0591      	lsls	r1, r2, #22
 8007aca:	f57f af16 	bpl.w	80078fa <_scanf_float+0x66>
 8007ace:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007ad2:	6022      	str	r2, [r4, #0]
 8007ad4:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ad8:	e7a7      	b.n	8007a2a <_scanf_float+0x196>
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007ae0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007ae4:	d006      	beq.n	8007af4 <_scanf_float+0x260>
 8007ae6:	0550      	lsls	r0, r2, #21
 8007ae8:	f57f af07 	bpl.w	80078fa <_scanf_float+0x66>
 8007aec:	f1b9 0f00 	cmp.w	r9, #0
 8007af0:	f000 80d9 	beq.w	8007ca6 <_scanf_float+0x412>
 8007af4:	0591      	lsls	r1, r2, #22
 8007af6:	bf58      	it	pl
 8007af8:	9902      	ldrpl	r1, [sp, #8]
 8007afa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007afe:	bf58      	it	pl
 8007b00:	eba9 0101 	subpl.w	r1, r9, r1
 8007b04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b08:	f04f 0900 	mov.w	r9, #0
 8007b0c:	bf58      	it	pl
 8007b0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b12:	6022      	str	r2, [r4, #0]
 8007b14:	e789      	b.n	8007a2a <_scanf_float+0x196>
 8007b16:	f04f 0a03 	mov.w	sl, #3
 8007b1a:	e786      	b.n	8007a2a <_scanf_float+0x196>
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b24:	4798      	blx	r3
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f43f aeda 	beq.w	80078e0 <_scanf_float+0x4c>
 8007b2c:	e6e5      	b.n	80078fa <_scanf_float+0x66>
 8007b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b32:	463a      	mov	r2, r7
 8007b34:	4640      	mov	r0, r8
 8007b36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b3a:	4798      	blx	r3
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	6123      	str	r3, [r4, #16]
 8007b42:	e6e7      	b.n	8007914 <_scanf_float+0x80>
 8007b44:	1e6b      	subs	r3, r5, #1
 8007b46:	2b06      	cmp	r3, #6
 8007b48:	d824      	bhi.n	8007b94 <_scanf_float+0x300>
 8007b4a:	2d02      	cmp	r5, #2
 8007b4c:	d836      	bhi.n	8007bbc <_scanf_float+0x328>
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	429e      	cmp	r6, r3
 8007b52:	f67f aee3 	bls.w	800791c <_scanf_float+0x88>
 8007b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b5a:	463a      	mov	r2, r7
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b62:	4798      	blx	r3
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	e7f0      	b.n	8007b4e <_scanf_float+0x2ba>
 8007b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b70:	463a      	mov	r2, r7
 8007b72:	4640      	mov	r0, r8
 8007b74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b78:	4798      	blx	r3
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b84:	fa5f fa8a 	uxtb.w	sl, sl
 8007b88:	f1ba 0f02 	cmp.w	sl, #2
 8007b8c:	d1ee      	bne.n	8007b6c <_scanf_float+0x2d8>
 8007b8e:	3d03      	subs	r5, #3
 8007b90:	b2ed      	uxtb	r5, r5
 8007b92:	1b76      	subs	r6, r6, r5
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	05da      	lsls	r2, r3, #23
 8007b98:	d530      	bpl.n	8007bfc <_scanf_float+0x368>
 8007b9a:	055b      	lsls	r3, r3, #21
 8007b9c:	d511      	bpl.n	8007bc2 <_scanf_float+0x32e>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	429e      	cmp	r6, r3
 8007ba2:	f67f aebb 	bls.w	800791c <_scanf_float+0x88>
 8007ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007baa:	463a      	mov	r2, r7
 8007bac:	4640      	mov	r0, r8
 8007bae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bb2:	4798      	blx	r3
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	e7f0      	b.n	8007b9e <_scanf_float+0x30a>
 8007bbc:	46aa      	mov	sl, r5
 8007bbe:	46b3      	mov	fp, r6
 8007bc0:	e7de      	b.n	8007b80 <_scanf_float+0x2ec>
 8007bc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	2965      	cmp	r1, #101	@ 0x65
 8007bca:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bce:	f106 35ff 	add.w	r5, r6, #4294967295
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	d00c      	beq.n	8007bf0 <_scanf_float+0x35c>
 8007bd6:	2945      	cmp	r1, #69	@ 0x45
 8007bd8:	d00a      	beq.n	8007bf0 <_scanf_float+0x35c>
 8007bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bde:	463a      	mov	r2, r7
 8007be0:	4640      	mov	r0, r8
 8007be2:	4798      	blx	r3
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	1eb5      	subs	r5, r6, #2
 8007bee:	6123      	str	r3, [r4, #16]
 8007bf0:	463a      	mov	r2, r7
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bf8:	4798      	blx	r3
 8007bfa:	462e      	mov	r6, r5
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	f012 0210 	ands.w	r2, r2, #16
 8007c02:	d001      	beq.n	8007c08 <_scanf_float+0x374>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e68a      	b.n	800791e <_scanf_float+0x8a>
 8007c08:	7032      	strb	r2, [r6, #0]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c14:	d11c      	bne.n	8007c50 <_scanf_float+0x3bc>
 8007c16:	9b02      	ldr	r3, [sp, #8]
 8007c18:	454b      	cmp	r3, r9
 8007c1a:	eba3 0209 	sub.w	r2, r3, r9
 8007c1e:	d123      	bne.n	8007c68 <_scanf_float+0x3d4>
 8007c20:	2200      	movs	r2, #0
 8007c22:	4640      	mov	r0, r8
 8007c24:	9901      	ldr	r1, [sp, #4]
 8007c26:	f002 fbff 	bl	800a428 <_strtod_r>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	6825      	ldr	r5, [r4, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f015 0f02 	tst.w	r5, #2
 8007c34:	4606      	mov	r6, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	f103 0204 	add.w	r2, r3, #4
 8007c3c:	d01f      	beq.n	8007c7e <_scanf_float+0x3ea>
 8007c3e:	9903      	ldr	r1, [sp, #12]
 8007c40:	600a      	str	r2, [r1, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	e9c3 6700 	strd	r6, r7, [r3]
 8007c48:	68e3      	ldr	r3, [r4, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60e3      	str	r3, [r4, #12]
 8007c4e:	e7d9      	b.n	8007c04 <_scanf_float+0x370>
 8007c50:	9b04      	ldr	r3, [sp, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0e4      	beq.n	8007c20 <_scanf_float+0x38c>
 8007c56:	9905      	ldr	r1, [sp, #20]
 8007c58:	230a      	movs	r3, #10
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	3101      	adds	r1, #1
 8007c5e:	f002 fc63 	bl	800a528 <_strtol_r>
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	9e05      	ldr	r6, [sp, #20]
 8007c66:	1ac2      	subs	r2, r0, r3
 8007c68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c6c:	429e      	cmp	r6, r3
 8007c6e:	bf28      	it	cs
 8007c70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c74:	4630      	mov	r0, r6
 8007c76:	490d      	ldr	r1, [pc, #52]	@ (8007cac <_scanf_float+0x418>)
 8007c78:	f000 f8f0 	bl	8007e5c <siprintf>
 8007c7c:	e7d0      	b.n	8007c20 <_scanf_float+0x38c>
 8007c7e:	076d      	lsls	r5, r5, #29
 8007c80:	d4dd      	bmi.n	8007c3e <_scanf_float+0x3aa>
 8007c82:	9d03      	ldr	r5, [sp, #12]
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	681d      	ldr	r5, [r3, #0]
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	f7f8 febe 	bl	8000a0c <__aeabi_dcmpun>
 8007c90:	b120      	cbz	r0, 8007c9c <_scanf_float+0x408>
 8007c92:	4807      	ldr	r0, [pc, #28]	@ (8007cb0 <_scanf_float+0x41c>)
 8007c94:	f000 f9d4 	bl	8008040 <nanf>
 8007c98:	6028      	str	r0, [r5, #0]
 8007c9a:	e7d5      	b.n	8007c48 <_scanf_float+0x3b4>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 ff12 	bl	8000ac8 <__aeabi_d2f>
 8007ca4:	e7f8      	b.n	8007c98 <_scanf_float+0x404>
 8007ca6:	f04f 0900 	mov.w	r9, #0
 8007caa:	e62d      	b.n	8007908 <_scanf_float+0x74>
 8007cac:	0800b7c6 	.word	0x0800b7c6
 8007cb0:	0800bb5d 	.word	0x0800bb5d

08007cb4 <std>:
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	4604      	mov	r4, r0
 8007cba:	e9c0 3300 	strd	r3, r3, [r0]
 8007cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cc2:	6083      	str	r3, [r0, #8]
 8007cc4:	8181      	strh	r1, [r0, #12]
 8007cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cc8:	81c2      	strh	r2, [r0, #14]
 8007cca:	6183      	str	r3, [r0, #24]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	2208      	movs	r2, #8
 8007cd0:	305c      	adds	r0, #92	@ 0x5c
 8007cd2:	f000 f926 	bl	8007f22 <memset>
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <std+0x58>)
 8007cd8:	6224      	str	r4, [r4, #32]
 8007cda:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d10 <std+0x5c>)
 8007cde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d14 <std+0x60>)
 8007ce2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <std+0x64>)
 8007ce6:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <std+0x68>)
 8007cea:	429c      	cmp	r4, r3
 8007cec:	d006      	beq.n	8007cfc <std+0x48>
 8007cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cf2:	4294      	cmp	r4, r2
 8007cf4:	d002      	beq.n	8007cfc <std+0x48>
 8007cf6:	33d0      	adds	r3, #208	@ 0xd0
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d105      	bne.n	8007d08 <std+0x54>
 8007cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d04:	f000 b98a 	b.w	800801c <__retarget_lock_init_recursive>
 8007d08:	bd10      	pop	{r4, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08007e9d 	.word	0x08007e9d
 8007d10:	08007ebf 	.word	0x08007ebf
 8007d14:	08007ef7 	.word	0x08007ef7
 8007d18:	08007f1b 	.word	0x08007f1b
 8007d1c:	2000032c 	.word	0x2000032c

08007d20 <stdio_exit_handler>:
 8007d20:	4a02      	ldr	r2, [pc, #8]	@ (8007d2c <stdio_exit_handler+0xc>)
 8007d22:	4903      	ldr	r1, [pc, #12]	@ (8007d30 <stdio_exit_handler+0x10>)
 8007d24:	4803      	ldr	r0, [pc, #12]	@ (8007d34 <stdio_exit_handler+0x14>)
 8007d26:	f000 b869 	b.w	8007dfc <_fwalk_sglue>
 8007d2a:	bf00      	nop
 8007d2c:	2000000c 	.word	0x2000000c
 8007d30:	0800ab5d 	.word	0x0800ab5d
 8007d34:	2000001c 	.word	0x2000001c

08007d38 <cleanup_stdio>:
 8007d38:	6841      	ldr	r1, [r0, #4]
 8007d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d6c <cleanup_stdio+0x34>)
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	4604      	mov	r4, r0
 8007d42:	d001      	beq.n	8007d48 <cleanup_stdio+0x10>
 8007d44:	f002 ff0a 	bl	800ab5c <_fflush_r>
 8007d48:	68a1      	ldr	r1, [r4, #8]
 8007d4a:	4b09      	ldr	r3, [pc, #36]	@ (8007d70 <cleanup_stdio+0x38>)
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	d002      	beq.n	8007d56 <cleanup_stdio+0x1e>
 8007d50:	4620      	mov	r0, r4
 8007d52:	f002 ff03 	bl	800ab5c <_fflush_r>
 8007d56:	68e1      	ldr	r1, [r4, #12]
 8007d58:	4b06      	ldr	r3, [pc, #24]	@ (8007d74 <cleanup_stdio+0x3c>)
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	d004      	beq.n	8007d68 <cleanup_stdio+0x30>
 8007d5e:	4620      	mov	r0, r4
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	f002 befa 	b.w	800ab5c <_fflush_r>
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	2000032c 	.word	0x2000032c
 8007d70:	20000394 	.word	0x20000394
 8007d74:	200003fc 	.word	0x200003fc

08007d78 <global_stdio_init.part.0>:
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <global_stdio_init.part.0+0x30>)
 8007d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8007dac <global_stdio_init.part.0+0x34>)
 8007d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007db0 <global_stdio_init.part.0+0x38>)
 8007d80:	4620      	mov	r0, r4
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	2104      	movs	r1, #4
 8007d86:	2200      	movs	r2, #0
 8007d88:	f7ff ff94 	bl	8007cb4 <std>
 8007d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d90:	2201      	movs	r2, #1
 8007d92:	2109      	movs	r1, #9
 8007d94:	f7ff ff8e 	bl	8007cb4 <std>
 8007d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da2:	2112      	movs	r1, #18
 8007da4:	f7ff bf86 	b.w	8007cb4 <std>
 8007da8:	20000464 	.word	0x20000464
 8007dac:	2000032c 	.word	0x2000032c
 8007db0:	08007d21 	.word	0x08007d21

08007db4 <__sfp_lock_acquire>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__sfp_lock_acquire+0x8>)
 8007db6:	f000 b932 	b.w	800801e <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	2000046d 	.word	0x2000046d

08007dc0 <__sfp_lock_release>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	@ (8007dc8 <__sfp_lock_release+0x8>)
 8007dc2:	f000 b92d 	b.w	8008020 <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	2000046d 	.word	0x2000046d

08007dcc <__sinit>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	4604      	mov	r4, r0
 8007dd0:	f7ff fff0 	bl	8007db4 <__sfp_lock_acquire>
 8007dd4:	6a23      	ldr	r3, [r4, #32]
 8007dd6:	b11b      	cbz	r3, 8007de0 <__sinit+0x14>
 8007dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ddc:	f7ff bff0 	b.w	8007dc0 <__sfp_lock_release>
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <__sinit+0x28>)
 8007de2:	6223      	str	r3, [r4, #32]
 8007de4:	4b04      	ldr	r3, [pc, #16]	@ (8007df8 <__sinit+0x2c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f5      	bne.n	8007dd8 <__sinit+0xc>
 8007dec:	f7ff ffc4 	bl	8007d78 <global_stdio_init.part.0>
 8007df0:	e7f2      	b.n	8007dd8 <__sinit+0xc>
 8007df2:	bf00      	nop
 8007df4:	08007d39 	.word	0x08007d39
 8007df8:	20000464 	.word	0x20000464

08007dfc <_fwalk_sglue>:
 8007dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e00:	4607      	mov	r7, r0
 8007e02:	4688      	mov	r8, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	2600      	movs	r6, #0
 8007e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e10:	d505      	bpl.n	8007e1e <_fwalk_sglue+0x22>
 8007e12:	6824      	ldr	r4, [r4, #0]
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	d1f7      	bne.n	8007e08 <_fwalk_sglue+0xc>
 8007e18:	4630      	mov	r0, r6
 8007e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d907      	bls.n	8007e34 <_fwalk_sglue+0x38>
 8007e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	d003      	beq.n	8007e34 <_fwalk_sglue+0x38>
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47c0      	blx	r8
 8007e32:	4306      	orrs	r6, r0
 8007e34:	3568      	adds	r5, #104	@ 0x68
 8007e36:	e7e9      	b.n	8007e0c <_fwalk_sglue+0x10>

08007e38 <iprintf>:
 8007e38:	b40f      	push	{r0, r1, r2, r3}
 8007e3a:	b507      	push	{r0, r1, r2, lr}
 8007e3c:	4906      	ldr	r1, [pc, #24]	@ (8007e58 <iprintf+0x20>)
 8007e3e:	ab04      	add	r3, sp, #16
 8007e40:	6808      	ldr	r0, [r1, #0]
 8007e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e46:	6881      	ldr	r1, [r0, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	f002 fcef 	bl	800a82c <_vfiprintf_r>
 8007e4e:	b003      	add	sp, #12
 8007e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e54:	b004      	add	sp, #16
 8007e56:	4770      	bx	lr
 8007e58:	20000018 	.word	0x20000018

08007e5c <siprintf>:
 8007e5c:	b40e      	push	{r1, r2, r3}
 8007e5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e62:	b500      	push	{lr}
 8007e64:	b09c      	sub	sp, #112	@ 0x70
 8007e66:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e68:	9002      	str	r0, [sp, #8]
 8007e6a:	9006      	str	r0, [sp, #24]
 8007e6c:	9107      	str	r1, [sp, #28]
 8007e6e:	9104      	str	r1, [sp, #16]
 8007e70:	4808      	ldr	r0, [pc, #32]	@ (8007e94 <siprintf+0x38>)
 8007e72:	4909      	ldr	r1, [pc, #36]	@ (8007e98 <siprintf+0x3c>)
 8007e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e78:	9105      	str	r1, [sp, #20]
 8007e7a:	6800      	ldr	r0, [r0, #0]
 8007e7c:	a902      	add	r1, sp, #8
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	f002 fbb0 	bl	800a5e4 <_svfiprintf_r>
 8007e84:	2200      	movs	r2, #0
 8007e86:	9b02      	ldr	r3, [sp, #8]
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	b01c      	add	sp, #112	@ 0x70
 8007e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e90:	b003      	add	sp, #12
 8007e92:	4770      	bx	lr
 8007e94:	20000018 	.word	0x20000018
 8007e98:	ffff0208 	.word	0xffff0208

08007e9c <__sread>:
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea4:	f000 f86c 	bl	8007f80 <_read_r>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	bfab      	itete	ge
 8007eac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007eae:	89a3      	ldrhlt	r3, [r4, #12]
 8007eb0:	181b      	addge	r3, r3, r0
 8007eb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eb6:	bfac      	ite	ge
 8007eb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eba:	81a3      	strhlt	r3, [r4, #12]
 8007ebc:	bd10      	pop	{r4, pc}

08007ebe <__swrite>:
 8007ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec2:	461f      	mov	r7, r3
 8007ec4:	898b      	ldrh	r3, [r1, #12]
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	05db      	lsls	r3, r3, #23
 8007eca:	460c      	mov	r4, r1
 8007ecc:	4616      	mov	r6, r2
 8007ece:	d505      	bpl.n	8007edc <__swrite+0x1e>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	f000 f840 	bl	8007f5c <_lseek_r>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	4632      	mov	r2, r6
 8007ee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	463b      	mov	r3, r7
 8007eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	f000 b857 	b.w	8007fa4 <_write_r>

08007ef6 <__sseek>:
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	460c      	mov	r4, r1
 8007efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efe:	f000 f82d 	bl	8007f5c <_lseek_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	bf15      	itete	ne
 8007f08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f12:	81a3      	strheq	r3, [r4, #12]
 8007f14:	bf18      	it	ne
 8007f16:	81a3      	strhne	r3, [r4, #12]
 8007f18:	bd10      	pop	{r4, pc}

08007f1a <__sclose>:
 8007f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1e:	f000 b80d 	b.w	8007f3c <_close_r>

08007f22 <memset>:
 8007f22:	4603      	mov	r3, r0
 8007f24:	4402      	add	r2, r0
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d100      	bne.n	8007f2c <memset+0xa>
 8007f2a:	4770      	bx	lr
 8007f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f30:	e7f9      	b.n	8007f26 <memset+0x4>
	...

08007f34 <_localeconv_r>:
 8007f34:	4800      	ldr	r0, [pc, #0]	@ (8007f38 <_localeconv_r+0x4>)
 8007f36:	4770      	bx	lr
 8007f38:	20000158 	.word	0x20000158

08007f3c <_close_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4d05      	ldr	r5, [pc, #20]	@ (8007f58 <_close_r+0x1c>)
 8007f42:	4604      	mov	r4, r0
 8007f44:	4608      	mov	r0, r1
 8007f46:	602b      	str	r3, [r5, #0]
 8007f48:	f7f9 fe29 	bl	8001b9e <_close>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_close_r+0x1a>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_close_r+0x1a>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	20000468 	.word	0x20000468

08007f5c <_lseek_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	2200      	movs	r2, #0
 8007f66:	4d05      	ldr	r5, [pc, #20]	@ (8007f7c <_lseek_r+0x20>)
 8007f68:	602a      	str	r2, [r5, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f7f9 fe3b 	bl	8001be6 <_lseek>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_lseek_r+0x1e>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_lseek_r+0x1e>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20000468 	.word	0x20000468

08007f80 <_read_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	4611      	mov	r1, r2
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4d05      	ldr	r5, [pc, #20]	@ (8007fa0 <_read_r+0x20>)
 8007f8c:	602a      	str	r2, [r5, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f7f9 fde8 	bl	8001b64 <_read>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_read_r+0x1e>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_read_r+0x1e>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20000468 	.word	0x20000468

08007fa4 <_write_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	2200      	movs	r2, #0
 8007fae:	4d05      	ldr	r5, [pc, #20]	@ (8007fc4 <_write_r+0x20>)
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f7f9 f93e 	bl	8001234 <_write>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_write_r+0x1e>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_write_r+0x1e>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	20000468 	.word	0x20000468

08007fc8 <__errno>:
 8007fc8:	4b01      	ldr	r3, [pc, #4]	@ (8007fd0 <__errno+0x8>)
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	20000018 	.word	0x20000018

08007fd4 <__libc_init_array>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	4d0c      	ldr	r5, [pc, #48]	@ (800800c <__libc_init_array+0x38>)
 8007fda:	4c0d      	ldr	r4, [pc, #52]	@ (8008010 <__libc_init_array+0x3c>)
 8007fdc:	1b64      	subs	r4, r4, r5
 8007fde:	10a4      	asrs	r4, r4, #2
 8007fe0:	42a6      	cmp	r6, r4
 8007fe2:	d109      	bne.n	8007ff8 <__libc_init_array+0x24>
 8007fe4:	f003 fb68 	bl	800b6b8 <_init>
 8007fe8:	2600      	movs	r6, #0
 8007fea:	4d0a      	ldr	r5, [pc, #40]	@ (8008014 <__libc_init_array+0x40>)
 8007fec:	4c0a      	ldr	r4, [pc, #40]	@ (8008018 <__libc_init_array+0x44>)
 8007fee:	1b64      	subs	r4, r4, r5
 8007ff0:	10a4      	asrs	r4, r4, #2
 8007ff2:	42a6      	cmp	r6, r4
 8007ff4:	d105      	bne.n	8008002 <__libc_init_array+0x2e>
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffc:	4798      	blx	r3
 8007ffe:	3601      	adds	r6, #1
 8008000:	e7ee      	b.n	8007fe0 <__libc_init_array+0xc>
 8008002:	f855 3b04 	ldr.w	r3, [r5], #4
 8008006:	4798      	blx	r3
 8008008:	3601      	adds	r6, #1
 800800a:	e7f2      	b.n	8007ff2 <__libc_init_array+0x1e>
 800800c:	0800bbc8 	.word	0x0800bbc8
 8008010:	0800bbc8 	.word	0x0800bbc8
 8008014:	0800bbc8 	.word	0x0800bbc8
 8008018:	0800bbcc 	.word	0x0800bbcc

0800801c <__retarget_lock_init_recursive>:
 800801c:	4770      	bx	lr

0800801e <__retarget_lock_acquire_recursive>:
 800801e:	4770      	bx	lr

08008020 <__retarget_lock_release_recursive>:
 8008020:	4770      	bx	lr

08008022 <memchr>:
 8008022:	4603      	mov	r3, r0
 8008024:	b510      	push	{r4, lr}
 8008026:	b2c9      	uxtb	r1, r1
 8008028:	4402      	add	r2, r0
 800802a:	4293      	cmp	r3, r2
 800802c:	4618      	mov	r0, r3
 800802e:	d101      	bne.n	8008034 <memchr+0x12>
 8008030:	2000      	movs	r0, #0
 8008032:	e003      	b.n	800803c <memchr+0x1a>
 8008034:	7804      	ldrb	r4, [r0, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	428c      	cmp	r4, r1
 800803a:	d1f6      	bne.n	800802a <memchr+0x8>
 800803c:	bd10      	pop	{r4, pc}
	...

08008040 <nanf>:
 8008040:	4800      	ldr	r0, [pc, #0]	@ (8008044 <nanf+0x4>)
 8008042:	4770      	bx	lr
 8008044:	7fc00000 	.word	0x7fc00000

08008048 <quorem>:
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	6903      	ldr	r3, [r0, #16]
 800804e:	690c      	ldr	r4, [r1, #16]
 8008050:	4607      	mov	r7, r0
 8008052:	42a3      	cmp	r3, r4
 8008054:	db7e      	blt.n	8008154 <quorem+0x10c>
 8008056:	3c01      	subs	r4, #1
 8008058:	00a3      	lsls	r3, r4, #2
 800805a:	f100 0514 	add.w	r5, r0, #20
 800805e:	f101 0814 	add.w	r8, r1, #20
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800806e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008072:	3301      	adds	r3, #1
 8008074:	429a      	cmp	r2, r3
 8008076:	fbb2 f6f3 	udiv	r6, r2, r3
 800807a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800807e:	d32e      	bcc.n	80080de <quorem+0x96>
 8008080:	f04f 0a00 	mov.w	sl, #0
 8008084:	46c4      	mov	ip, r8
 8008086:	46ae      	mov	lr, r5
 8008088:	46d3      	mov	fp, sl
 800808a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800808e:	b298      	uxth	r0, r3
 8008090:	fb06 a000 	mla	r0, r6, r0, sl
 8008094:	0c1b      	lsrs	r3, r3, #16
 8008096:	0c02      	lsrs	r2, r0, #16
 8008098:	fb06 2303 	mla	r3, r6, r3, r2
 800809c:	f8de 2000 	ldr.w	r2, [lr]
 80080a0:	b280      	uxth	r0, r0
 80080a2:	b292      	uxth	r2, r2
 80080a4:	1a12      	subs	r2, r2, r0
 80080a6:	445a      	add	r2, fp
 80080a8:	f8de 0000 	ldr.w	r0, [lr]
 80080ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080ba:	b292      	uxth	r2, r2
 80080bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080c0:	45e1      	cmp	r9, ip
 80080c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80080c6:	f84e 2b04 	str.w	r2, [lr], #4
 80080ca:	d2de      	bcs.n	800808a <quorem+0x42>
 80080cc:	9b00      	ldr	r3, [sp, #0]
 80080ce:	58eb      	ldr	r3, [r5, r3]
 80080d0:	b92b      	cbnz	r3, 80080de <quorem+0x96>
 80080d2:	9b01      	ldr	r3, [sp, #4]
 80080d4:	3b04      	subs	r3, #4
 80080d6:	429d      	cmp	r5, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	d32f      	bcc.n	800813c <quorem+0xf4>
 80080dc:	613c      	str	r4, [r7, #16]
 80080de:	4638      	mov	r0, r7
 80080e0:	f001 f9c2 	bl	8009468 <__mcmp>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	db25      	blt.n	8008134 <quorem+0xec>
 80080e8:	4629      	mov	r1, r5
 80080ea:	2000      	movs	r0, #0
 80080ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80080f0:	f8d1 c000 	ldr.w	ip, [r1]
 80080f4:	fa1f fe82 	uxth.w	lr, r2
 80080f8:	fa1f f38c 	uxth.w	r3, ip
 80080fc:	eba3 030e 	sub.w	r3, r3, lr
 8008100:	4403      	add	r3, r0
 8008102:	0c12      	lsrs	r2, r2, #16
 8008104:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008108:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800810c:	b29b      	uxth	r3, r3
 800810e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008112:	45c1      	cmp	r9, r8
 8008114:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008118:	f841 3b04 	str.w	r3, [r1], #4
 800811c:	d2e6      	bcs.n	80080ec <quorem+0xa4>
 800811e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008126:	b922      	cbnz	r2, 8008132 <quorem+0xea>
 8008128:	3b04      	subs	r3, #4
 800812a:	429d      	cmp	r5, r3
 800812c:	461a      	mov	r2, r3
 800812e:	d30b      	bcc.n	8008148 <quorem+0x100>
 8008130:	613c      	str	r4, [r7, #16]
 8008132:	3601      	adds	r6, #1
 8008134:	4630      	mov	r0, r6
 8008136:	b003      	add	sp, #12
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	6812      	ldr	r2, [r2, #0]
 800813e:	3b04      	subs	r3, #4
 8008140:	2a00      	cmp	r2, #0
 8008142:	d1cb      	bne.n	80080dc <quorem+0x94>
 8008144:	3c01      	subs	r4, #1
 8008146:	e7c6      	b.n	80080d6 <quorem+0x8e>
 8008148:	6812      	ldr	r2, [r2, #0]
 800814a:	3b04      	subs	r3, #4
 800814c:	2a00      	cmp	r2, #0
 800814e:	d1ef      	bne.n	8008130 <quorem+0xe8>
 8008150:	3c01      	subs	r4, #1
 8008152:	e7ea      	b.n	800812a <quorem+0xe2>
 8008154:	2000      	movs	r0, #0
 8008156:	e7ee      	b.n	8008136 <quorem+0xee>

08008158 <_dtoa_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4614      	mov	r4, r2
 800815e:	461d      	mov	r5, r3
 8008160:	69c7      	ldr	r7, [r0, #28]
 8008162:	b097      	sub	sp, #92	@ 0x5c
 8008164:	4683      	mov	fp, r0
 8008166:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800816a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800816c:	b97f      	cbnz	r7, 800818e <_dtoa_r+0x36>
 800816e:	2010      	movs	r0, #16
 8008170:	f000 fe02 	bl	8008d78 <malloc>
 8008174:	4602      	mov	r2, r0
 8008176:	f8cb 001c 	str.w	r0, [fp, #28]
 800817a:	b920      	cbnz	r0, 8008186 <_dtoa_r+0x2e>
 800817c:	21ef      	movs	r1, #239	@ 0xef
 800817e:	4ba8      	ldr	r3, [pc, #672]	@ (8008420 <_dtoa_r+0x2c8>)
 8008180:	48a8      	ldr	r0, [pc, #672]	@ (8008424 <_dtoa_r+0x2cc>)
 8008182:	f002 fdf7 	bl	800ad74 <__assert_func>
 8008186:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800818a:	6007      	str	r7, [r0, #0]
 800818c:	60c7      	str	r7, [r0, #12]
 800818e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	b159      	cbz	r1, 80081ae <_dtoa_r+0x56>
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	2301      	movs	r3, #1
 800819a:	4093      	lsls	r3, r2
 800819c:	604a      	str	r2, [r1, #4]
 800819e:	608b      	str	r3, [r1, #8]
 80081a0:	4658      	mov	r0, fp
 80081a2:	f000 fedf 	bl	8008f64 <_Bfree>
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	1e2b      	subs	r3, r5, #0
 80081b0:	bfaf      	iteee	ge
 80081b2:	2300      	movge	r3, #0
 80081b4:	2201      	movlt	r2, #1
 80081b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081ba:	9303      	strlt	r3, [sp, #12]
 80081bc:	bfa8      	it	ge
 80081be:	6033      	strge	r3, [r6, #0]
 80081c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081c4:	4b98      	ldr	r3, [pc, #608]	@ (8008428 <_dtoa_r+0x2d0>)
 80081c6:	bfb8      	it	lt
 80081c8:	6032      	strlt	r2, [r6, #0]
 80081ca:	ea33 0308 	bics.w	r3, r3, r8
 80081ce:	d112      	bne.n	80081f6 <_dtoa_r+0x9e>
 80081d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80081dc:	4323      	orrs	r3, r4
 80081de:	f000 8550 	beq.w	8008c82 <_dtoa_r+0xb2a>
 80081e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800842c <_dtoa_r+0x2d4>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8552 	beq.w	8008c92 <_dtoa_r+0xb3a>
 80081ee:	f10a 0303 	add.w	r3, sl, #3
 80081f2:	f000 bd4c 	b.w	8008c8e <_dtoa_r+0xb36>
 80081f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80081fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008202:	2200      	movs	r2, #0
 8008204:	2300      	movs	r3, #0
 8008206:	f7f8 fbcf 	bl	80009a8 <__aeabi_dcmpeq>
 800820a:	4607      	mov	r7, r0
 800820c:	b158      	cbz	r0, 8008226 <_dtoa_r+0xce>
 800820e:	2301      	movs	r3, #1
 8008210:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008216:	b113      	cbz	r3, 800821e <_dtoa_r+0xc6>
 8008218:	4b85      	ldr	r3, [pc, #532]	@ (8008430 <_dtoa_r+0x2d8>)
 800821a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008434 <_dtoa_r+0x2dc>
 8008222:	f000 bd36 	b.w	8008c92 <_dtoa_r+0xb3a>
 8008226:	ab14      	add	r3, sp, #80	@ 0x50
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	ab15      	add	r3, sp, #84	@ 0x54
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	4658      	mov	r0, fp
 8008230:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008234:	f001 fa30 	bl	8009698 <__d2b>
 8008238:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800823c:	4681      	mov	r9, r0
 800823e:	2e00      	cmp	r6, #0
 8008240:	d077      	beq.n	8008332 <_dtoa_r+0x1da>
 8008242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008248:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800824c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008250:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008254:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008258:	9712      	str	r7, [sp, #72]	@ 0x48
 800825a:	4619      	mov	r1, r3
 800825c:	2200      	movs	r2, #0
 800825e:	4b76      	ldr	r3, [pc, #472]	@ (8008438 <_dtoa_r+0x2e0>)
 8008260:	f7f7 ff82 	bl	8000168 <__aeabi_dsub>
 8008264:	a368      	add	r3, pc, #416	@ (adr r3, 8008408 <_dtoa_r+0x2b0>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 f935 	bl	80004d8 <__aeabi_dmul>
 800826e:	a368      	add	r3, pc, #416	@ (adr r3, 8008410 <_dtoa_r+0x2b8>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f7 ff7a 	bl	800016c <__adddf3>
 8008278:	4604      	mov	r4, r0
 800827a:	4630      	mov	r0, r6
 800827c:	460d      	mov	r5, r1
 800827e:	f7f8 f8c1 	bl	8000404 <__aeabi_i2d>
 8008282:	a365      	add	r3, pc, #404	@ (adr r3, 8008418 <_dtoa_r+0x2c0>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f7 ff6a 	bl	800016c <__adddf3>
 8008298:	4604      	mov	r4, r0
 800829a:	460d      	mov	r5, r1
 800829c:	f7f8 fbcc 	bl	8000a38 <__aeabi_d2iz>
 80082a0:	2200      	movs	r2, #0
 80082a2:	4607      	mov	r7, r0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4620      	mov	r0, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f8 fb87 	bl	80009bc <__aeabi_dcmplt>
 80082ae:	b140      	cbz	r0, 80082c2 <_dtoa_r+0x16a>
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7f8 f8a7 	bl	8000404 <__aeabi_i2d>
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	f7f8 fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80082be:	b900      	cbnz	r0, 80082c2 <_dtoa_r+0x16a>
 80082c0:	3f01      	subs	r7, #1
 80082c2:	2f16      	cmp	r7, #22
 80082c4:	d853      	bhi.n	800836e <_dtoa_r+0x216>
 80082c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ca:	4b5c      	ldr	r3, [pc, #368]	@ (800843c <_dtoa_r+0x2e4>)
 80082cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7f8 fb72 	bl	80009bc <__aeabi_dcmplt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d04a      	beq.n	8008372 <_dtoa_r+0x21a>
 80082dc:	2300      	movs	r3, #0
 80082de:	3f01      	subs	r7, #1
 80082e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082e4:	1b9b      	subs	r3, r3, r6
 80082e6:	1e5a      	subs	r2, r3, #1
 80082e8:	bf46      	itte	mi
 80082ea:	f1c3 0801 	rsbmi	r8, r3, #1
 80082ee:	2300      	movmi	r3, #0
 80082f0:	f04f 0800 	movpl.w	r8, #0
 80082f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80082f6:	bf48      	it	mi
 80082f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80082fa:	2f00      	cmp	r7, #0
 80082fc:	db3b      	blt.n	8008376 <_dtoa_r+0x21e>
 80082fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008300:	970e      	str	r7, [sp, #56]	@ 0x38
 8008302:	443b      	add	r3, r7
 8008304:	9309      	str	r3, [sp, #36]	@ 0x24
 8008306:	2300      	movs	r3, #0
 8008308:	930a      	str	r3, [sp, #40]	@ 0x28
 800830a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800830c:	2b09      	cmp	r3, #9
 800830e:	d866      	bhi.n	80083de <_dtoa_r+0x286>
 8008310:	2b05      	cmp	r3, #5
 8008312:	bfc4      	itt	gt
 8008314:	3b04      	subgt	r3, #4
 8008316:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008318:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800831a:	bfc8      	it	gt
 800831c:	2400      	movgt	r4, #0
 800831e:	f1a3 0302 	sub.w	r3, r3, #2
 8008322:	bfd8      	it	le
 8008324:	2401      	movle	r4, #1
 8008326:	2b03      	cmp	r3, #3
 8008328:	d864      	bhi.n	80083f4 <_dtoa_r+0x29c>
 800832a:	e8df f003 	tbb	[pc, r3]
 800832e:	382b      	.short	0x382b
 8008330:	5636      	.short	0x5636
 8008332:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008336:	441e      	add	r6, r3
 8008338:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800833c:	2b20      	cmp	r3, #32
 800833e:	bfc1      	itttt	gt
 8008340:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008344:	fa08 f803 	lslgt.w	r8, r8, r3
 8008348:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800834c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008350:	bfd6      	itet	le
 8008352:	f1c3 0320 	rsble	r3, r3, #32
 8008356:	ea48 0003 	orrgt.w	r0, r8, r3
 800835a:	fa04 f003 	lslle.w	r0, r4, r3
 800835e:	f7f8 f841 	bl	80003e4 <__aeabi_ui2d>
 8008362:	2201      	movs	r2, #1
 8008364:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008368:	3e01      	subs	r6, #1
 800836a:	9212      	str	r2, [sp, #72]	@ 0x48
 800836c:	e775      	b.n	800825a <_dtoa_r+0x102>
 800836e:	2301      	movs	r3, #1
 8008370:	e7b6      	b.n	80082e0 <_dtoa_r+0x188>
 8008372:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008374:	e7b5      	b.n	80082e2 <_dtoa_r+0x18a>
 8008376:	427b      	negs	r3, r7
 8008378:	930a      	str	r3, [sp, #40]	@ 0x28
 800837a:	2300      	movs	r3, #0
 800837c:	eba8 0807 	sub.w	r8, r8, r7
 8008380:	930e      	str	r3, [sp, #56]	@ 0x38
 8008382:	e7c2      	b.n	800830a <_dtoa_r+0x1b2>
 8008384:	2300      	movs	r3, #0
 8008386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008388:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800838a:	2b00      	cmp	r3, #0
 800838c:	dc35      	bgt.n	80083fa <_dtoa_r+0x2a2>
 800838e:	2301      	movs	r3, #1
 8008390:	461a      	mov	r2, r3
 8008392:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008396:	9221      	str	r2, [sp, #132]	@ 0x84
 8008398:	e00b      	b.n	80083b2 <_dtoa_r+0x25a>
 800839a:	2301      	movs	r3, #1
 800839c:	e7f3      	b.n	8008386 <_dtoa_r+0x22e>
 800839e:	2300      	movs	r3, #0
 80083a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	9308      	str	r3, [sp, #32]
 80083a8:	3301      	adds	r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	9307      	str	r3, [sp, #28]
 80083ae:	bfb8      	it	lt
 80083b0:	2301      	movlt	r3, #1
 80083b2:	2100      	movs	r1, #0
 80083b4:	2204      	movs	r2, #4
 80083b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80083ba:	f102 0514 	add.w	r5, r2, #20
 80083be:	429d      	cmp	r5, r3
 80083c0:	d91f      	bls.n	8008402 <_dtoa_r+0x2aa>
 80083c2:	6041      	str	r1, [r0, #4]
 80083c4:	4658      	mov	r0, fp
 80083c6:	f000 fd8d 	bl	8008ee4 <_Balloc>
 80083ca:	4682      	mov	sl, r0
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d139      	bne.n	8008444 <_dtoa_r+0x2ec>
 80083d0:	4602      	mov	r2, r0
 80083d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80083d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008440 <_dtoa_r+0x2e8>)
 80083d8:	e6d2      	b.n	8008180 <_dtoa_r+0x28>
 80083da:	2301      	movs	r3, #1
 80083dc:	e7e0      	b.n	80083a0 <_dtoa_r+0x248>
 80083de:	2401      	movs	r4, #1
 80083e0:	2300      	movs	r3, #0
 80083e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ea:	2200      	movs	r2, #0
 80083ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80083f0:	2312      	movs	r3, #18
 80083f2:	e7d0      	b.n	8008396 <_dtoa_r+0x23e>
 80083f4:	2301      	movs	r3, #1
 80083f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083f8:	e7f5      	b.n	80083e6 <_dtoa_r+0x28e>
 80083fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008400:	e7d7      	b.n	80083b2 <_dtoa_r+0x25a>
 8008402:	3101      	adds	r1, #1
 8008404:	0052      	lsls	r2, r2, #1
 8008406:	e7d8      	b.n	80083ba <_dtoa_r+0x262>
 8008408:	636f4361 	.word	0x636f4361
 800840c:	3fd287a7 	.word	0x3fd287a7
 8008410:	8b60c8b3 	.word	0x8b60c8b3
 8008414:	3fc68a28 	.word	0x3fc68a28
 8008418:	509f79fb 	.word	0x509f79fb
 800841c:	3fd34413 	.word	0x3fd34413
 8008420:	0800b7d8 	.word	0x0800b7d8
 8008424:	0800b7ef 	.word	0x0800b7ef
 8008428:	7ff00000 	.word	0x7ff00000
 800842c:	0800b7d4 	.word	0x0800b7d4
 8008430:	0800b7a3 	.word	0x0800b7a3
 8008434:	0800b7a2 	.word	0x0800b7a2
 8008438:	3ff80000 	.word	0x3ff80000
 800843c:	0800b8e8 	.word	0x0800b8e8
 8008440:	0800b847 	.word	0x0800b847
 8008444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008448:	6018      	str	r0, [r3, #0]
 800844a:	9b07      	ldr	r3, [sp, #28]
 800844c:	2b0e      	cmp	r3, #14
 800844e:	f200 80a4 	bhi.w	800859a <_dtoa_r+0x442>
 8008452:	2c00      	cmp	r4, #0
 8008454:	f000 80a1 	beq.w	800859a <_dtoa_r+0x442>
 8008458:	2f00      	cmp	r7, #0
 800845a:	dd33      	ble.n	80084c4 <_dtoa_r+0x36c>
 800845c:	4b86      	ldr	r3, [pc, #536]	@ (8008678 <_dtoa_r+0x520>)
 800845e:	f007 020f 	and.w	r2, r7, #15
 8008462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008466:	05f8      	lsls	r0, r7, #23
 8008468:	e9d3 3400 	ldrd	r3, r4, [r3]
 800846c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008470:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008474:	d516      	bpl.n	80084a4 <_dtoa_r+0x34c>
 8008476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847a:	4b80      	ldr	r3, [pc, #512]	@ (800867c <_dtoa_r+0x524>)
 800847c:	2603      	movs	r6, #3
 800847e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008482:	f7f8 f953 	bl	800072c <__aeabi_ddiv>
 8008486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800848a:	f004 040f 	and.w	r4, r4, #15
 800848e:	4d7b      	ldr	r5, [pc, #492]	@ (800867c <_dtoa_r+0x524>)
 8008490:	b954      	cbnz	r4, 80084a8 <_dtoa_r+0x350>
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849a:	f7f8 f947 	bl	800072c <__aeabi_ddiv>
 800849e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a2:	e028      	b.n	80084f6 <_dtoa_r+0x39e>
 80084a4:	2602      	movs	r6, #2
 80084a6:	e7f2      	b.n	800848e <_dtoa_r+0x336>
 80084a8:	07e1      	lsls	r1, r4, #31
 80084aa:	d508      	bpl.n	80084be <_dtoa_r+0x366>
 80084ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084b4:	f7f8 f810 	bl	80004d8 <__aeabi_dmul>
 80084b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084bc:	3601      	adds	r6, #1
 80084be:	1064      	asrs	r4, r4, #1
 80084c0:	3508      	adds	r5, #8
 80084c2:	e7e5      	b.n	8008490 <_dtoa_r+0x338>
 80084c4:	f000 80d2 	beq.w	800866c <_dtoa_r+0x514>
 80084c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084cc:	427c      	negs	r4, r7
 80084ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008678 <_dtoa_r+0x520>)
 80084d0:	f004 020f 	and.w	r2, r4, #15
 80084d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f7 fffc 	bl	80004d8 <__aeabi_dmul>
 80084e0:	2602      	movs	r6, #2
 80084e2:	2300      	movs	r3, #0
 80084e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e8:	4d64      	ldr	r5, [pc, #400]	@ (800867c <_dtoa_r+0x524>)
 80084ea:	1124      	asrs	r4, r4, #4
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	f040 80b2 	bne.w	8008656 <_dtoa_r+0x4fe>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1d3      	bne.n	800849e <_dtoa_r+0x346>
 80084f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80b7 	beq.w	8008670 <_dtoa_r+0x518>
 8008502:	2200      	movs	r2, #0
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	4b5d      	ldr	r3, [pc, #372]	@ (8008680 <_dtoa_r+0x528>)
 800850a:	f7f8 fa57 	bl	80009bc <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f000 80ae 	beq.w	8008670 <_dtoa_r+0x518>
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80aa 	beq.w	8008670 <_dtoa_r+0x518>
 800851c:	9b08      	ldr	r3, [sp, #32]
 800851e:	2b00      	cmp	r3, #0
 8008520:	dd37      	ble.n	8008592 <_dtoa_r+0x43a>
 8008522:	1e7b      	subs	r3, r7, #1
 8008524:	4620      	mov	r0, r4
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	2200      	movs	r2, #0
 800852a:	4629      	mov	r1, r5
 800852c:	4b55      	ldr	r3, [pc, #340]	@ (8008684 <_dtoa_r+0x52c>)
 800852e:	f7f7 ffd3 	bl	80004d8 <__aeabi_dmul>
 8008532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008536:	9c08      	ldr	r4, [sp, #32]
 8008538:	3601      	adds	r6, #1
 800853a:	4630      	mov	r0, r6
 800853c:	f7f7 ff62 	bl	8000404 <__aeabi_i2d>
 8008540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008544:	f7f7 ffc8 	bl	80004d8 <__aeabi_dmul>
 8008548:	2200      	movs	r2, #0
 800854a:	4b4f      	ldr	r3, [pc, #316]	@ (8008688 <_dtoa_r+0x530>)
 800854c:	f7f7 fe0e 	bl	800016c <__adddf3>
 8008550:	4605      	mov	r5, r0
 8008552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008556:	2c00      	cmp	r4, #0
 8008558:	f040 809a 	bne.w	8008690 <_dtoa_r+0x538>
 800855c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	4b4a      	ldr	r3, [pc, #296]	@ (800868c <_dtoa_r+0x534>)
 8008564:	f7f7 fe00 	bl	8000168 <__aeabi_dsub>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008570:	462a      	mov	r2, r5
 8008572:	4633      	mov	r3, r6
 8008574:	f7f8 fa40 	bl	80009f8 <__aeabi_dcmpgt>
 8008578:	2800      	cmp	r0, #0
 800857a:	f040 828e 	bne.w	8008a9a <_dtoa_r+0x942>
 800857e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008582:	462a      	mov	r2, r5
 8008584:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008588:	f7f8 fa18 	bl	80009bc <__aeabi_dcmplt>
 800858c:	2800      	cmp	r0, #0
 800858e:	f040 8127 	bne.w	80087e0 <_dtoa_r+0x688>
 8008592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800859a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800859c:	2b00      	cmp	r3, #0
 800859e:	f2c0 8163 	blt.w	8008868 <_dtoa_r+0x710>
 80085a2:	2f0e      	cmp	r7, #14
 80085a4:	f300 8160 	bgt.w	8008868 <_dtoa_r+0x710>
 80085a8:	4b33      	ldr	r3, [pc, #204]	@ (8008678 <_dtoa_r+0x520>)
 80085aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da03      	bge.n	80085c4 <_dtoa_r+0x46c>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f340 8100 	ble.w	80087c4 <_dtoa_r+0x66c>
 80085c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085c8:	4656      	mov	r6, sl
 80085ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7f8 f8ab 	bl	800072c <__aeabi_ddiv>
 80085d6:	f7f8 fa2f 	bl	8000a38 <__aeabi_d2iz>
 80085da:	4680      	mov	r8, r0
 80085dc:	f7f7 ff12 	bl	8000404 <__aeabi_i2d>
 80085e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e4:	f7f7 ff78 	bl	80004d8 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4620      	mov	r0, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7f7 fdba 	bl	8000168 <__aeabi_dsub>
 80085f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085f8:	9d07      	ldr	r5, [sp, #28]
 80085fa:	f806 4b01 	strb.w	r4, [r6], #1
 80085fe:	eba6 040a 	sub.w	r4, r6, sl
 8008602:	42a5      	cmp	r5, r4
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	f040 8116 	bne.w	8008838 <_dtoa_r+0x6e0>
 800860c:	f7f7 fdae 	bl	800016c <__adddf3>
 8008610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008614:	4604      	mov	r4, r0
 8008616:	460d      	mov	r5, r1
 8008618:	f7f8 f9ee 	bl	80009f8 <__aeabi_dcmpgt>
 800861c:	2800      	cmp	r0, #0
 800861e:	f040 80f8 	bne.w	8008812 <_dtoa_r+0x6ba>
 8008622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800862e:	b118      	cbz	r0, 8008638 <_dtoa_r+0x4e0>
 8008630:	f018 0f01 	tst.w	r8, #1
 8008634:	f040 80ed 	bne.w	8008812 <_dtoa_r+0x6ba>
 8008638:	4649      	mov	r1, r9
 800863a:	4658      	mov	r0, fp
 800863c:	f000 fc92 	bl	8008f64 <_Bfree>
 8008640:	2300      	movs	r3, #0
 8008642:	7033      	strb	r3, [r6, #0]
 8008644:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008646:	3701      	adds	r7, #1
 8008648:	601f      	str	r7, [r3, #0]
 800864a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8320 	beq.w	8008c92 <_dtoa_r+0xb3a>
 8008652:	601e      	str	r6, [r3, #0]
 8008654:	e31d      	b.n	8008c92 <_dtoa_r+0xb3a>
 8008656:	07e2      	lsls	r2, r4, #31
 8008658:	d505      	bpl.n	8008666 <_dtoa_r+0x50e>
 800865a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800865e:	f7f7 ff3b 	bl	80004d8 <__aeabi_dmul>
 8008662:	2301      	movs	r3, #1
 8008664:	3601      	adds	r6, #1
 8008666:	1064      	asrs	r4, r4, #1
 8008668:	3508      	adds	r5, #8
 800866a:	e73f      	b.n	80084ec <_dtoa_r+0x394>
 800866c:	2602      	movs	r6, #2
 800866e:	e742      	b.n	80084f6 <_dtoa_r+0x39e>
 8008670:	9c07      	ldr	r4, [sp, #28]
 8008672:	9704      	str	r7, [sp, #16]
 8008674:	e761      	b.n	800853a <_dtoa_r+0x3e2>
 8008676:	bf00      	nop
 8008678:	0800b8e8 	.word	0x0800b8e8
 800867c:	0800b8c0 	.word	0x0800b8c0
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	40240000 	.word	0x40240000
 8008688:	401c0000 	.word	0x401c0000
 800868c:	40140000 	.word	0x40140000
 8008690:	4b70      	ldr	r3, [pc, #448]	@ (8008854 <_dtoa_r+0x6fc>)
 8008692:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008694:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008698:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800869c:	4454      	add	r4, sl
 800869e:	2900      	cmp	r1, #0
 80086a0:	d045      	beq.n	800872e <_dtoa_r+0x5d6>
 80086a2:	2000      	movs	r0, #0
 80086a4:	496c      	ldr	r1, [pc, #432]	@ (8008858 <_dtoa_r+0x700>)
 80086a6:	f7f8 f841 	bl	800072c <__aeabi_ddiv>
 80086aa:	4633      	mov	r3, r6
 80086ac:	462a      	mov	r2, r5
 80086ae:	f7f7 fd5b 	bl	8000168 <__aeabi_dsub>
 80086b2:	4656      	mov	r6, sl
 80086b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086bc:	f7f8 f9bc 	bl	8000a38 <__aeabi_d2iz>
 80086c0:	4605      	mov	r5, r0
 80086c2:	f7f7 fe9f 	bl	8000404 <__aeabi_i2d>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ce:	f7f7 fd4b 	bl	8000168 <__aeabi_dsub>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	3530      	adds	r5, #48	@ 0x30
 80086d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086e0:	f806 5b01 	strb.w	r5, [r6], #1
 80086e4:	f7f8 f96a 	bl	80009bc <__aeabi_dcmplt>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d163      	bne.n	80087b4 <_dtoa_r+0x65c>
 80086ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086f0:	2000      	movs	r0, #0
 80086f2:	495a      	ldr	r1, [pc, #360]	@ (800885c <_dtoa_r+0x704>)
 80086f4:	f7f7 fd38 	bl	8000168 <__aeabi_dsub>
 80086f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086fc:	f7f8 f95e 	bl	80009bc <__aeabi_dcmplt>
 8008700:	2800      	cmp	r0, #0
 8008702:	f040 8087 	bne.w	8008814 <_dtoa_r+0x6bc>
 8008706:	42a6      	cmp	r6, r4
 8008708:	f43f af43 	beq.w	8008592 <_dtoa_r+0x43a>
 800870c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008710:	2200      	movs	r2, #0
 8008712:	4b53      	ldr	r3, [pc, #332]	@ (8008860 <_dtoa_r+0x708>)
 8008714:	f7f7 fee0 	bl	80004d8 <__aeabi_dmul>
 8008718:	2200      	movs	r2, #0
 800871a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800871e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008722:	4b4f      	ldr	r3, [pc, #316]	@ (8008860 <_dtoa_r+0x708>)
 8008724:	f7f7 fed8 	bl	80004d8 <__aeabi_dmul>
 8008728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800872c:	e7c4      	b.n	80086b8 <_dtoa_r+0x560>
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	f7f7 fed1 	bl	80004d8 <__aeabi_dmul>
 8008736:	4656      	mov	r6, sl
 8008738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800873c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800873e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008742:	f7f8 f979 	bl	8000a38 <__aeabi_d2iz>
 8008746:	4605      	mov	r5, r0
 8008748:	f7f7 fe5c 	bl	8000404 <__aeabi_i2d>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008754:	f7f7 fd08 	bl	8000168 <__aeabi_dsub>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	3530      	adds	r5, #48	@ 0x30
 800875e:	f806 5b01 	strb.w	r5, [r6], #1
 8008762:	42a6      	cmp	r6, r4
 8008764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	d124      	bne.n	80087b8 <_dtoa_r+0x660>
 800876e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008772:	4b39      	ldr	r3, [pc, #228]	@ (8008858 <_dtoa_r+0x700>)
 8008774:	f7f7 fcfa 	bl	800016c <__adddf3>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008780:	f7f8 f93a 	bl	80009f8 <__aeabi_dcmpgt>
 8008784:	2800      	cmp	r0, #0
 8008786:	d145      	bne.n	8008814 <_dtoa_r+0x6bc>
 8008788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800878c:	2000      	movs	r0, #0
 800878e:	4932      	ldr	r1, [pc, #200]	@ (8008858 <_dtoa_r+0x700>)
 8008790:	f7f7 fcea 	bl	8000168 <__aeabi_dsub>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800879c:	f7f8 f90e 	bl	80009bc <__aeabi_dcmplt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f43f aef6 	beq.w	8008592 <_dtoa_r+0x43a>
 80087a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80087a8:	1e73      	subs	r3, r6, #1
 80087aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087b0:	2b30      	cmp	r3, #48	@ 0x30
 80087b2:	d0f8      	beq.n	80087a6 <_dtoa_r+0x64e>
 80087b4:	9f04      	ldr	r7, [sp, #16]
 80087b6:	e73f      	b.n	8008638 <_dtoa_r+0x4e0>
 80087b8:	4b29      	ldr	r3, [pc, #164]	@ (8008860 <_dtoa_r+0x708>)
 80087ba:	f7f7 fe8d 	bl	80004d8 <__aeabi_dmul>
 80087be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087c2:	e7bc      	b.n	800873e <_dtoa_r+0x5e6>
 80087c4:	d10c      	bne.n	80087e0 <_dtoa_r+0x688>
 80087c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ca:	2200      	movs	r2, #0
 80087cc:	4b25      	ldr	r3, [pc, #148]	@ (8008864 <_dtoa_r+0x70c>)
 80087ce:	f7f7 fe83 	bl	80004d8 <__aeabi_dmul>
 80087d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087d6:	f7f8 f905 	bl	80009e4 <__aeabi_dcmpge>
 80087da:	2800      	cmp	r0, #0
 80087dc:	f000 815b 	beq.w	8008a96 <_dtoa_r+0x93e>
 80087e0:	2400      	movs	r4, #0
 80087e2:	4625      	mov	r5, r4
 80087e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087e6:	4656      	mov	r6, sl
 80087e8:	43db      	mvns	r3, r3
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	2700      	movs	r7, #0
 80087ee:	4621      	mov	r1, r4
 80087f0:	4658      	mov	r0, fp
 80087f2:	f000 fbb7 	bl	8008f64 <_Bfree>
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	d0dc      	beq.n	80087b4 <_dtoa_r+0x65c>
 80087fa:	b12f      	cbz	r7, 8008808 <_dtoa_r+0x6b0>
 80087fc:	42af      	cmp	r7, r5
 80087fe:	d003      	beq.n	8008808 <_dtoa_r+0x6b0>
 8008800:	4639      	mov	r1, r7
 8008802:	4658      	mov	r0, fp
 8008804:	f000 fbae 	bl	8008f64 <_Bfree>
 8008808:	4629      	mov	r1, r5
 800880a:	4658      	mov	r0, fp
 800880c:	f000 fbaa 	bl	8008f64 <_Bfree>
 8008810:	e7d0      	b.n	80087b4 <_dtoa_r+0x65c>
 8008812:	9704      	str	r7, [sp, #16]
 8008814:	4633      	mov	r3, r6
 8008816:	461e      	mov	r6, r3
 8008818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800881c:	2a39      	cmp	r2, #57	@ 0x39
 800881e:	d107      	bne.n	8008830 <_dtoa_r+0x6d8>
 8008820:	459a      	cmp	sl, r3
 8008822:	d1f8      	bne.n	8008816 <_dtoa_r+0x6be>
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	3201      	adds	r2, #1
 8008828:	9204      	str	r2, [sp, #16]
 800882a:	2230      	movs	r2, #48	@ 0x30
 800882c:	f88a 2000 	strb.w	r2, [sl]
 8008830:	781a      	ldrb	r2, [r3, #0]
 8008832:	3201      	adds	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e7bd      	b.n	80087b4 <_dtoa_r+0x65c>
 8008838:	2200      	movs	r2, #0
 800883a:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <_dtoa_r+0x708>)
 800883c:	f7f7 fe4c 	bl	80004d8 <__aeabi_dmul>
 8008840:	2200      	movs	r2, #0
 8008842:	2300      	movs	r3, #0
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f7f8 f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800884c:	2800      	cmp	r0, #0
 800884e:	f43f aebc 	beq.w	80085ca <_dtoa_r+0x472>
 8008852:	e6f1      	b.n	8008638 <_dtoa_r+0x4e0>
 8008854:	0800b8e8 	.word	0x0800b8e8
 8008858:	3fe00000 	.word	0x3fe00000
 800885c:	3ff00000 	.word	0x3ff00000
 8008860:	40240000 	.word	0x40240000
 8008864:	40140000 	.word	0x40140000
 8008868:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800886a:	2a00      	cmp	r2, #0
 800886c:	f000 80db 	beq.w	8008a26 <_dtoa_r+0x8ce>
 8008870:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008872:	2a01      	cmp	r2, #1
 8008874:	f300 80bf 	bgt.w	80089f6 <_dtoa_r+0x89e>
 8008878:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800887a:	2a00      	cmp	r2, #0
 800887c:	f000 80b7 	beq.w	80089ee <_dtoa_r+0x896>
 8008880:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008884:	4646      	mov	r6, r8
 8008886:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888a:	2101      	movs	r1, #1
 800888c:	441a      	add	r2, r3
 800888e:	4658      	mov	r0, fp
 8008890:	4498      	add	r8, r3
 8008892:	9209      	str	r2, [sp, #36]	@ 0x24
 8008894:	f000 fc64 	bl	8009160 <__i2b>
 8008898:	4605      	mov	r5, r0
 800889a:	b15e      	cbz	r6, 80088b4 <_dtoa_r+0x75c>
 800889c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd08      	ble.n	80088b4 <_dtoa_r+0x75c>
 80088a2:	42b3      	cmp	r3, r6
 80088a4:	bfa8      	it	ge
 80088a6:	4633      	movge	r3, r6
 80088a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088aa:	eba8 0803 	sub.w	r8, r8, r3
 80088ae:	1af6      	subs	r6, r6, r3
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b6:	b1f3      	cbz	r3, 80088f6 <_dtoa_r+0x79e>
 80088b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80b7 	beq.w	8008a2e <_dtoa_r+0x8d6>
 80088c0:	b18c      	cbz	r4, 80088e6 <_dtoa_r+0x78e>
 80088c2:	4629      	mov	r1, r5
 80088c4:	4622      	mov	r2, r4
 80088c6:	4658      	mov	r0, fp
 80088c8:	f000 fd08 	bl	80092dc <__pow5mult>
 80088cc:	464a      	mov	r2, r9
 80088ce:	4601      	mov	r1, r0
 80088d0:	4605      	mov	r5, r0
 80088d2:	4658      	mov	r0, fp
 80088d4:	f000 fc5a 	bl	800918c <__multiply>
 80088d8:	4649      	mov	r1, r9
 80088da:	9004      	str	r0, [sp, #16]
 80088dc:	4658      	mov	r0, fp
 80088de:	f000 fb41 	bl	8008f64 <_Bfree>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	4699      	mov	r9, r3
 80088e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e8:	1b1a      	subs	r2, r3, r4
 80088ea:	d004      	beq.n	80088f6 <_dtoa_r+0x79e>
 80088ec:	4649      	mov	r1, r9
 80088ee:	4658      	mov	r0, fp
 80088f0:	f000 fcf4 	bl	80092dc <__pow5mult>
 80088f4:	4681      	mov	r9, r0
 80088f6:	2101      	movs	r1, #1
 80088f8:	4658      	mov	r0, fp
 80088fa:	f000 fc31 	bl	8009160 <__i2b>
 80088fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008900:	4604      	mov	r4, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 81c9 	beq.w	8008c9a <_dtoa_r+0xb42>
 8008908:	461a      	mov	r2, r3
 800890a:	4601      	mov	r1, r0
 800890c:	4658      	mov	r0, fp
 800890e:	f000 fce5 	bl	80092dc <__pow5mult>
 8008912:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008914:	4604      	mov	r4, r0
 8008916:	2b01      	cmp	r3, #1
 8008918:	f300 808f 	bgt.w	8008a3a <_dtoa_r+0x8e2>
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 8087 	bne.w	8008a32 <_dtoa_r+0x8da>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 8083 	bne.w	8008a36 <_dtoa_r+0x8de>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008936:	0d1b      	lsrs	r3, r3, #20
 8008938:	051b      	lsls	r3, r3, #20
 800893a:	b12b      	cbz	r3, 8008948 <_dtoa_r+0x7f0>
 800893c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893e:	f108 0801 	add.w	r8, r8, #1
 8008942:	3301      	adds	r3, #1
 8008944:	9309      	str	r3, [sp, #36]	@ 0x24
 8008946:	2301      	movs	r3, #1
 8008948:	930a      	str	r3, [sp, #40]	@ 0x28
 800894a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 81aa 	beq.w	8008ca6 <_dtoa_r+0xb4e>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008958:	6918      	ldr	r0, [r3, #16]
 800895a:	f000 fbb5 	bl	80090c8 <__hi0bits>
 800895e:	f1c0 0020 	rsb	r0, r0, #32
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	4418      	add	r0, r3
 8008966:	f010 001f 	ands.w	r0, r0, #31
 800896a:	d071      	beq.n	8008a50 <_dtoa_r+0x8f8>
 800896c:	f1c0 0320 	rsb	r3, r0, #32
 8008970:	2b04      	cmp	r3, #4
 8008972:	dd65      	ble.n	8008a40 <_dtoa_r+0x8e8>
 8008974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008976:	f1c0 001c 	rsb	r0, r0, #28
 800897a:	4403      	add	r3, r0
 800897c:	4480      	add	r8, r0
 800897e:	4406      	add	r6, r0
 8008980:	9309      	str	r3, [sp, #36]	@ 0x24
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	dd05      	ble.n	8008994 <_dtoa_r+0x83c>
 8008988:	4649      	mov	r1, r9
 800898a:	4642      	mov	r2, r8
 800898c:	4658      	mov	r0, fp
 800898e:	f000 fcff 	bl	8009390 <__lshift>
 8008992:	4681      	mov	r9, r0
 8008994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd05      	ble.n	80089a6 <_dtoa_r+0x84e>
 800899a:	4621      	mov	r1, r4
 800899c:	461a      	mov	r2, r3
 800899e:	4658      	mov	r0, fp
 80089a0:	f000 fcf6 	bl	8009390 <__lshift>
 80089a4:	4604      	mov	r4, r0
 80089a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d053      	beq.n	8008a54 <_dtoa_r+0x8fc>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4648      	mov	r0, r9
 80089b0:	f000 fd5a 	bl	8009468 <__mcmp>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	da4d      	bge.n	8008a54 <_dtoa_r+0x8fc>
 80089b8:	1e7b      	subs	r3, r7, #1
 80089ba:	4649      	mov	r1, r9
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	220a      	movs	r2, #10
 80089c0:	2300      	movs	r3, #0
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 faf0 	bl	8008fa8 <__multadd>
 80089c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ca:	4681      	mov	r9, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 816c 	beq.w	8008caa <_dtoa_r+0xb52>
 80089d2:	2300      	movs	r3, #0
 80089d4:	4629      	mov	r1, r5
 80089d6:	220a      	movs	r2, #10
 80089d8:	4658      	mov	r0, fp
 80089da:	f000 fae5 	bl	8008fa8 <__multadd>
 80089de:	9b08      	ldr	r3, [sp, #32]
 80089e0:	4605      	mov	r5, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc61      	bgt.n	8008aaa <_dtoa_r+0x952>
 80089e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	dc3b      	bgt.n	8008a64 <_dtoa_r+0x90c>
 80089ec:	e05d      	b.n	8008aaa <_dtoa_r+0x952>
 80089ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089f4:	e746      	b.n	8008884 <_dtoa_r+0x72c>
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	1e5c      	subs	r4, r3, #1
 80089fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	bfbf      	itttt	lt
 8008a00:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a02:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008a04:	1ae3      	sublt	r3, r4, r3
 8008a06:	18d2      	addlt	r2, r2, r3
 8008a08:	bfa8      	it	ge
 8008a0a:	1b1c      	subge	r4, r3, r4
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	bfbe      	ittt	lt
 8008a10:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a12:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008a14:	2400      	movlt	r4, #0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfb5      	itete	lt
 8008a1a:	eba8 0603 	sublt.w	r6, r8, r3
 8008a1e:	4646      	movge	r6, r8
 8008a20:	2300      	movlt	r3, #0
 8008a22:	9b07      	ldrge	r3, [sp, #28]
 8008a24:	e730      	b.n	8008888 <_dtoa_r+0x730>
 8008a26:	4646      	mov	r6, r8
 8008a28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a2c:	e735      	b.n	800889a <_dtoa_r+0x742>
 8008a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a30:	e75c      	b.n	80088ec <_dtoa_r+0x794>
 8008a32:	2300      	movs	r3, #0
 8008a34:	e788      	b.n	8008948 <_dtoa_r+0x7f0>
 8008a36:	9b02      	ldr	r3, [sp, #8]
 8008a38:	e786      	b.n	8008948 <_dtoa_r+0x7f0>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a3e:	e788      	b.n	8008952 <_dtoa_r+0x7fa>
 8008a40:	d09f      	beq.n	8008982 <_dtoa_r+0x82a>
 8008a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a44:	331c      	adds	r3, #28
 8008a46:	441a      	add	r2, r3
 8008a48:	4498      	add	r8, r3
 8008a4a:	441e      	add	r6, r3
 8008a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a4e:	e798      	b.n	8008982 <_dtoa_r+0x82a>
 8008a50:	4603      	mov	r3, r0
 8008a52:	e7f6      	b.n	8008a42 <_dtoa_r+0x8ea>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	9704      	str	r7, [sp, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc20      	bgt.n	8008a9e <_dtoa_r+0x946>
 8008a5c:	9308      	str	r3, [sp, #32]
 8008a5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	dd1e      	ble.n	8008aa2 <_dtoa_r+0x94a>
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f47f aebc 	bne.w	80087e4 <_dtoa_r+0x68c>
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	2205      	movs	r2, #5
 8008a70:	4658      	mov	r0, fp
 8008a72:	f000 fa99 	bl	8008fa8 <__multadd>
 8008a76:	4601      	mov	r1, r0
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4648      	mov	r0, r9
 8008a7c:	f000 fcf4 	bl	8009468 <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	f77f aeaf 	ble.w	80087e4 <_dtoa_r+0x68c>
 8008a86:	2331      	movs	r3, #49	@ 0x31
 8008a88:	4656      	mov	r6, sl
 8008a8a:	f806 3b01 	strb.w	r3, [r6], #1
 8008a8e:	9b04      	ldr	r3, [sp, #16]
 8008a90:	3301      	adds	r3, #1
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	e6aa      	b.n	80087ec <_dtoa_r+0x694>
 8008a96:	9c07      	ldr	r4, [sp, #28]
 8008a98:	9704      	str	r7, [sp, #16]
 8008a9a:	4625      	mov	r5, r4
 8008a9c:	e7f3      	b.n	8008a86 <_dtoa_r+0x92e>
 8008a9e:	9b07      	ldr	r3, [sp, #28]
 8008aa0:	9308      	str	r3, [sp, #32]
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8104 	beq.w	8008cb2 <_dtoa_r+0xb5a>
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	dd05      	ble.n	8008aba <_dtoa_r+0x962>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4632      	mov	r2, r6
 8008ab2:	4658      	mov	r0, fp
 8008ab4:	f000 fc6c 	bl	8009390 <__lshift>
 8008ab8:	4605      	mov	r5, r0
 8008aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d05a      	beq.n	8008b76 <_dtoa_r+0xa1e>
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	6869      	ldr	r1, [r5, #4]
 8008ac4:	f000 fa0e 	bl	8008ee4 <_Balloc>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	b928      	cbnz	r0, 8008ad8 <_dtoa_r+0x980>
 8008acc:	4602      	mov	r2, r0
 8008ace:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ad2:	4b83      	ldr	r3, [pc, #524]	@ (8008ce0 <_dtoa_r+0xb88>)
 8008ad4:	f7ff bb54 	b.w	8008180 <_dtoa_r+0x28>
 8008ad8:	692a      	ldr	r2, [r5, #16]
 8008ada:	f105 010c 	add.w	r1, r5, #12
 8008ade:	3202      	adds	r2, #2
 8008ae0:	0092      	lsls	r2, r2, #2
 8008ae2:	300c      	adds	r0, #12
 8008ae4:	f002 f932 	bl	800ad4c <memcpy>
 8008ae8:	2201      	movs	r2, #1
 8008aea:	4631      	mov	r1, r6
 8008aec:	4658      	mov	r0, fp
 8008aee:	f000 fc4f 	bl	8009390 <__lshift>
 8008af2:	462f      	mov	r7, r5
 8008af4:	4605      	mov	r5, r0
 8008af6:	f10a 0301 	add.w	r3, sl, #1
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	9b08      	ldr	r3, [sp, #32]
 8008afe:	4453      	add	r3, sl
 8008b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b0a:	9b07      	ldr	r3, [sp, #28]
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	4648      	mov	r0, r9
 8008b12:	9302      	str	r3, [sp, #8]
 8008b14:	f7ff fa98 	bl	8008048 <quorem>
 8008b18:	4639      	mov	r1, r7
 8008b1a:	9008      	str	r0, [sp, #32]
 8008b1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b20:	4648      	mov	r0, r9
 8008b22:	f000 fca1 	bl	8009468 <__mcmp>
 8008b26:	462a      	mov	r2, r5
 8008b28:	9009      	str	r0, [sp, #36]	@ 0x24
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4658      	mov	r0, fp
 8008b2e:	f000 fcb7 	bl	80094a0 <__mdiff>
 8008b32:	68c2      	ldr	r2, [r0, #12]
 8008b34:	4606      	mov	r6, r0
 8008b36:	bb02      	cbnz	r2, 8008b7a <_dtoa_r+0xa22>
 8008b38:	4601      	mov	r1, r0
 8008b3a:	4648      	mov	r0, r9
 8008b3c:	f000 fc94 	bl	8009468 <__mcmp>
 8008b40:	4602      	mov	r2, r0
 8008b42:	4631      	mov	r1, r6
 8008b44:	4658      	mov	r0, fp
 8008b46:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b48:	f000 fa0c 	bl	8008f64 <_Bfree>
 8008b4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b50:	9e07      	ldr	r6, [sp, #28]
 8008b52:	ea43 0102 	orr.w	r1, r3, r2
 8008b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b58:	4319      	orrs	r1, r3
 8008b5a:	d110      	bne.n	8008b7e <_dtoa_r+0xa26>
 8008b5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b60:	d029      	beq.n	8008bb6 <_dtoa_r+0xa5e>
 8008b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dd02      	ble.n	8008b6e <_dtoa_r+0xa16>
 8008b68:	9b08      	ldr	r3, [sp, #32]
 8008b6a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	f883 8000 	strb.w	r8, [r3]
 8008b74:	e63b      	b.n	80087ee <_dtoa_r+0x696>
 8008b76:	4628      	mov	r0, r5
 8008b78:	e7bb      	b.n	8008af2 <_dtoa_r+0x99a>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	e7e1      	b.n	8008b42 <_dtoa_r+0x9ea>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	db04      	blt.n	8008b8e <_dtoa_r+0xa36>
 8008b84:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008b86:	430b      	orrs	r3, r1
 8008b88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	d120      	bne.n	8008bd0 <_dtoa_r+0xa78>
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	dded      	ble.n	8008b6e <_dtoa_r+0xa16>
 8008b92:	4649      	mov	r1, r9
 8008b94:	2201      	movs	r2, #1
 8008b96:	4658      	mov	r0, fp
 8008b98:	f000 fbfa 	bl	8009390 <__lshift>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4681      	mov	r9, r0
 8008ba0:	f000 fc62 	bl	8009468 <__mcmp>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	dc03      	bgt.n	8008bb0 <_dtoa_r+0xa58>
 8008ba8:	d1e1      	bne.n	8008b6e <_dtoa_r+0xa16>
 8008baa:	f018 0f01 	tst.w	r8, #1
 8008bae:	d0de      	beq.n	8008b6e <_dtoa_r+0xa16>
 8008bb0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bb4:	d1d8      	bne.n	8008b68 <_dtoa_r+0xa10>
 8008bb6:	2339      	movs	r3, #57	@ 0x39
 8008bb8:	9a02      	ldr	r2, [sp, #8]
 8008bba:	7013      	strb	r3, [r2, #0]
 8008bbc:	4633      	mov	r3, r6
 8008bbe:	461e      	mov	r6, r3
 8008bc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	2a39      	cmp	r2, #57	@ 0x39
 8008bc8:	d052      	beq.n	8008c70 <_dtoa_r+0xb18>
 8008bca:	3201      	adds	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	e60e      	b.n	80087ee <_dtoa_r+0x696>
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	dd07      	ble.n	8008be4 <_dtoa_r+0xa8c>
 8008bd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bd8:	d0ed      	beq.n	8008bb6 <_dtoa_r+0xa5e>
 8008bda:	9a02      	ldr	r2, [sp, #8]
 8008bdc:	f108 0301 	add.w	r3, r8, #1
 8008be0:	7013      	strb	r3, [r2, #0]
 8008be2:	e604      	b.n	80087ee <_dtoa_r+0x696>
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	9a07      	ldr	r2, [sp, #28]
 8008be8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d028      	beq.n	8008c44 <_dtoa_r+0xaec>
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	4658      	mov	r0, fp
 8008bfa:	f000 f9d5 	bl	8008fa8 <__multadd>
 8008bfe:	42af      	cmp	r7, r5
 8008c00:	4681      	mov	r9, r0
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	f04f 020a 	mov.w	r2, #10
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	d107      	bne.n	8008c20 <_dtoa_r+0xac8>
 8008c10:	f000 f9ca 	bl	8008fa8 <__multadd>
 8008c14:	4607      	mov	r7, r0
 8008c16:	4605      	mov	r5, r0
 8008c18:	9b07      	ldr	r3, [sp, #28]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	9307      	str	r3, [sp, #28]
 8008c1e:	e774      	b.n	8008b0a <_dtoa_r+0x9b2>
 8008c20:	f000 f9c2 	bl	8008fa8 <__multadd>
 8008c24:	4629      	mov	r1, r5
 8008c26:	4607      	mov	r7, r0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	220a      	movs	r2, #10
 8008c2c:	4658      	mov	r0, fp
 8008c2e:	f000 f9bb 	bl	8008fa8 <__multadd>
 8008c32:	4605      	mov	r5, r0
 8008c34:	e7f0      	b.n	8008c18 <_dtoa_r+0xac0>
 8008c36:	9b08      	ldr	r3, [sp, #32]
 8008c38:	2700      	movs	r7, #0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfcc      	ite	gt
 8008c3e:	461e      	movgt	r6, r3
 8008c40:	2601      	movle	r6, #1
 8008c42:	4456      	add	r6, sl
 8008c44:	4649      	mov	r1, r9
 8008c46:	2201      	movs	r2, #1
 8008c48:	4658      	mov	r0, fp
 8008c4a:	f000 fba1 	bl	8009390 <__lshift>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4681      	mov	r9, r0
 8008c52:	f000 fc09 	bl	8009468 <__mcmp>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	dcb0      	bgt.n	8008bbc <_dtoa_r+0xa64>
 8008c5a:	d102      	bne.n	8008c62 <_dtoa_r+0xb0a>
 8008c5c:	f018 0f01 	tst.w	r8, #1
 8008c60:	d1ac      	bne.n	8008bbc <_dtoa_r+0xa64>
 8008c62:	4633      	mov	r3, r6
 8008c64:	461e      	mov	r6, r3
 8008c66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c6a:	2a30      	cmp	r2, #48	@ 0x30
 8008c6c:	d0fa      	beq.n	8008c64 <_dtoa_r+0xb0c>
 8008c6e:	e5be      	b.n	80087ee <_dtoa_r+0x696>
 8008c70:	459a      	cmp	sl, r3
 8008c72:	d1a4      	bne.n	8008bbe <_dtoa_r+0xa66>
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	3301      	adds	r3, #1
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	2331      	movs	r3, #49	@ 0x31
 8008c7c:	f88a 3000 	strb.w	r3, [sl]
 8008c80:	e5b5      	b.n	80087ee <_dtoa_r+0x696>
 8008c82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c84:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ce4 <_dtoa_r+0xb8c>
 8008c88:	b11b      	cbz	r3, 8008c92 <_dtoa_r+0xb3a>
 8008c8a:	f10a 0308 	add.w	r3, sl, #8
 8008c8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	4650      	mov	r0, sl
 8008c94:	b017      	add	sp, #92	@ 0x5c
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	f77f ae3d 	ble.w	800891c <_dtoa_r+0x7c4>
 8008ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	e65b      	b.n	8008962 <_dtoa_r+0x80a>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f77f aed6 	ble.w	8008a5e <_dtoa_r+0x906>
 8008cb2:	4656      	mov	r6, sl
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4648      	mov	r0, r9
 8008cb8:	f7ff f9c6 	bl	8008048 <quorem>
 8008cbc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cc0:	9b08      	ldr	r3, [sp, #32]
 8008cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8008cc6:	eba6 020a 	sub.w	r2, r6, sl
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	ddb3      	ble.n	8008c36 <_dtoa_r+0xade>
 8008cce:	4649      	mov	r1, r9
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	220a      	movs	r2, #10
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f000 f967 	bl	8008fa8 <__multadd>
 8008cda:	4681      	mov	r9, r0
 8008cdc:	e7ea      	b.n	8008cb4 <_dtoa_r+0xb5c>
 8008cde:	bf00      	nop
 8008ce0:	0800b847 	.word	0x0800b847
 8008ce4:	0800b7cb 	.word	0x0800b7cb

08008ce8 <_free_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4605      	mov	r5, r0
 8008cec:	2900      	cmp	r1, #0
 8008cee:	d040      	beq.n	8008d72 <_free_r+0x8a>
 8008cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf4:	1f0c      	subs	r4, r1, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfb8      	it	lt
 8008cfa:	18e4      	addlt	r4, r4, r3
 8008cfc:	f000 f8e6 	bl	8008ecc <__malloc_lock>
 8008d00:	4a1c      	ldr	r2, [pc, #112]	@ (8008d74 <_free_r+0x8c>)
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	b933      	cbnz	r3, 8008d14 <_free_r+0x2c>
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	6014      	str	r4, [r2, #0]
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d10:	f000 b8e2 	b.w	8008ed8 <__malloc_unlock>
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d908      	bls.n	8008d2a <_free_r+0x42>
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	1821      	adds	r1, r4, r0
 8008d1c:	428b      	cmp	r3, r1
 8008d1e:	bf01      	itttt	eq
 8008d20:	6819      	ldreq	r1, [r3, #0]
 8008d22:	685b      	ldreq	r3, [r3, #4]
 8008d24:	1809      	addeq	r1, r1, r0
 8008d26:	6021      	streq	r1, [r4, #0]
 8008d28:	e7ed      	b.n	8008d06 <_free_r+0x1e>
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	b10b      	cbz	r3, 8008d34 <_free_r+0x4c>
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d9fa      	bls.n	8008d2a <_free_r+0x42>
 8008d34:	6811      	ldr	r1, [r2, #0]
 8008d36:	1850      	adds	r0, r2, r1
 8008d38:	42a0      	cmp	r0, r4
 8008d3a:	d10b      	bne.n	8008d54 <_free_r+0x6c>
 8008d3c:	6820      	ldr	r0, [r4, #0]
 8008d3e:	4401      	add	r1, r0
 8008d40:	1850      	adds	r0, r2, r1
 8008d42:	4283      	cmp	r3, r0
 8008d44:	6011      	str	r1, [r2, #0]
 8008d46:	d1e0      	bne.n	8008d0a <_free_r+0x22>
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	4408      	add	r0, r1
 8008d4e:	6010      	str	r0, [r2, #0]
 8008d50:	6053      	str	r3, [r2, #4]
 8008d52:	e7da      	b.n	8008d0a <_free_r+0x22>
 8008d54:	d902      	bls.n	8008d5c <_free_r+0x74>
 8008d56:	230c      	movs	r3, #12
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	e7d6      	b.n	8008d0a <_free_r+0x22>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	1821      	adds	r1, r4, r0
 8008d60:	428b      	cmp	r3, r1
 8008d62:	bf01      	itttt	eq
 8008d64:	6819      	ldreq	r1, [r3, #0]
 8008d66:	685b      	ldreq	r3, [r3, #4]
 8008d68:	1809      	addeq	r1, r1, r0
 8008d6a:	6021      	streq	r1, [r4, #0]
 8008d6c:	6063      	str	r3, [r4, #4]
 8008d6e:	6054      	str	r4, [r2, #4]
 8008d70:	e7cb      	b.n	8008d0a <_free_r+0x22>
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	20000474 	.word	0x20000474

08008d78 <malloc>:
 8008d78:	4b02      	ldr	r3, [pc, #8]	@ (8008d84 <malloc+0xc>)
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	6818      	ldr	r0, [r3, #0]
 8008d7e:	f000 b825 	b.w	8008dcc <_malloc_r>
 8008d82:	bf00      	nop
 8008d84:	20000018 	.word	0x20000018

08008d88 <sbrk_aligned>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008dc8 <sbrk_aligned+0x40>)
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	6831      	ldr	r1, [r6, #0]
 8008d90:	4605      	mov	r5, r0
 8008d92:	b911      	cbnz	r1, 8008d9a <sbrk_aligned+0x12>
 8008d94:	f001 ffca 	bl	800ad2c <_sbrk_r>
 8008d98:	6030      	str	r0, [r6, #0]
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f001 ffc5 	bl	800ad2c <_sbrk_r>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d103      	bne.n	8008dae <sbrk_aligned+0x26>
 8008da6:	f04f 34ff 	mov.w	r4, #4294967295
 8008daa:	4620      	mov	r0, r4
 8008dac:	bd70      	pop	{r4, r5, r6, pc}
 8008dae:	1cc4      	adds	r4, r0, #3
 8008db0:	f024 0403 	bic.w	r4, r4, #3
 8008db4:	42a0      	cmp	r0, r4
 8008db6:	d0f8      	beq.n	8008daa <sbrk_aligned+0x22>
 8008db8:	1a21      	subs	r1, r4, r0
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f001 ffb6 	bl	800ad2c <_sbrk_r>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d1f2      	bne.n	8008daa <sbrk_aligned+0x22>
 8008dc4:	e7ef      	b.n	8008da6 <sbrk_aligned+0x1e>
 8008dc6:	bf00      	nop
 8008dc8:	20000470 	.word	0x20000470

08008dcc <_malloc_r>:
 8008dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dd0:	1ccd      	adds	r5, r1, #3
 8008dd2:	f025 0503 	bic.w	r5, r5, #3
 8008dd6:	3508      	adds	r5, #8
 8008dd8:	2d0c      	cmp	r5, #12
 8008dda:	bf38      	it	cc
 8008ddc:	250c      	movcc	r5, #12
 8008dde:	2d00      	cmp	r5, #0
 8008de0:	4606      	mov	r6, r0
 8008de2:	db01      	blt.n	8008de8 <_malloc_r+0x1c>
 8008de4:	42a9      	cmp	r1, r5
 8008de6:	d904      	bls.n	8008df2 <_malloc_r+0x26>
 8008de8:	230c      	movs	r3, #12
 8008dea:	6033      	str	r3, [r6, #0]
 8008dec:	2000      	movs	r0, #0
 8008dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ec8 <_malloc_r+0xfc>
 8008df6:	f000 f869 	bl	8008ecc <__malloc_lock>
 8008dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008dfe:	461c      	mov	r4, r3
 8008e00:	bb44      	cbnz	r4, 8008e54 <_malloc_r+0x88>
 8008e02:	4629      	mov	r1, r5
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff ffbf 	bl	8008d88 <sbrk_aligned>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	d158      	bne.n	8008ec2 <_malloc_r+0xf6>
 8008e10:	f8d8 4000 	ldr.w	r4, [r8]
 8008e14:	4627      	mov	r7, r4
 8008e16:	2f00      	cmp	r7, #0
 8008e18:	d143      	bne.n	8008ea2 <_malloc_r+0xd6>
 8008e1a:	2c00      	cmp	r4, #0
 8008e1c:	d04b      	beq.n	8008eb6 <_malloc_r+0xea>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	4639      	mov	r1, r7
 8008e22:	4630      	mov	r0, r6
 8008e24:	eb04 0903 	add.w	r9, r4, r3
 8008e28:	f001 ff80 	bl	800ad2c <_sbrk_r>
 8008e2c:	4581      	cmp	r9, r0
 8008e2e:	d142      	bne.n	8008eb6 <_malloc_r+0xea>
 8008e30:	6821      	ldr	r1, [r4, #0]
 8008e32:	4630      	mov	r0, r6
 8008e34:	1a6d      	subs	r5, r5, r1
 8008e36:	4629      	mov	r1, r5
 8008e38:	f7ff ffa6 	bl	8008d88 <sbrk_aligned>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d03a      	beq.n	8008eb6 <_malloc_r+0xea>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	442b      	add	r3, r5
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	f8d8 3000 	ldr.w	r3, [r8]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	bb62      	cbnz	r2, 8008ea8 <_malloc_r+0xdc>
 8008e4e:	f8c8 7000 	str.w	r7, [r8]
 8008e52:	e00f      	b.n	8008e74 <_malloc_r+0xa8>
 8008e54:	6822      	ldr	r2, [r4, #0]
 8008e56:	1b52      	subs	r2, r2, r5
 8008e58:	d420      	bmi.n	8008e9c <_malloc_r+0xd0>
 8008e5a:	2a0b      	cmp	r2, #11
 8008e5c:	d917      	bls.n	8008e8e <_malloc_r+0xc2>
 8008e5e:	1961      	adds	r1, r4, r5
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	6025      	str	r5, [r4, #0]
 8008e64:	bf18      	it	ne
 8008e66:	6059      	strne	r1, [r3, #4]
 8008e68:	6863      	ldr	r3, [r4, #4]
 8008e6a:	bf08      	it	eq
 8008e6c:	f8c8 1000 	streq.w	r1, [r8]
 8008e70:	5162      	str	r2, [r4, r5]
 8008e72:	604b      	str	r3, [r1, #4]
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f82f 	bl	8008ed8 <__malloc_unlock>
 8008e7a:	f104 000b 	add.w	r0, r4, #11
 8008e7e:	1d23      	adds	r3, r4, #4
 8008e80:	f020 0007 	bic.w	r0, r0, #7
 8008e84:	1ac2      	subs	r2, r0, r3
 8008e86:	bf1c      	itt	ne
 8008e88:	1a1b      	subne	r3, r3, r0
 8008e8a:	50a3      	strne	r3, [r4, r2]
 8008e8c:	e7af      	b.n	8008dee <_malloc_r+0x22>
 8008e8e:	6862      	ldr	r2, [r4, #4]
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	bf0c      	ite	eq
 8008e94:	f8c8 2000 	streq.w	r2, [r8]
 8008e98:	605a      	strne	r2, [r3, #4]
 8008e9a:	e7eb      	b.n	8008e74 <_malloc_r+0xa8>
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	6864      	ldr	r4, [r4, #4]
 8008ea0:	e7ae      	b.n	8008e00 <_malloc_r+0x34>
 8008ea2:	463c      	mov	r4, r7
 8008ea4:	687f      	ldr	r7, [r7, #4]
 8008ea6:	e7b6      	b.n	8008e16 <_malloc_r+0x4a>
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	d1fb      	bne.n	8008ea8 <_malloc_r+0xdc>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6053      	str	r3, [r2, #4]
 8008eb4:	e7de      	b.n	8008e74 <_malloc_r+0xa8>
 8008eb6:	230c      	movs	r3, #12
 8008eb8:	4630      	mov	r0, r6
 8008eba:	6033      	str	r3, [r6, #0]
 8008ebc:	f000 f80c 	bl	8008ed8 <__malloc_unlock>
 8008ec0:	e794      	b.n	8008dec <_malloc_r+0x20>
 8008ec2:	6005      	str	r5, [r0, #0]
 8008ec4:	e7d6      	b.n	8008e74 <_malloc_r+0xa8>
 8008ec6:	bf00      	nop
 8008ec8:	20000474 	.word	0x20000474

08008ecc <__malloc_lock>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	@ (8008ed4 <__malloc_lock+0x8>)
 8008ece:	f7ff b8a6 	b.w	800801e <__retarget_lock_acquire_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	2000046c 	.word	0x2000046c

08008ed8 <__malloc_unlock>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	@ (8008ee0 <__malloc_unlock+0x8>)
 8008eda:	f7ff b8a1 	b.w	8008020 <__retarget_lock_release_recursive>
 8008ede:	bf00      	nop
 8008ee0:	2000046c 	.word	0x2000046c

08008ee4 <_Balloc>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	69c6      	ldr	r6, [r0, #28]
 8008ee8:	4604      	mov	r4, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	b976      	cbnz	r6, 8008f0c <_Balloc+0x28>
 8008eee:	2010      	movs	r0, #16
 8008ef0:	f7ff ff42 	bl	8008d78 <malloc>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	61e0      	str	r0, [r4, #28]
 8008ef8:	b920      	cbnz	r0, 8008f04 <_Balloc+0x20>
 8008efa:	216b      	movs	r1, #107	@ 0x6b
 8008efc:	4b17      	ldr	r3, [pc, #92]	@ (8008f5c <_Balloc+0x78>)
 8008efe:	4818      	ldr	r0, [pc, #96]	@ (8008f60 <_Balloc+0x7c>)
 8008f00:	f001 ff38 	bl	800ad74 <__assert_func>
 8008f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f08:	6006      	str	r6, [r0, #0]
 8008f0a:	60c6      	str	r6, [r0, #12]
 8008f0c:	69e6      	ldr	r6, [r4, #28]
 8008f0e:	68f3      	ldr	r3, [r6, #12]
 8008f10:	b183      	cbz	r3, 8008f34 <_Balloc+0x50>
 8008f12:	69e3      	ldr	r3, [r4, #28]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f1a:	b9b8      	cbnz	r0, 8008f4c <_Balloc+0x68>
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f22:	1d72      	adds	r2, r6, #5
 8008f24:	4620      	mov	r0, r4
 8008f26:	0092      	lsls	r2, r2, #2
 8008f28:	f001 ff42 	bl	800adb0 <_calloc_r>
 8008f2c:	b160      	cbz	r0, 8008f48 <_Balloc+0x64>
 8008f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f32:	e00e      	b.n	8008f52 <_Balloc+0x6e>
 8008f34:	2221      	movs	r2, #33	@ 0x21
 8008f36:	2104      	movs	r1, #4
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f001 ff39 	bl	800adb0 <_calloc_r>
 8008f3e:	69e3      	ldr	r3, [r4, #28]
 8008f40:	60f0      	str	r0, [r6, #12]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e4      	bne.n	8008f12 <_Balloc+0x2e>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	6802      	ldr	r2, [r0, #0]
 8008f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f52:	2300      	movs	r3, #0
 8008f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f58:	e7f7      	b.n	8008f4a <_Balloc+0x66>
 8008f5a:	bf00      	nop
 8008f5c:	0800b7d8 	.word	0x0800b7d8
 8008f60:	0800b858 	.word	0x0800b858

08008f64 <_Bfree>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	69c6      	ldr	r6, [r0, #28]
 8008f68:	4605      	mov	r5, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	b976      	cbnz	r6, 8008f8c <_Bfree+0x28>
 8008f6e:	2010      	movs	r0, #16
 8008f70:	f7ff ff02 	bl	8008d78 <malloc>
 8008f74:	4602      	mov	r2, r0
 8008f76:	61e8      	str	r0, [r5, #28]
 8008f78:	b920      	cbnz	r0, 8008f84 <_Bfree+0x20>
 8008f7a:	218f      	movs	r1, #143	@ 0x8f
 8008f7c:	4b08      	ldr	r3, [pc, #32]	@ (8008fa0 <_Bfree+0x3c>)
 8008f7e:	4809      	ldr	r0, [pc, #36]	@ (8008fa4 <_Bfree+0x40>)
 8008f80:	f001 fef8 	bl	800ad74 <__assert_func>
 8008f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f88:	6006      	str	r6, [r0, #0]
 8008f8a:	60c6      	str	r6, [r0, #12]
 8008f8c:	b13c      	cbz	r4, 8008f9e <_Bfree+0x3a>
 8008f8e:	69eb      	ldr	r3, [r5, #28]
 8008f90:	6862      	ldr	r2, [r4, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f98:	6021      	str	r1, [r4, #0]
 8008f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	0800b7d8 	.word	0x0800b7d8
 8008fa4:	0800b858 	.word	0x0800b858

08008fa8 <__multadd>:
 8008fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fac:	4607      	mov	r7, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	461e      	mov	r6, r3
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	690d      	ldr	r5, [r1, #16]
 8008fb6:	f101 0c14 	add.w	ip, r1, #20
 8008fba:	f8dc 3000 	ldr.w	r3, [ip]
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	b299      	uxth	r1, r3
 8008fc2:	fb02 6101 	mla	r1, r2, r1, r6
 8008fc6:	0c1e      	lsrs	r6, r3, #16
 8008fc8:	0c0b      	lsrs	r3, r1, #16
 8008fca:	fb02 3306 	mla	r3, r2, r6, r3
 8008fce:	b289      	uxth	r1, r1
 8008fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fd4:	4285      	cmp	r5, r0
 8008fd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fda:	f84c 1b04 	str.w	r1, [ip], #4
 8008fde:	dcec      	bgt.n	8008fba <__multadd+0x12>
 8008fe0:	b30e      	cbz	r6, 8009026 <__multadd+0x7e>
 8008fe2:	68a3      	ldr	r3, [r4, #8]
 8008fe4:	42ab      	cmp	r3, r5
 8008fe6:	dc19      	bgt.n	800901c <__multadd+0x74>
 8008fe8:	6861      	ldr	r1, [r4, #4]
 8008fea:	4638      	mov	r0, r7
 8008fec:	3101      	adds	r1, #1
 8008fee:	f7ff ff79 	bl	8008ee4 <_Balloc>
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	b928      	cbnz	r0, 8009002 <__multadd+0x5a>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	21ba      	movs	r1, #186	@ 0xba
 8008ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800902c <__multadd+0x84>)
 8008ffc:	480c      	ldr	r0, [pc, #48]	@ (8009030 <__multadd+0x88>)
 8008ffe:	f001 feb9 	bl	800ad74 <__assert_func>
 8009002:	6922      	ldr	r2, [r4, #16]
 8009004:	f104 010c 	add.w	r1, r4, #12
 8009008:	3202      	adds	r2, #2
 800900a:	0092      	lsls	r2, r2, #2
 800900c:	300c      	adds	r0, #12
 800900e:	f001 fe9d 	bl	800ad4c <memcpy>
 8009012:	4621      	mov	r1, r4
 8009014:	4638      	mov	r0, r7
 8009016:	f7ff ffa5 	bl	8008f64 <_Bfree>
 800901a:	4644      	mov	r4, r8
 800901c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009020:	3501      	adds	r5, #1
 8009022:	615e      	str	r6, [r3, #20]
 8009024:	6125      	str	r5, [r4, #16]
 8009026:	4620      	mov	r0, r4
 8009028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902c:	0800b847 	.word	0x0800b847
 8009030:	0800b858 	.word	0x0800b858

08009034 <__s2b>:
 8009034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009038:	4615      	mov	r5, r2
 800903a:	2209      	movs	r2, #9
 800903c:	461f      	mov	r7, r3
 800903e:	3308      	adds	r3, #8
 8009040:	460c      	mov	r4, r1
 8009042:	fb93 f3f2 	sdiv	r3, r3, r2
 8009046:	4606      	mov	r6, r0
 8009048:	2201      	movs	r2, #1
 800904a:	2100      	movs	r1, #0
 800904c:	429a      	cmp	r2, r3
 800904e:	db09      	blt.n	8009064 <__s2b+0x30>
 8009050:	4630      	mov	r0, r6
 8009052:	f7ff ff47 	bl	8008ee4 <_Balloc>
 8009056:	b940      	cbnz	r0, 800906a <__s2b+0x36>
 8009058:	4602      	mov	r2, r0
 800905a:	21d3      	movs	r1, #211	@ 0xd3
 800905c:	4b18      	ldr	r3, [pc, #96]	@ (80090c0 <__s2b+0x8c>)
 800905e:	4819      	ldr	r0, [pc, #100]	@ (80090c4 <__s2b+0x90>)
 8009060:	f001 fe88 	bl	800ad74 <__assert_func>
 8009064:	0052      	lsls	r2, r2, #1
 8009066:	3101      	adds	r1, #1
 8009068:	e7f0      	b.n	800904c <__s2b+0x18>
 800906a:	9b08      	ldr	r3, [sp, #32]
 800906c:	2d09      	cmp	r5, #9
 800906e:	6143      	str	r3, [r0, #20]
 8009070:	f04f 0301 	mov.w	r3, #1
 8009074:	6103      	str	r3, [r0, #16]
 8009076:	dd16      	ble.n	80090a6 <__s2b+0x72>
 8009078:	f104 0909 	add.w	r9, r4, #9
 800907c:	46c8      	mov	r8, r9
 800907e:	442c      	add	r4, r5
 8009080:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009084:	4601      	mov	r1, r0
 8009086:	220a      	movs	r2, #10
 8009088:	4630      	mov	r0, r6
 800908a:	3b30      	subs	r3, #48	@ 0x30
 800908c:	f7ff ff8c 	bl	8008fa8 <__multadd>
 8009090:	45a0      	cmp	r8, r4
 8009092:	d1f5      	bne.n	8009080 <__s2b+0x4c>
 8009094:	f1a5 0408 	sub.w	r4, r5, #8
 8009098:	444c      	add	r4, r9
 800909a:	1b2d      	subs	r5, r5, r4
 800909c:	1963      	adds	r3, r4, r5
 800909e:	42bb      	cmp	r3, r7
 80090a0:	db04      	blt.n	80090ac <__s2b+0x78>
 80090a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a6:	2509      	movs	r5, #9
 80090a8:	340a      	adds	r4, #10
 80090aa:	e7f6      	b.n	800909a <__s2b+0x66>
 80090ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090b0:	4601      	mov	r1, r0
 80090b2:	220a      	movs	r2, #10
 80090b4:	4630      	mov	r0, r6
 80090b6:	3b30      	subs	r3, #48	@ 0x30
 80090b8:	f7ff ff76 	bl	8008fa8 <__multadd>
 80090bc:	e7ee      	b.n	800909c <__s2b+0x68>
 80090be:	bf00      	nop
 80090c0:	0800b847 	.word	0x0800b847
 80090c4:	0800b858 	.word	0x0800b858

080090c8 <__hi0bits>:
 80090c8:	4603      	mov	r3, r0
 80090ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090ce:	bf3a      	itte	cc
 80090d0:	0403      	lslcc	r3, r0, #16
 80090d2:	2010      	movcc	r0, #16
 80090d4:	2000      	movcs	r0, #0
 80090d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090da:	bf3c      	itt	cc
 80090dc:	021b      	lslcc	r3, r3, #8
 80090de:	3008      	addcc	r0, #8
 80090e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090e4:	bf3c      	itt	cc
 80090e6:	011b      	lslcc	r3, r3, #4
 80090e8:	3004      	addcc	r0, #4
 80090ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ee:	bf3c      	itt	cc
 80090f0:	009b      	lslcc	r3, r3, #2
 80090f2:	3002      	addcc	r0, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	db05      	blt.n	8009104 <__hi0bits+0x3c>
 80090f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090fc:	f100 0001 	add.w	r0, r0, #1
 8009100:	bf08      	it	eq
 8009102:	2020      	moveq	r0, #32
 8009104:	4770      	bx	lr

08009106 <__lo0bits>:
 8009106:	6803      	ldr	r3, [r0, #0]
 8009108:	4602      	mov	r2, r0
 800910a:	f013 0007 	ands.w	r0, r3, #7
 800910e:	d00b      	beq.n	8009128 <__lo0bits+0x22>
 8009110:	07d9      	lsls	r1, r3, #31
 8009112:	d421      	bmi.n	8009158 <__lo0bits+0x52>
 8009114:	0798      	lsls	r0, r3, #30
 8009116:	bf49      	itett	mi
 8009118:	085b      	lsrmi	r3, r3, #1
 800911a:	089b      	lsrpl	r3, r3, #2
 800911c:	2001      	movmi	r0, #1
 800911e:	6013      	strmi	r3, [r2, #0]
 8009120:	bf5c      	itt	pl
 8009122:	2002      	movpl	r0, #2
 8009124:	6013      	strpl	r3, [r2, #0]
 8009126:	4770      	bx	lr
 8009128:	b299      	uxth	r1, r3
 800912a:	b909      	cbnz	r1, 8009130 <__lo0bits+0x2a>
 800912c:	2010      	movs	r0, #16
 800912e:	0c1b      	lsrs	r3, r3, #16
 8009130:	b2d9      	uxtb	r1, r3
 8009132:	b909      	cbnz	r1, 8009138 <__lo0bits+0x32>
 8009134:	3008      	adds	r0, #8
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	0719      	lsls	r1, r3, #28
 800913a:	bf04      	itt	eq
 800913c:	091b      	lsreq	r3, r3, #4
 800913e:	3004      	addeq	r0, #4
 8009140:	0799      	lsls	r1, r3, #30
 8009142:	bf04      	itt	eq
 8009144:	089b      	lsreq	r3, r3, #2
 8009146:	3002      	addeq	r0, #2
 8009148:	07d9      	lsls	r1, r3, #31
 800914a:	d403      	bmi.n	8009154 <__lo0bits+0x4e>
 800914c:	085b      	lsrs	r3, r3, #1
 800914e:	f100 0001 	add.w	r0, r0, #1
 8009152:	d003      	beq.n	800915c <__lo0bits+0x56>
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	4770      	bx	lr
 8009158:	2000      	movs	r0, #0
 800915a:	4770      	bx	lr
 800915c:	2020      	movs	r0, #32
 800915e:	4770      	bx	lr

08009160 <__i2b>:
 8009160:	b510      	push	{r4, lr}
 8009162:	460c      	mov	r4, r1
 8009164:	2101      	movs	r1, #1
 8009166:	f7ff febd 	bl	8008ee4 <_Balloc>
 800916a:	4602      	mov	r2, r0
 800916c:	b928      	cbnz	r0, 800917a <__i2b+0x1a>
 800916e:	f240 1145 	movw	r1, #325	@ 0x145
 8009172:	4b04      	ldr	r3, [pc, #16]	@ (8009184 <__i2b+0x24>)
 8009174:	4804      	ldr	r0, [pc, #16]	@ (8009188 <__i2b+0x28>)
 8009176:	f001 fdfd 	bl	800ad74 <__assert_func>
 800917a:	2301      	movs	r3, #1
 800917c:	6144      	str	r4, [r0, #20]
 800917e:	6103      	str	r3, [r0, #16]
 8009180:	bd10      	pop	{r4, pc}
 8009182:	bf00      	nop
 8009184:	0800b847 	.word	0x0800b847
 8009188:	0800b858 	.word	0x0800b858

0800918c <__multiply>:
 800918c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009190:	4614      	mov	r4, r2
 8009192:	690a      	ldr	r2, [r1, #16]
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	460f      	mov	r7, r1
 8009198:	429a      	cmp	r2, r3
 800919a:	bfa2      	ittt	ge
 800919c:	4623      	movge	r3, r4
 800919e:	460c      	movge	r4, r1
 80091a0:	461f      	movge	r7, r3
 80091a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	6861      	ldr	r1, [r4, #4]
 80091ae:	eb0a 0609 	add.w	r6, sl, r9
 80091b2:	42b3      	cmp	r3, r6
 80091b4:	b085      	sub	sp, #20
 80091b6:	bfb8      	it	lt
 80091b8:	3101      	addlt	r1, #1
 80091ba:	f7ff fe93 	bl	8008ee4 <_Balloc>
 80091be:	b930      	cbnz	r0, 80091ce <__multiply+0x42>
 80091c0:	4602      	mov	r2, r0
 80091c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091c6:	4b43      	ldr	r3, [pc, #268]	@ (80092d4 <__multiply+0x148>)
 80091c8:	4843      	ldr	r0, [pc, #268]	@ (80092d8 <__multiply+0x14c>)
 80091ca:	f001 fdd3 	bl	800ad74 <__assert_func>
 80091ce:	f100 0514 	add.w	r5, r0, #20
 80091d2:	462b      	mov	r3, r5
 80091d4:	2200      	movs	r2, #0
 80091d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091da:	4543      	cmp	r3, r8
 80091dc:	d321      	bcc.n	8009222 <__multiply+0x96>
 80091de:	f107 0114 	add.w	r1, r7, #20
 80091e2:	f104 0214 	add.w	r2, r4, #20
 80091e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091ee:	9302      	str	r3, [sp, #8]
 80091f0:	1b13      	subs	r3, r2, r4
 80091f2:	3b15      	subs	r3, #21
 80091f4:	f023 0303 	bic.w	r3, r3, #3
 80091f8:	3304      	adds	r3, #4
 80091fa:	f104 0715 	add.w	r7, r4, #21
 80091fe:	42ba      	cmp	r2, r7
 8009200:	bf38      	it	cc
 8009202:	2304      	movcc	r3, #4
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	9b02      	ldr	r3, [sp, #8]
 8009208:	9103      	str	r1, [sp, #12]
 800920a:	428b      	cmp	r3, r1
 800920c:	d80c      	bhi.n	8009228 <__multiply+0x9c>
 800920e:	2e00      	cmp	r6, #0
 8009210:	dd03      	ble.n	800921a <__multiply+0x8e>
 8009212:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009216:	2b00      	cmp	r3, #0
 8009218:	d05a      	beq.n	80092d0 <__multiply+0x144>
 800921a:	6106      	str	r6, [r0, #16]
 800921c:	b005      	add	sp, #20
 800921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009222:	f843 2b04 	str.w	r2, [r3], #4
 8009226:	e7d8      	b.n	80091da <__multiply+0x4e>
 8009228:	f8b1 a000 	ldrh.w	sl, [r1]
 800922c:	f1ba 0f00 	cmp.w	sl, #0
 8009230:	d023      	beq.n	800927a <__multiply+0xee>
 8009232:	46a9      	mov	r9, r5
 8009234:	f04f 0c00 	mov.w	ip, #0
 8009238:	f104 0e14 	add.w	lr, r4, #20
 800923c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009240:	f8d9 3000 	ldr.w	r3, [r9]
 8009244:	fa1f fb87 	uxth.w	fp, r7
 8009248:	b29b      	uxth	r3, r3
 800924a:	fb0a 330b 	mla	r3, sl, fp, r3
 800924e:	4463      	add	r3, ip
 8009250:	f8d9 c000 	ldr.w	ip, [r9]
 8009254:	0c3f      	lsrs	r7, r7, #16
 8009256:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800925a:	fb0a c707 	mla	r7, sl, r7, ip
 800925e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009262:	b29b      	uxth	r3, r3
 8009264:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009268:	4572      	cmp	r2, lr
 800926a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800926e:	f849 3b04 	str.w	r3, [r9], #4
 8009272:	d8e3      	bhi.n	800923c <__multiply+0xb0>
 8009274:	9b01      	ldr	r3, [sp, #4]
 8009276:	f845 c003 	str.w	ip, [r5, r3]
 800927a:	9b03      	ldr	r3, [sp, #12]
 800927c:	3104      	adds	r1, #4
 800927e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009282:	f1b9 0f00 	cmp.w	r9, #0
 8009286:	d021      	beq.n	80092cc <__multiply+0x140>
 8009288:	46ae      	mov	lr, r5
 800928a:	f04f 0a00 	mov.w	sl, #0
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	f104 0c14 	add.w	ip, r4, #20
 8009294:	f8bc b000 	ldrh.w	fp, [ip]
 8009298:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800929c:	b29b      	uxth	r3, r3
 800929e:	fb09 770b 	mla	r7, r9, fp, r7
 80092a2:	4457      	add	r7, sl
 80092a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092a8:	f84e 3b04 	str.w	r3, [lr], #4
 80092ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092b4:	f8be 3000 	ldrh.w	r3, [lr]
 80092b8:	4562      	cmp	r2, ip
 80092ba:	fb09 330a 	mla	r3, r9, sl, r3
 80092be:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092c6:	d8e5      	bhi.n	8009294 <__multiply+0x108>
 80092c8:	9f01      	ldr	r7, [sp, #4]
 80092ca:	51eb      	str	r3, [r5, r7]
 80092cc:	3504      	adds	r5, #4
 80092ce:	e79a      	b.n	8009206 <__multiply+0x7a>
 80092d0:	3e01      	subs	r6, #1
 80092d2:	e79c      	b.n	800920e <__multiply+0x82>
 80092d4:	0800b847 	.word	0x0800b847
 80092d8:	0800b858 	.word	0x0800b858

080092dc <__pow5mult>:
 80092dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e0:	4615      	mov	r5, r2
 80092e2:	f012 0203 	ands.w	r2, r2, #3
 80092e6:	4607      	mov	r7, r0
 80092e8:	460e      	mov	r6, r1
 80092ea:	d007      	beq.n	80092fc <__pow5mult+0x20>
 80092ec:	4c25      	ldr	r4, [pc, #148]	@ (8009384 <__pow5mult+0xa8>)
 80092ee:	3a01      	subs	r2, #1
 80092f0:	2300      	movs	r3, #0
 80092f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092f6:	f7ff fe57 	bl	8008fa8 <__multadd>
 80092fa:	4606      	mov	r6, r0
 80092fc:	10ad      	asrs	r5, r5, #2
 80092fe:	d03d      	beq.n	800937c <__pow5mult+0xa0>
 8009300:	69fc      	ldr	r4, [r7, #28]
 8009302:	b97c      	cbnz	r4, 8009324 <__pow5mult+0x48>
 8009304:	2010      	movs	r0, #16
 8009306:	f7ff fd37 	bl	8008d78 <malloc>
 800930a:	4602      	mov	r2, r0
 800930c:	61f8      	str	r0, [r7, #28]
 800930e:	b928      	cbnz	r0, 800931c <__pow5mult+0x40>
 8009310:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009314:	4b1c      	ldr	r3, [pc, #112]	@ (8009388 <__pow5mult+0xac>)
 8009316:	481d      	ldr	r0, [pc, #116]	@ (800938c <__pow5mult+0xb0>)
 8009318:	f001 fd2c 	bl	800ad74 <__assert_func>
 800931c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009320:	6004      	str	r4, [r0, #0]
 8009322:	60c4      	str	r4, [r0, #12]
 8009324:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800932c:	b94c      	cbnz	r4, 8009342 <__pow5mult+0x66>
 800932e:	f240 2171 	movw	r1, #625	@ 0x271
 8009332:	4638      	mov	r0, r7
 8009334:	f7ff ff14 	bl	8009160 <__i2b>
 8009338:	2300      	movs	r3, #0
 800933a:	4604      	mov	r4, r0
 800933c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	f04f 0900 	mov.w	r9, #0
 8009346:	07eb      	lsls	r3, r5, #31
 8009348:	d50a      	bpl.n	8009360 <__pow5mult+0x84>
 800934a:	4631      	mov	r1, r6
 800934c:	4622      	mov	r2, r4
 800934e:	4638      	mov	r0, r7
 8009350:	f7ff ff1c 	bl	800918c <__multiply>
 8009354:	4680      	mov	r8, r0
 8009356:	4631      	mov	r1, r6
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff fe03 	bl	8008f64 <_Bfree>
 800935e:	4646      	mov	r6, r8
 8009360:	106d      	asrs	r5, r5, #1
 8009362:	d00b      	beq.n	800937c <__pow5mult+0xa0>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	b938      	cbnz	r0, 8009378 <__pow5mult+0x9c>
 8009368:	4622      	mov	r2, r4
 800936a:	4621      	mov	r1, r4
 800936c:	4638      	mov	r0, r7
 800936e:	f7ff ff0d 	bl	800918c <__multiply>
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	f8c0 9000 	str.w	r9, [r0]
 8009378:	4604      	mov	r4, r0
 800937a:	e7e4      	b.n	8009346 <__pow5mult+0x6a>
 800937c:	4630      	mov	r0, r6
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	bf00      	nop
 8009384:	0800b8b4 	.word	0x0800b8b4
 8009388:	0800b7d8 	.word	0x0800b7d8
 800938c:	0800b858 	.word	0x0800b858

08009390 <__lshift>:
 8009390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009394:	460c      	mov	r4, r1
 8009396:	4607      	mov	r7, r0
 8009398:	4691      	mov	r9, r2
 800939a:	6923      	ldr	r3, [r4, #16]
 800939c:	6849      	ldr	r1, [r1, #4]
 800939e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093a2:	68a3      	ldr	r3, [r4, #8]
 80093a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093a8:	f108 0601 	add.w	r6, r8, #1
 80093ac:	42b3      	cmp	r3, r6
 80093ae:	db0b      	blt.n	80093c8 <__lshift+0x38>
 80093b0:	4638      	mov	r0, r7
 80093b2:	f7ff fd97 	bl	8008ee4 <_Balloc>
 80093b6:	4605      	mov	r5, r0
 80093b8:	b948      	cbnz	r0, 80093ce <__lshift+0x3e>
 80093ba:	4602      	mov	r2, r0
 80093bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093c0:	4b27      	ldr	r3, [pc, #156]	@ (8009460 <__lshift+0xd0>)
 80093c2:	4828      	ldr	r0, [pc, #160]	@ (8009464 <__lshift+0xd4>)
 80093c4:	f001 fcd6 	bl	800ad74 <__assert_func>
 80093c8:	3101      	adds	r1, #1
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	e7ee      	b.n	80093ac <__lshift+0x1c>
 80093ce:	2300      	movs	r3, #0
 80093d0:	f100 0114 	add.w	r1, r0, #20
 80093d4:	f100 0210 	add.w	r2, r0, #16
 80093d8:	4618      	mov	r0, r3
 80093da:	4553      	cmp	r3, sl
 80093dc:	db33      	blt.n	8009446 <__lshift+0xb6>
 80093de:	6920      	ldr	r0, [r4, #16]
 80093e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093e4:	f104 0314 	add.w	r3, r4, #20
 80093e8:	f019 091f 	ands.w	r9, r9, #31
 80093ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093f4:	d02b      	beq.n	800944e <__lshift+0xbe>
 80093f6:	468a      	mov	sl, r1
 80093f8:	2200      	movs	r2, #0
 80093fa:	f1c9 0e20 	rsb	lr, r9, #32
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	fa00 f009 	lsl.w	r0, r0, r9
 8009404:	4310      	orrs	r0, r2
 8009406:	f84a 0b04 	str.w	r0, [sl], #4
 800940a:	f853 2b04 	ldr.w	r2, [r3], #4
 800940e:	459c      	cmp	ip, r3
 8009410:	fa22 f20e 	lsr.w	r2, r2, lr
 8009414:	d8f3      	bhi.n	80093fe <__lshift+0x6e>
 8009416:	ebac 0304 	sub.w	r3, ip, r4
 800941a:	3b15      	subs	r3, #21
 800941c:	f023 0303 	bic.w	r3, r3, #3
 8009420:	3304      	adds	r3, #4
 8009422:	f104 0015 	add.w	r0, r4, #21
 8009426:	4584      	cmp	ip, r0
 8009428:	bf38      	it	cc
 800942a:	2304      	movcc	r3, #4
 800942c:	50ca      	str	r2, [r1, r3]
 800942e:	b10a      	cbz	r2, 8009434 <__lshift+0xa4>
 8009430:	f108 0602 	add.w	r6, r8, #2
 8009434:	3e01      	subs	r6, #1
 8009436:	4638      	mov	r0, r7
 8009438:	4621      	mov	r1, r4
 800943a:	612e      	str	r6, [r5, #16]
 800943c:	f7ff fd92 	bl	8008f64 <_Bfree>
 8009440:	4628      	mov	r0, r5
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	f842 0f04 	str.w	r0, [r2, #4]!
 800944a:	3301      	adds	r3, #1
 800944c:	e7c5      	b.n	80093da <__lshift+0x4a>
 800944e:	3904      	subs	r1, #4
 8009450:	f853 2b04 	ldr.w	r2, [r3], #4
 8009454:	459c      	cmp	ip, r3
 8009456:	f841 2f04 	str.w	r2, [r1, #4]!
 800945a:	d8f9      	bhi.n	8009450 <__lshift+0xc0>
 800945c:	e7ea      	b.n	8009434 <__lshift+0xa4>
 800945e:	bf00      	nop
 8009460:	0800b847 	.word	0x0800b847
 8009464:	0800b858 	.word	0x0800b858

08009468 <__mcmp>:
 8009468:	4603      	mov	r3, r0
 800946a:	690a      	ldr	r2, [r1, #16]
 800946c:	6900      	ldr	r0, [r0, #16]
 800946e:	b530      	push	{r4, r5, lr}
 8009470:	1a80      	subs	r0, r0, r2
 8009472:	d10e      	bne.n	8009492 <__mcmp+0x2a>
 8009474:	3314      	adds	r3, #20
 8009476:	3114      	adds	r1, #20
 8009478:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800947c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009480:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009484:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009488:	4295      	cmp	r5, r2
 800948a:	d003      	beq.n	8009494 <__mcmp+0x2c>
 800948c:	d205      	bcs.n	800949a <__mcmp+0x32>
 800948e:	f04f 30ff 	mov.w	r0, #4294967295
 8009492:	bd30      	pop	{r4, r5, pc}
 8009494:	42a3      	cmp	r3, r4
 8009496:	d3f3      	bcc.n	8009480 <__mcmp+0x18>
 8009498:	e7fb      	b.n	8009492 <__mcmp+0x2a>
 800949a:	2001      	movs	r0, #1
 800949c:	e7f9      	b.n	8009492 <__mcmp+0x2a>
	...

080094a0 <__mdiff>:
 80094a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	4689      	mov	r9, r1
 80094a6:	4606      	mov	r6, r0
 80094a8:	4611      	mov	r1, r2
 80094aa:	4648      	mov	r0, r9
 80094ac:	4614      	mov	r4, r2
 80094ae:	f7ff ffdb 	bl	8009468 <__mcmp>
 80094b2:	1e05      	subs	r5, r0, #0
 80094b4:	d112      	bne.n	80094dc <__mdiff+0x3c>
 80094b6:	4629      	mov	r1, r5
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7ff fd13 	bl	8008ee4 <_Balloc>
 80094be:	4602      	mov	r2, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__mdiff+0x2e>
 80094c2:	f240 2137 	movw	r1, #567	@ 0x237
 80094c6:	4b3e      	ldr	r3, [pc, #248]	@ (80095c0 <__mdiff+0x120>)
 80094c8:	483e      	ldr	r0, [pc, #248]	@ (80095c4 <__mdiff+0x124>)
 80094ca:	f001 fc53 	bl	800ad74 <__assert_func>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094d4:	4610      	mov	r0, r2
 80094d6:	b003      	add	sp, #12
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094dc:	bfbc      	itt	lt
 80094de:	464b      	movlt	r3, r9
 80094e0:	46a1      	movlt	r9, r4
 80094e2:	4630      	mov	r0, r6
 80094e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094e8:	bfba      	itte	lt
 80094ea:	461c      	movlt	r4, r3
 80094ec:	2501      	movlt	r5, #1
 80094ee:	2500      	movge	r5, #0
 80094f0:	f7ff fcf8 	bl	8008ee4 <_Balloc>
 80094f4:	4602      	mov	r2, r0
 80094f6:	b918      	cbnz	r0, 8009500 <__mdiff+0x60>
 80094f8:	f240 2145 	movw	r1, #581	@ 0x245
 80094fc:	4b30      	ldr	r3, [pc, #192]	@ (80095c0 <__mdiff+0x120>)
 80094fe:	e7e3      	b.n	80094c8 <__mdiff+0x28>
 8009500:	f100 0b14 	add.w	fp, r0, #20
 8009504:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009508:	f109 0310 	add.w	r3, r9, #16
 800950c:	60c5      	str	r5, [r0, #12]
 800950e:	f04f 0c00 	mov.w	ip, #0
 8009512:	f109 0514 	add.w	r5, r9, #20
 8009516:	46d9      	mov	r9, fp
 8009518:	6926      	ldr	r6, [r4, #16]
 800951a:	f104 0e14 	add.w	lr, r4, #20
 800951e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009522:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800952e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009532:	b281      	uxth	r1, r0
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	fa1f f38a 	uxth.w	r3, sl
 800953a:	1a5b      	subs	r3, r3, r1
 800953c:	0c00      	lsrs	r0, r0, #16
 800953e:	4463      	add	r3, ip
 8009540:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009544:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009548:	b29b      	uxth	r3, r3
 800954a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800954e:	4576      	cmp	r6, lr
 8009550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009554:	f849 3b04 	str.w	r3, [r9], #4
 8009558:	d8e6      	bhi.n	8009528 <__mdiff+0x88>
 800955a:	1b33      	subs	r3, r6, r4
 800955c:	3b15      	subs	r3, #21
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	3415      	adds	r4, #21
 8009564:	3304      	adds	r3, #4
 8009566:	42a6      	cmp	r6, r4
 8009568:	bf38      	it	cc
 800956a:	2304      	movcc	r3, #4
 800956c:	441d      	add	r5, r3
 800956e:	445b      	add	r3, fp
 8009570:	461e      	mov	r6, r3
 8009572:	462c      	mov	r4, r5
 8009574:	4544      	cmp	r4, r8
 8009576:	d30e      	bcc.n	8009596 <__mdiff+0xf6>
 8009578:	f108 0103 	add.w	r1, r8, #3
 800957c:	1b49      	subs	r1, r1, r5
 800957e:	f021 0103 	bic.w	r1, r1, #3
 8009582:	3d03      	subs	r5, #3
 8009584:	45a8      	cmp	r8, r5
 8009586:	bf38      	it	cc
 8009588:	2100      	movcc	r1, #0
 800958a:	440b      	add	r3, r1
 800958c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009590:	b199      	cbz	r1, 80095ba <__mdiff+0x11a>
 8009592:	6117      	str	r7, [r2, #16]
 8009594:	e79e      	b.n	80094d4 <__mdiff+0x34>
 8009596:	46e6      	mov	lr, ip
 8009598:	f854 1b04 	ldr.w	r1, [r4], #4
 800959c:	fa1f fc81 	uxth.w	ip, r1
 80095a0:	44f4      	add	ip, lr
 80095a2:	0c08      	lsrs	r0, r1, #16
 80095a4:	4471      	add	r1, lr
 80095a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095aa:	b289      	uxth	r1, r1
 80095ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095b4:	f846 1b04 	str.w	r1, [r6], #4
 80095b8:	e7dc      	b.n	8009574 <__mdiff+0xd4>
 80095ba:	3f01      	subs	r7, #1
 80095bc:	e7e6      	b.n	800958c <__mdiff+0xec>
 80095be:	bf00      	nop
 80095c0:	0800b847 	.word	0x0800b847
 80095c4:	0800b858 	.word	0x0800b858

080095c8 <__ulp>:
 80095c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009604 <__ulp+0x3c>)
 80095ca:	400b      	ands	r3, r1
 80095cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dc08      	bgt.n	80095e6 <__ulp+0x1e>
 80095d4:	425b      	negs	r3, r3
 80095d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80095da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095de:	da04      	bge.n	80095ea <__ulp+0x22>
 80095e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80095e4:	4113      	asrs	r3, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	e008      	b.n	80095fc <__ulp+0x34>
 80095ea:	f1a2 0314 	sub.w	r3, r2, #20
 80095ee:	2b1e      	cmp	r3, #30
 80095f0:	bfd6      	itet	le
 80095f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80095f6:	2201      	movgt	r2, #1
 80095f8:	40da      	lsrle	r2, r3
 80095fa:	2300      	movs	r3, #0
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	7ff00000 	.word	0x7ff00000

08009608 <__b2d>:
 8009608:	6902      	ldr	r2, [r0, #16]
 800960a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960c:	f100 0614 	add.w	r6, r0, #20
 8009610:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009614:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009618:	4f1e      	ldr	r7, [pc, #120]	@ (8009694 <__b2d+0x8c>)
 800961a:	4620      	mov	r0, r4
 800961c:	f7ff fd54 	bl	80090c8 <__hi0bits>
 8009620:	4603      	mov	r3, r0
 8009622:	f1c0 0020 	rsb	r0, r0, #32
 8009626:	2b0a      	cmp	r3, #10
 8009628:	f1a2 0504 	sub.w	r5, r2, #4
 800962c:	6008      	str	r0, [r1, #0]
 800962e:	dc12      	bgt.n	8009656 <__b2d+0x4e>
 8009630:	42ae      	cmp	r6, r5
 8009632:	bf2c      	ite	cs
 8009634:	2200      	movcs	r2, #0
 8009636:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800963a:	f1c3 0c0b 	rsb	ip, r3, #11
 800963e:	3315      	adds	r3, #21
 8009640:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009644:	fa04 f303 	lsl.w	r3, r4, r3
 8009648:	fa22 f20c 	lsr.w	r2, r2, ip
 800964c:	ea4e 0107 	orr.w	r1, lr, r7
 8009650:	431a      	orrs	r2, r3
 8009652:	4610      	mov	r0, r2
 8009654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009656:	42ae      	cmp	r6, r5
 8009658:	bf36      	itet	cc
 800965a:	f1a2 0508 	subcc.w	r5, r2, #8
 800965e:	2200      	movcs	r2, #0
 8009660:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009664:	3b0b      	subs	r3, #11
 8009666:	d012      	beq.n	800968e <__b2d+0x86>
 8009668:	f1c3 0720 	rsb	r7, r3, #32
 800966c:	fa22 f107 	lsr.w	r1, r2, r7
 8009670:	409c      	lsls	r4, r3
 8009672:	430c      	orrs	r4, r1
 8009674:	42b5      	cmp	r5, r6
 8009676:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800967a:	bf94      	ite	ls
 800967c:	2400      	movls	r4, #0
 800967e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009682:	409a      	lsls	r2, r3
 8009684:	40fc      	lsrs	r4, r7
 8009686:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800968a:	4322      	orrs	r2, r4
 800968c:	e7e1      	b.n	8009652 <__b2d+0x4a>
 800968e:	ea44 0107 	orr.w	r1, r4, r7
 8009692:	e7de      	b.n	8009652 <__b2d+0x4a>
 8009694:	3ff00000 	.word	0x3ff00000

08009698 <__d2b>:
 8009698:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800969c:	2101      	movs	r1, #1
 800969e:	4690      	mov	r8, r2
 80096a0:	4699      	mov	r9, r3
 80096a2:	9e08      	ldr	r6, [sp, #32]
 80096a4:	f7ff fc1e 	bl	8008ee4 <_Balloc>
 80096a8:	4604      	mov	r4, r0
 80096aa:	b930      	cbnz	r0, 80096ba <__d2b+0x22>
 80096ac:	4602      	mov	r2, r0
 80096ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80096b2:	4b23      	ldr	r3, [pc, #140]	@ (8009740 <__d2b+0xa8>)
 80096b4:	4823      	ldr	r0, [pc, #140]	@ (8009744 <__d2b+0xac>)
 80096b6:	f001 fb5d 	bl	800ad74 <__assert_func>
 80096ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096c2:	b10d      	cbz	r5, 80096c8 <__d2b+0x30>
 80096c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	f1b8 0300 	subs.w	r3, r8, #0
 80096ce:	d024      	beq.n	800971a <__d2b+0x82>
 80096d0:	4668      	mov	r0, sp
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	f7ff fd17 	bl	8009106 <__lo0bits>
 80096d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096dc:	b1d8      	cbz	r0, 8009716 <__d2b+0x7e>
 80096de:	f1c0 0320 	rsb	r3, r0, #32
 80096e2:	fa02 f303 	lsl.w	r3, r2, r3
 80096e6:	430b      	orrs	r3, r1
 80096e8:	40c2      	lsrs	r2, r0
 80096ea:	6163      	str	r3, [r4, #20]
 80096ec:	9201      	str	r2, [sp, #4]
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bf0c      	ite	eq
 80096f4:	2201      	moveq	r2, #1
 80096f6:	2202      	movne	r2, #2
 80096f8:	61a3      	str	r3, [r4, #24]
 80096fa:	6122      	str	r2, [r4, #16]
 80096fc:	b1ad      	cbz	r5, 800972a <__d2b+0x92>
 80096fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009702:	4405      	add	r5, r0
 8009704:	6035      	str	r5, [r6, #0]
 8009706:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800970a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970c:	6018      	str	r0, [r3, #0]
 800970e:	4620      	mov	r0, r4
 8009710:	b002      	add	sp, #8
 8009712:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009716:	6161      	str	r1, [r4, #20]
 8009718:	e7e9      	b.n	80096ee <__d2b+0x56>
 800971a:	a801      	add	r0, sp, #4
 800971c:	f7ff fcf3 	bl	8009106 <__lo0bits>
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	6163      	str	r3, [r4, #20]
 8009726:	3020      	adds	r0, #32
 8009728:	e7e7      	b.n	80096fa <__d2b+0x62>
 800972a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800972e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009732:	6030      	str	r0, [r6, #0]
 8009734:	6918      	ldr	r0, [r3, #16]
 8009736:	f7ff fcc7 	bl	80090c8 <__hi0bits>
 800973a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800973e:	e7e4      	b.n	800970a <__d2b+0x72>
 8009740:	0800b847 	.word	0x0800b847
 8009744:	0800b858 	.word	0x0800b858

08009748 <__ratio>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	b085      	sub	sp, #20
 800974e:	e9cd 1000 	strd	r1, r0, [sp]
 8009752:	a902      	add	r1, sp, #8
 8009754:	f7ff ff58 	bl	8009608 <__b2d>
 8009758:	468b      	mov	fp, r1
 800975a:	4606      	mov	r6, r0
 800975c:	460f      	mov	r7, r1
 800975e:	9800      	ldr	r0, [sp, #0]
 8009760:	a903      	add	r1, sp, #12
 8009762:	f7ff ff51 	bl	8009608 <__b2d>
 8009766:	460d      	mov	r5, r1
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	4689      	mov	r9, r1
 800976c:	6919      	ldr	r1, [r3, #16]
 800976e:	9b00      	ldr	r3, [sp, #0]
 8009770:	4604      	mov	r4, r0
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	4630      	mov	r0, r6
 8009776:	1ac9      	subs	r1, r1, r3
 8009778:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfcd      	iteet	gt
 8009786:	463a      	movgt	r2, r7
 8009788:	462a      	movle	r2, r5
 800978a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800978e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009792:	bfd8      	it	le
 8009794:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009798:	464b      	mov	r3, r9
 800979a:	4622      	mov	r2, r4
 800979c:	4659      	mov	r1, fp
 800979e:	f7f6 ffc5 	bl	800072c <__aeabi_ddiv>
 80097a2:	b005      	add	sp, #20
 80097a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097a8 <__copybits>:
 80097a8:	3901      	subs	r1, #1
 80097aa:	b570      	push	{r4, r5, r6, lr}
 80097ac:	1149      	asrs	r1, r1, #5
 80097ae:	6914      	ldr	r4, [r2, #16]
 80097b0:	3101      	adds	r1, #1
 80097b2:	f102 0314 	add.w	r3, r2, #20
 80097b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097be:	1f05      	subs	r5, r0, #4
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	d30c      	bcc.n	80097de <__copybits+0x36>
 80097c4:	1aa3      	subs	r3, r4, r2
 80097c6:	3b11      	subs	r3, #17
 80097c8:	f023 0303 	bic.w	r3, r3, #3
 80097cc:	3211      	adds	r2, #17
 80097ce:	42a2      	cmp	r2, r4
 80097d0:	bf88      	it	hi
 80097d2:	2300      	movhi	r3, #0
 80097d4:	4418      	add	r0, r3
 80097d6:	2300      	movs	r3, #0
 80097d8:	4288      	cmp	r0, r1
 80097da:	d305      	bcc.n	80097e8 <__copybits+0x40>
 80097dc:	bd70      	pop	{r4, r5, r6, pc}
 80097de:	f853 6b04 	ldr.w	r6, [r3], #4
 80097e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80097e6:	e7eb      	b.n	80097c0 <__copybits+0x18>
 80097e8:	f840 3b04 	str.w	r3, [r0], #4
 80097ec:	e7f4      	b.n	80097d8 <__copybits+0x30>

080097ee <__any_on>:
 80097ee:	f100 0214 	add.w	r2, r0, #20
 80097f2:	6900      	ldr	r0, [r0, #16]
 80097f4:	114b      	asrs	r3, r1, #5
 80097f6:	4298      	cmp	r0, r3
 80097f8:	b510      	push	{r4, lr}
 80097fa:	db11      	blt.n	8009820 <__any_on+0x32>
 80097fc:	dd0a      	ble.n	8009814 <__any_on+0x26>
 80097fe:	f011 011f 	ands.w	r1, r1, #31
 8009802:	d007      	beq.n	8009814 <__any_on+0x26>
 8009804:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009808:	fa24 f001 	lsr.w	r0, r4, r1
 800980c:	fa00 f101 	lsl.w	r1, r0, r1
 8009810:	428c      	cmp	r4, r1
 8009812:	d10b      	bne.n	800982c <__any_on+0x3e>
 8009814:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009818:	4293      	cmp	r3, r2
 800981a:	d803      	bhi.n	8009824 <__any_on+0x36>
 800981c:	2000      	movs	r0, #0
 800981e:	bd10      	pop	{r4, pc}
 8009820:	4603      	mov	r3, r0
 8009822:	e7f7      	b.n	8009814 <__any_on+0x26>
 8009824:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009828:	2900      	cmp	r1, #0
 800982a:	d0f5      	beq.n	8009818 <__any_on+0x2a>
 800982c:	2001      	movs	r0, #1
 800982e:	e7f6      	b.n	800981e <__any_on+0x30>

08009830 <sulp>:
 8009830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	460f      	mov	r7, r1
 8009836:	4690      	mov	r8, r2
 8009838:	f7ff fec6 	bl	80095c8 <__ulp>
 800983c:	4604      	mov	r4, r0
 800983e:	460d      	mov	r5, r1
 8009840:	f1b8 0f00 	cmp.w	r8, #0
 8009844:	d011      	beq.n	800986a <sulp+0x3a>
 8009846:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800984a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800984e:	2b00      	cmp	r3, #0
 8009850:	dd0b      	ble.n	800986a <sulp+0x3a>
 8009852:	2400      	movs	r4, #0
 8009854:	051b      	lsls	r3, r3, #20
 8009856:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800985a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800985e:	4622      	mov	r2, r4
 8009860:	462b      	mov	r3, r5
 8009862:	f7f6 fe39 	bl	80004d8 <__aeabi_dmul>
 8009866:	4604      	mov	r4, r0
 8009868:	460d      	mov	r5, r1
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009872:	0000      	movs	r0, r0
 8009874:	0000      	movs	r0, r0
	...

08009878 <_strtod_l>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	b09f      	sub	sp, #124	@ 0x7c
 800987e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009880:	2200      	movs	r2, #0
 8009882:	460c      	mov	r4, r1
 8009884:	921a      	str	r2, [sp, #104]	@ 0x68
 8009886:	f04f 0a00 	mov.w	sl, #0
 800988a:	f04f 0b00 	mov.w	fp, #0
 800988e:	460a      	mov	r2, r1
 8009890:	9005      	str	r0, [sp, #20]
 8009892:	9219      	str	r2, [sp, #100]	@ 0x64
 8009894:	7811      	ldrb	r1, [r2, #0]
 8009896:	292b      	cmp	r1, #43	@ 0x2b
 8009898:	d048      	beq.n	800992c <_strtod_l+0xb4>
 800989a:	d836      	bhi.n	800990a <_strtod_l+0x92>
 800989c:	290d      	cmp	r1, #13
 800989e:	d830      	bhi.n	8009902 <_strtod_l+0x8a>
 80098a0:	2908      	cmp	r1, #8
 80098a2:	d830      	bhi.n	8009906 <_strtod_l+0x8e>
 80098a4:	2900      	cmp	r1, #0
 80098a6:	d039      	beq.n	800991c <_strtod_l+0xa4>
 80098a8:	2200      	movs	r2, #0
 80098aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80098ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80098ae:	782a      	ldrb	r2, [r5, #0]
 80098b0:	2a30      	cmp	r2, #48	@ 0x30
 80098b2:	f040 80b1 	bne.w	8009a18 <_strtod_l+0x1a0>
 80098b6:	786a      	ldrb	r2, [r5, #1]
 80098b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80098bc:	2a58      	cmp	r2, #88	@ 0x58
 80098be:	d16c      	bne.n	800999a <_strtod_l+0x122>
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c4:	4a8e      	ldr	r2, [pc, #568]	@ (8009b00 <_strtod_l+0x288>)
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	9805      	ldr	r0, [sp, #20]
 80098ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80098d0:	a919      	add	r1, sp, #100	@ 0x64
 80098d2:	f001 fae9 	bl	800aea8 <__gethex>
 80098d6:	f010 060f 	ands.w	r6, r0, #15
 80098da:	4604      	mov	r4, r0
 80098dc:	d005      	beq.n	80098ea <_strtod_l+0x72>
 80098de:	2e06      	cmp	r6, #6
 80098e0:	d126      	bne.n	8009930 <_strtod_l+0xb8>
 80098e2:	2300      	movs	r3, #0
 80098e4:	3501      	adds	r5, #1
 80098e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80098e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 8584 	bne.w	800a3fa <_strtod_l+0xb82>
 80098f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098f4:	b1bb      	cbz	r3, 8009926 <_strtod_l+0xae>
 80098f6:	4650      	mov	r0, sl
 80098f8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80098fc:	b01f      	add	sp, #124	@ 0x7c
 80098fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009902:	2920      	cmp	r1, #32
 8009904:	d1d0      	bne.n	80098a8 <_strtod_l+0x30>
 8009906:	3201      	adds	r2, #1
 8009908:	e7c3      	b.n	8009892 <_strtod_l+0x1a>
 800990a:	292d      	cmp	r1, #45	@ 0x2d
 800990c:	d1cc      	bne.n	80098a8 <_strtod_l+0x30>
 800990e:	2101      	movs	r1, #1
 8009910:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009912:	1c51      	adds	r1, r2, #1
 8009914:	9119      	str	r1, [sp, #100]	@ 0x64
 8009916:	7852      	ldrb	r2, [r2, #1]
 8009918:	2a00      	cmp	r2, #0
 800991a:	d1c7      	bne.n	80098ac <_strtod_l+0x34>
 800991c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800991e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009920:	2b00      	cmp	r3, #0
 8009922:	f040 8568 	bne.w	800a3f6 <_strtod_l+0xb7e>
 8009926:	4650      	mov	r0, sl
 8009928:	4659      	mov	r1, fp
 800992a:	e7e7      	b.n	80098fc <_strtod_l+0x84>
 800992c:	2100      	movs	r1, #0
 800992e:	e7ef      	b.n	8009910 <_strtod_l+0x98>
 8009930:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009932:	b13a      	cbz	r2, 8009944 <_strtod_l+0xcc>
 8009934:	2135      	movs	r1, #53	@ 0x35
 8009936:	a81c      	add	r0, sp, #112	@ 0x70
 8009938:	f7ff ff36 	bl	80097a8 <__copybits>
 800993c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800993e:	9805      	ldr	r0, [sp, #20]
 8009940:	f7ff fb10 	bl	8008f64 <_Bfree>
 8009944:	3e01      	subs	r6, #1
 8009946:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009948:	2e04      	cmp	r6, #4
 800994a:	d806      	bhi.n	800995a <_strtod_l+0xe2>
 800994c:	e8df f006 	tbb	[pc, r6]
 8009950:	201d0314 	.word	0x201d0314
 8009954:	14          	.byte	0x14
 8009955:	00          	.byte	0x00
 8009956:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800995a:	05e1      	lsls	r1, r4, #23
 800995c:	bf48      	it	mi
 800995e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009962:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009966:	0d1b      	lsrs	r3, r3, #20
 8009968:	051b      	lsls	r3, r3, #20
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1bd      	bne.n	80098ea <_strtod_l+0x72>
 800996e:	f7fe fb2b 	bl	8007fc8 <__errno>
 8009972:	2322      	movs	r3, #34	@ 0x22
 8009974:	6003      	str	r3, [r0, #0]
 8009976:	e7b8      	b.n	80098ea <_strtod_l+0x72>
 8009978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800997c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009980:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009984:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009988:	e7e7      	b.n	800995a <_strtod_l+0xe2>
 800998a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009b04 <_strtod_l+0x28c>
 800998e:	e7e4      	b.n	800995a <_strtod_l+0xe2>
 8009990:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009994:	f04f 3aff 	mov.w	sl, #4294967295
 8009998:	e7df      	b.n	800995a <_strtod_l+0xe2>
 800999a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	9219      	str	r2, [sp, #100]	@ 0x64
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	2b30      	cmp	r3, #48	@ 0x30
 80099a4:	d0f9      	beq.n	800999a <_strtod_l+0x122>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d09f      	beq.n	80098ea <_strtod_l+0x72>
 80099aa:	2301      	movs	r3, #1
 80099ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099b0:	220a      	movs	r2, #10
 80099b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80099b4:	2300      	movs	r3, #0
 80099b6:	461f      	mov	r7, r3
 80099b8:	9308      	str	r3, [sp, #32]
 80099ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80099bc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80099be:	7805      	ldrb	r5, [r0, #0]
 80099c0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80099c4:	b2d9      	uxtb	r1, r3
 80099c6:	2909      	cmp	r1, #9
 80099c8:	d928      	bls.n	8009a1c <_strtod_l+0x1a4>
 80099ca:	2201      	movs	r2, #1
 80099cc:	494e      	ldr	r1, [pc, #312]	@ (8009b08 <_strtod_l+0x290>)
 80099ce:	f001 f99b 	bl	800ad08 <strncmp>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d032      	beq.n	8009a3c <_strtod_l+0x1c4>
 80099d6:	2000      	movs	r0, #0
 80099d8:	462a      	mov	r2, r5
 80099da:	4681      	mov	r9, r0
 80099dc:	463d      	mov	r5, r7
 80099de:	4603      	mov	r3, r0
 80099e0:	2a65      	cmp	r2, #101	@ 0x65
 80099e2:	d001      	beq.n	80099e8 <_strtod_l+0x170>
 80099e4:	2a45      	cmp	r2, #69	@ 0x45
 80099e6:	d114      	bne.n	8009a12 <_strtod_l+0x19a>
 80099e8:	b91d      	cbnz	r5, 80099f2 <_strtod_l+0x17a>
 80099ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ec:	4302      	orrs	r2, r0
 80099ee:	d095      	beq.n	800991c <_strtod_l+0xa4>
 80099f0:	2500      	movs	r5, #0
 80099f2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80099f4:	1c62      	adds	r2, r4, #1
 80099f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80099f8:	7862      	ldrb	r2, [r4, #1]
 80099fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80099fc:	d077      	beq.n	8009aee <_strtod_l+0x276>
 80099fe:	2a2d      	cmp	r2, #45	@ 0x2d
 8009a00:	d07b      	beq.n	8009afa <_strtod_l+0x282>
 8009a02:	f04f 0c00 	mov.w	ip, #0
 8009a06:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009a0a:	2909      	cmp	r1, #9
 8009a0c:	f240 8082 	bls.w	8009b14 <_strtod_l+0x29c>
 8009a10:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a12:	f04f 0800 	mov.w	r8, #0
 8009a16:	e0a2      	b.n	8009b5e <_strtod_l+0x2e6>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e7c7      	b.n	80099ac <_strtod_l+0x134>
 8009a1c:	2f08      	cmp	r7, #8
 8009a1e:	bfd5      	itete	le
 8009a20:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009a22:	9908      	ldrgt	r1, [sp, #32]
 8009a24:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009a2c:	f100 0001 	add.w	r0, r0, #1
 8009a30:	bfd4      	ite	le
 8009a32:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009a34:	9308      	strgt	r3, [sp, #32]
 8009a36:	3701      	adds	r7, #1
 8009a38:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a3a:	e7bf      	b.n	80099bc <_strtod_l+0x144>
 8009a3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a42:	785a      	ldrb	r2, [r3, #1]
 8009a44:	b37f      	cbz	r7, 8009aa6 <_strtod_l+0x22e>
 8009a46:	4681      	mov	r9, r0
 8009a48:	463d      	mov	r5, r7
 8009a4a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d912      	bls.n	8009a78 <_strtod_l+0x200>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e7c4      	b.n	80099e0 <_strtod_l+0x168>
 8009a56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a58:	3001      	adds	r0, #1
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a5e:	785a      	ldrb	r2, [r3, #1]
 8009a60:	2a30      	cmp	r2, #48	@ 0x30
 8009a62:	d0f8      	beq.n	8009a56 <_strtod_l+0x1de>
 8009a64:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	f200 84cb 	bhi.w	800a404 <_strtod_l+0xb8c>
 8009a6e:	4681      	mov	r9, r0
 8009a70:	2000      	movs	r0, #0
 8009a72:	4605      	mov	r5, r0
 8009a74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a76:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a78:	3a30      	subs	r2, #48	@ 0x30
 8009a7a:	f100 0301 	add.w	r3, r0, #1
 8009a7e:	d02a      	beq.n	8009ad6 <_strtod_l+0x25e>
 8009a80:	4499      	add	r9, r3
 8009a82:	210a      	movs	r1, #10
 8009a84:	462b      	mov	r3, r5
 8009a86:	eb00 0c05 	add.w	ip, r0, r5
 8009a8a:	4563      	cmp	r3, ip
 8009a8c:	d10d      	bne.n	8009aaa <_strtod_l+0x232>
 8009a8e:	1c69      	adds	r1, r5, #1
 8009a90:	4401      	add	r1, r0
 8009a92:	4428      	add	r0, r5
 8009a94:	2808      	cmp	r0, #8
 8009a96:	dc16      	bgt.n	8009ac6 <_strtod_l+0x24e>
 8009a98:	230a      	movs	r3, #10
 8009a9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a9c:	fb03 2300 	mla	r3, r3, r0, r2
 8009aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e018      	b.n	8009ad8 <_strtod_l+0x260>
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	e7da      	b.n	8009a60 <_strtod_l+0x1e8>
 8009aaa:	2b08      	cmp	r3, #8
 8009aac:	f103 0301 	add.w	r3, r3, #1
 8009ab0:	dc03      	bgt.n	8009aba <_strtod_l+0x242>
 8009ab2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009ab4:	434e      	muls	r6, r1
 8009ab6:	960a      	str	r6, [sp, #40]	@ 0x28
 8009ab8:	e7e7      	b.n	8009a8a <_strtod_l+0x212>
 8009aba:	2b10      	cmp	r3, #16
 8009abc:	bfde      	ittt	le
 8009abe:	9e08      	ldrle	r6, [sp, #32]
 8009ac0:	434e      	mulle	r6, r1
 8009ac2:	9608      	strle	r6, [sp, #32]
 8009ac4:	e7e1      	b.n	8009a8a <_strtod_l+0x212>
 8009ac6:	280f      	cmp	r0, #15
 8009ac8:	dceb      	bgt.n	8009aa2 <_strtod_l+0x22a>
 8009aca:	230a      	movs	r3, #10
 8009acc:	9808      	ldr	r0, [sp, #32]
 8009ace:	fb03 2300 	mla	r3, r3, r0, r2
 8009ad2:	9308      	str	r3, [sp, #32]
 8009ad4:	e7e5      	b.n	8009aa2 <_strtod_l+0x22a>
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ada:	460d      	mov	r5, r1
 8009adc:	1c50      	adds	r0, r2, #1
 8009ade:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ae0:	7852      	ldrb	r2, [r2, #1]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	e7b1      	b.n	8009a4a <_strtod_l+0x1d2>
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	2301      	movs	r3, #1
 8009aec:	e77d      	b.n	80099ea <_strtod_l+0x172>
 8009aee:	f04f 0c00 	mov.w	ip, #0
 8009af2:	1ca2      	adds	r2, r4, #2
 8009af4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009af6:	78a2      	ldrb	r2, [r4, #2]
 8009af8:	e785      	b.n	8009a06 <_strtod_l+0x18e>
 8009afa:	f04f 0c01 	mov.w	ip, #1
 8009afe:	e7f8      	b.n	8009af2 <_strtod_l+0x27a>
 8009b00:	0800b9c8 	.word	0x0800b9c8
 8009b04:	7ff00000 	.word	0x7ff00000
 8009b08:	0800b9b0 	.word	0x0800b9b0
 8009b0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b0e:	1c51      	adds	r1, r2, #1
 8009b10:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b12:	7852      	ldrb	r2, [r2, #1]
 8009b14:	2a30      	cmp	r2, #48	@ 0x30
 8009b16:	d0f9      	beq.n	8009b0c <_strtod_l+0x294>
 8009b18:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009b1c:	2908      	cmp	r1, #8
 8009b1e:	f63f af78 	bhi.w	8009a12 <_strtod_l+0x19a>
 8009b22:	f04f 080a 	mov.w	r8, #10
 8009b26:	3a30      	subs	r2, #48	@ 0x30
 8009b28:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009b2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b30:	1c56      	adds	r6, r2, #1
 8009b32:	9619      	str	r6, [sp, #100]	@ 0x64
 8009b34:	7852      	ldrb	r2, [r2, #1]
 8009b36:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009b3a:	f1be 0f09 	cmp.w	lr, #9
 8009b3e:	d939      	bls.n	8009bb4 <_strtod_l+0x33c>
 8009b40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009b42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009b46:	1a76      	subs	r6, r6, r1
 8009b48:	2e08      	cmp	r6, #8
 8009b4a:	dc03      	bgt.n	8009b54 <_strtod_l+0x2dc>
 8009b4c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b4e:	4588      	cmp	r8, r1
 8009b50:	bfa8      	it	ge
 8009b52:	4688      	movge	r8, r1
 8009b54:	f1bc 0f00 	cmp.w	ip, #0
 8009b58:	d001      	beq.n	8009b5e <_strtod_l+0x2e6>
 8009b5a:	f1c8 0800 	rsb	r8, r8, #0
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	d14e      	bne.n	8009c00 <_strtod_l+0x388>
 8009b62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b64:	4308      	orrs	r0, r1
 8009b66:	f47f aec0 	bne.w	80098ea <_strtod_l+0x72>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f47f aed6 	bne.w	800991c <_strtod_l+0xa4>
 8009b70:	2a69      	cmp	r2, #105	@ 0x69
 8009b72:	d028      	beq.n	8009bc6 <_strtod_l+0x34e>
 8009b74:	dc25      	bgt.n	8009bc2 <_strtod_l+0x34a>
 8009b76:	2a49      	cmp	r2, #73	@ 0x49
 8009b78:	d025      	beq.n	8009bc6 <_strtod_l+0x34e>
 8009b7a:	2a4e      	cmp	r2, #78	@ 0x4e
 8009b7c:	f47f aece 	bne.w	800991c <_strtod_l+0xa4>
 8009b80:	499a      	ldr	r1, [pc, #616]	@ (8009dec <_strtod_l+0x574>)
 8009b82:	a819      	add	r0, sp, #100	@ 0x64
 8009b84:	f001 fbb2 	bl	800b2ec <__match>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	f43f aec7 	beq.w	800991c <_strtod_l+0xa4>
 8009b8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	2b28      	cmp	r3, #40	@ 0x28
 8009b94:	d12e      	bne.n	8009bf4 <_strtod_l+0x37c>
 8009b96:	4996      	ldr	r1, [pc, #600]	@ (8009df0 <_strtod_l+0x578>)
 8009b98:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b9a:	a819      	add	r0, sp, #100	@ 0x64
 8009b9c:	f001 fbba 	bl	800b314 <__hexnan>
 8009ba0:	2805      	cmp	r0, #5
 8009ba2:	d127      	bne.n	8009bf4 <_strtod_l+0x37c>
 8009ba4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ba6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009baa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009bae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009bb2:	e69a      	b.n	80098ea <_strtod_l+0x72>
 8009bb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009bb6:	fb08 2101 	mla	r1, r8, r1, r2
 8009bba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009bbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bc0:	e7b5      	b.n	8009b2e <_strtod_l+0x2b6>
 8009bc2:	2a6e      	cmp	r2, #110	@ 0x6e
 8009bc4:	e7da      	b.n	8009b7c <_strtod_l+0x304>
 8009bc6:	498b      	ldr	r1, [pc, #556]	@ (8009df4 <_strtod_l+0x57c>)
 8009bc8:	a819      	add	r0, sp, #100	@ 0x64
 8009bca:	f001 fb8f 	bl	800b2ec <__match>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f43f aea4 	beq.w	800991c <_strtod_l+0xa4>
 8009bd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bd6:	4988      	ldr	r1, [pc, #544]	@ (8009df8 <_strtod_l+0x580>)
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	a819      	add	r0, sp, #100	@ 0x64
 8009bdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8009bde:	f001 fb85 	bl	800b2ec <__match>
 8009be2:	b910      	cbnz	r0, 8009bea <_strtod_l+0x372>
 8009be4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be6:	3301      	adds	r3, #1
 8009be8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009bea:	f04f 0a00 	mov.w	sl, #0
 8009bee:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009dfc <_strtod_l+0x584>
 8009bf2:	e67a      	b.n	80098ea <_strtod_l+0x72>
 8009bf4:	4882      	ldr	r0, [pc, #520]	@ (8009e00 <_strtod_l+0x588>)
 8009bf6:	f001 f8b7 	bl	800ad68 <nan>
 8009bfa:	4682      	mov	sl, r0
 8009bfc:	468b      	mov	fp, r1
 8009bfe:	e674      	b.n	80098ea <_strtod_l+0x72>
 8009c00:	eba8 0309 	sub.w	r3, r8, r9
 8009c04:	2f00      	cmp	r7, #0
 8009c06:	bf08      	it	eq
 8009c08:	462f      	moveq	r7, r5
 8009c0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c0c:	2d10      	cmp	r5, #16
 8009c0e:	462c      	mov	r4, r5
 8009c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c12:	bfa8      	it	ge
 8009c14:	2410      	movge	r4, #16
 8009c16:	f7f6 fbe5 	bl	80003e4 <__aeabi_ui2d>
 8009c1a:	2d09      	cmp	r5, #9
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	468b      	mov	fp, r1
 8009c20:	dc11      	bgt.n	8009c46 <_strtod_l+0x3ce>
 8009c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f43f ae60 	beq.w	80098ea <_strtod_l+0x72>
 8009c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2c:	dd76      	ble.n	8009d1c <_strtod_l+0x4a4>
 8009c2e:	2b16      	cmp	r3, #22
 8009c30:	dc5d      	bgt.n	8009cee <_strtod_l+0x476>
 8009c32:	4974      	ldr	r1, [pc, #464]	@ (8009e04 <_strtod_l+0x58c>)
 8009c34:	4652      	mov	r2, sl
 8009c36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c3a:	465b      	mov	r3, fp
 8009c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c40:	f7f6 fc4a 	bl	80004d8 <__aeabi_dmul>
 8009c44:	e7d9      	b.n	8009bfa <_strtod_l+0x382>
 8009c46:	4b6f      	ldr	r3, [pc, #444]	@ (8009e04 <_strtod_l+0x58c>)
 8009c48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009c50:	f7f6 fc42 	bl	80004d8 <__aeabi_dmul>
 8009c54:	4682      	mov	sl, r0
 8009c56:	9808      	ldr	r0, [sp, #32]
 8009c58:	468b      	mov	fp, r1
 8009c5a:	f7f6 fbc3 	bl	80003e4 <__aeabi_ui2d>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4650      	mov	r0, sl
 8009c64:	4659      	mov	r1, fp
 8009c66:	f7f6 fa81 	bl	800016c <__adddf3>
 8009c6a:	2d0f      	cmp	r5, #15
 8009c6c:	4682      	mov	sl, r0
 8009c6e:	468b      	mov	fp, r1
 8009c70:	ddd7      	ble.n	8009c22 <_strtod_l+0x3aa>
 8009c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c74:	1b2c      	subs	r4, r5, r4
 8009c76:	441c      	add	r4, r3
 8009c78:	2c00      	cmp	r4, #0
 8009c7a:	f340 8096 	ble.w	8009daa <_strtod_l+0x532>
 8009c7e:	f014 030f 	ands.w	r3, r4, #15
 8009c82:	d00a      	beq.n	8009c9a <_strtod_l+0x422>
 8009c84:	495f      	ldr	r1, [pc, #380]	@ (8009e04 <_strtod_l+0x58c>)
 8009c86:	4652      	mov	r2, sl
 8009c88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c90:	465b      	mov	r3, fp
 8009c92:	f7f6 fc21 	bl	80004d8 <__aeabi_dmul>
 8009c96:	4682      	mov	sl, r0
 8009c98:	468b      	mov	fp, r1
 8009c9a:	f034 040f 	bics.w	r4, r4, #15
 8009c9e:	d073      	beq.n	8009d88 <_strtod_l+0x510>
 8009ca0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009ca4:	dd48      	ble.n	8009d38 <_strtod_l+0x4c0>
 8009ca6:	2400      	movs	r4, #0
 8009ca8:	46a0      	mov	r8, r4
 8009caa:	46a1      	mov	r9, r4
 8009cac:	940a      	str	r4, [sp, #40]	@ 0x28
 8009cae:	2322      	movs	r3, #34	@ 0x22
 8009cb0:	f04f 0a00 	mov.w	sl, #0
 8009cb4:	9a05      	ldr	r2, [sp, #20]
 8009cb6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009dfc <_strtod_l+0x584>
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f43f ae13 	beq.w	80098ea <_strtod_l+0x72>
 8009cc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cc6:	9805      	ldr	r0, [sp, #20]
 8009cc8:	f7ff f94c 	bl	8008f64 <_Bfree>
 8009ccc:	4649      	mov	r1, r9
 8009cce:	9805      	ldr	r0, [sp, #20]
 8009cd0:	f7ff f948 	bl	8008f64 <_Bfree>
 8009cd4:	4641      	mov	r1, r8
 8009cd6:	9805      	ldr	r0, [sp, #20]
 8009cd8:	f7ff f944 	bl	8008f64 <_Bfree>
 8009cdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cde:	9805      	ldr	r0, [sp, #20]
 8009ce0:	f7ff f940 	bl	8008f64 <_Bfree>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	9805      	ldr	r0, [sp, #20]
 8009ce8:	f7ff f93c 	bl	8008f64 <_Bfree>
 8009cec:	e5fd      	b.n	80098ea <_strtod_l+0x72>
 8009cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	dbbc      	blt.n	8009c72 <_strtod_l+0x3fa>
 8009cf8:	4c42      	ldr	r4, [pc, #264]	@ (8009e04 <_strtod_l+0x58c>)
 8009cfa:	f1c5 050f 	rsb	r5, r5, #15
 8009cfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d02:	4652      	mov	r2, sl
 8009d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d08:	465b      	mov	r3, fp
 8009d0a:	f7f6 fbe5 	bl	80004d8 <__aeabi_dmul>
 8009d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d10:	1b5d      	subs	r5, r3, r5
 8009d12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d1a:	e791      	b.n	8009c40 <_strtod_l+0x3c8>
 8009d1c:	3316      	adds	r3, #22
 8009d1e:	dba8      	blt.n	8009c72 <_strtod_l+0x3fa>
 8009d20:	4b38      	ldr	r3, [pc, #224]	@ (8009e04 <_strtod_l+0x58c>)
 8009d22:	eba9 0808 	sub.w	r8, r9, r8
 8009d26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009d30:	4659      	mov	r1, fp
 8009d32:	f7f6 fcfb 	bl	800072c <__aeabi_ddiv>
 8009d36:	e760      	b.n	8009bfa <_strtod_l+0x382>
 8009d38:	4b33      	ldr	r3, [pc, #204]	@ (8009e08 <_strtod_l+0x590>)
 8009d3a:	4650      	mov	r0, sl
 8009d3c:	9308      	str	r3, [sp, #32]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4659      	mov	r1, fp
 8009d42:	461e      	mov	r6, r3
 8009d44:	1124      	asrs	r4, r4, #4
 8009d46:	2c01      	cmp	r4, #1
 8009d48:	dc21      	bgt.n	8009d8e <_strtod_l+0x516>
 8009d4a:	b10b      	cbz	r3, 8009d50 <_strtod_l+0x4d8>
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	468b      	mov	fp, r1
 8009d50:	492d      	ldr	r1, [pc, #180]	@ (8009e08 <_strtod_l+0x590>)
 8009d52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009d56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009d5a:	4652      	mov	r2, sl
 8009d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d60:	465b      	mov	r3, fp
 8009d62:	f7f6 fbb9 	bl	80004d8 <__aeabi_dmul>
 8009d66:	4b25      	ldr	r3, [pc, #148]	@ (8009dfc <_strtod_l+0x584>)
 8009d68:	460a      	mov	r2, r1
 8009d6a:	400b      	ands	r3, r1
 8009d6c:	4927      	ldr	r1, [pc, #156]	@ (8009e0c <_strtod_l+0x594>)
 8009d6e:	4682      	mov	sl, r0
 8009d70:	428b      	cmp	r3, r1
 8009d72:	d898      	bhi.n	8009ca6 <_strtod_l+0x42e>
 8009d74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009d78:	428b      	cmp	r3, r1
 8009d7a:	bf86      	itte	hi
 8009d7c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d80:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009e10 <_strtod_l+0x598>
 8009d84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9308      	str	r3, [sp, #32]
 8009d8c:	e07a      	b.n	8009e84 <_strtod_l+0x60c>
 8009d8e:	07e2      	lsls	r2, r4, #31
 8009d90:	d505      	bpl.n	8009d9e <_strtod_l+0x526>
 8009d92:	9b08      	ldr	r3, [sp, #32]
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f7f6 fb9e 	bl	80004d8 <__aeabi_dmul>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	9a08      	ldr	r2, [sp, #32]
 8009da0:	3601      	adds	r6, #1
 8009da2:	3208      	adds	r2, #8
 8009da4:	1064      	asrs	r4, r4, #1
 8009da6:	9208      	str	r2, [sp, #32]
 8009da8:	e7cd      	b.n	8009d46 <_strtod_l+0x4ce>
 8009daa:	d0ed      	beq.n	8009d88 <_strtod_l+0x510>
 8009dac:	4264      	negs	r4, r4
 8009dae:	f014 020f 	ands.w	r2, r4, #15
 8009db2:	d00a      	beq.n	8009dca <_strtod_l+0x552>
 8009db4:	4b13      	ldr	r3, [pc, #76]	@ (8009e04 <_strtod_l+0x58c>)
 8009db6:	4650      	mov	r0, sl
 8009db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dbc:	4659      	mov	r1, fp
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f7f6 fcb3 	bl	800072c <__aeabi_ddiv>
 8009dc6:	4682      	mov	sl, r0
 8009dc8:	468b      	mov	fp, r1
 8009dca:	1124      	asrs	r4, r4, #4
 8009dcc:	d0dc      	beq.n	8009d88 <_strtod_l+0x510>
 8009dce:	2c1f      	cmp	r4, #31
 8009dd0:	dd20      	ble.n	8009e14 <_strtod_l+0x59c>
 8009dd2:	2400      	movs	r4, #0
 8009dd4:	46a0      	mov	r8, r4
 8009dd6:	46a1      	mov	r9, r4
 8009dd8:	940a      	str	r4, [sp, #40]	@ 0x28
 8009dda:	2322      	movs	r3, #34	@ 0x22
 8009ddc:	9a05      	ldr	r2, [sp, #20]
 8009dde:	f04f 0a00 	mov.w	sl, #0
 8009de2:	f04f 0b00 	mov.w	fp, #0
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	e768      	b.n	8009cbc <_strtod_l+0x444>
 8009dea:	bf00      	nop
 8009dec:	0800b79f 	.word	0x0800b79f
 8009df0:	0800b9b4 	.word	0x0800b9b4
 8009df4:	0800b797 	.word	0x0800b797
 8009df8:	0800b7ce 	.word	0x0800b7ce
 8009dfc:	7ff00000 	.word	0x7ff00000
 8009e00:	0800bb5d 	.word	0x0800bb5d
 8009e04:	0800b8e8 	.word	0x0800b8e8
 8009e08:	0800b8c0 	.word	0x0800b8c0
 8009e0c:	7ca00000 	.word	0x7ca00000
 8009e10:	7fefffff 	.word	0x7fefffff
 8009e14:	f014 0310 	ands.w	r3, r4, #16
 8009e18:	bf18      	it	ne
 8009e1a:	236a      	movne	r3, #106	@ 0x6a
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	9308      	str	r3, [sp, #32]
 8009e20:	4659      	mov	r1, fp
 8009e22:	2300      	movs	r3, #0
 8009e24:	4ea9      	ldr	r6, [pc, #676]	@ (800a0cc <_strtod_l+0x854>)
 8009e26:	07e2      	lsls	r2, r4, #31
 8009e28:	d504      	bpl.n	8009e34 <_strtod_l+0x5bc>
 8009e2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e2e:	f7f6 fb53 	bl	80004d8 <__aeabi_dmul>
 8009e32:	2301      	movs	r3, #1
 8009e34:	1064      	asrs	r4, r4, #1
 8009e36:	f106 0608 	add.w	r6, r6, #8
 8009e3a:	d1f4      	bne.n	8009e26 <_strtod_l+0x5ae>
 8009e3c:	b10b      	cbz	r3, 8009e42 <_strtod_l+0x5ca>
 8009e3e:	4682      	mov	sl, r0
 8009e40:	468b      	mov	fp, r1
 8009e42:	9b08      	ldr	r3, [sp, #32]
 8009e44:	b1b3      	cbz	r3, 8009e74 <_strtod_l+0x5fc>
 8009e46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009e4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	4659      	mov	r1, fp
 8009e52:	dd0f      	ble.n	8009e74 <_strtod_l+0x5fc>
 8009e54:	2b1f      	cmp	r3, #31
 8009e56:	dd57      	ble.n	8009f08 <_strtod_l+0x690>
 8009e58:	2b34      	cmp	r3, #52	@ 0x34
 8009e5a:	bfd8      	it	le
 8009e5c:	f04f 33ff 	movle.w	r3, #4294967295
 8009e60:	f04f 0a00 	mov.w	sl, #0
 8009e64:	bfcf      	iteee	gt
 8009e66:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009e6a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009e6e:	4093      	lslle	r3, r2
 8009e70:	ea03 0b01 	andle.w	fp, r3, r1
 8009e74:	2200      	movs	r2, #0
 8009e76:	2300      	movs	r3, #0
 8009e78:	4650      	mov	r0, sl
 8009e7a:	4659      	mov	r1, fp
 8009e7c:	f7f6 fd94 	bl	80009a8 <__aeabi_dcmpeq>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d1a6      	bne.n	8009dd2 <_strtod_l+0x55a>
 8009e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e86:	463a      	mov	r2, r7
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	9805      	ldr	r0, [sp, #20]
 8009e90:	f7ff f8d0 	bl	8009034 <__s2b>
 8009e94:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e96:	2800      	cmp	r0, #0
 8009e98:	f43f af05 	beq.w	8009ca6 <_strtod_l+0x42e>
 8009e9c:	2400      	movs	r4, #0
 8009e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea0:	eba9 0308 	sub.w	r3, r9, r8
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	bfa8      	it	ge
 8009ea8:	2300      	movge	r3, #0
 8009eaa:	46a0      	mov	r8, r4
 8009eac:	9312      	str	r3, [sp, #72]	@ 0x48
 8009eae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009eb2:	9316      	str	r3, [sp, #88]	@ 0x58
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb6:	9805      	ldr	r0, [sp, #20]
 8009eb8:	6859      	ldr	r1, [r3, #4]
 8009eba:	f7ff f813 	bl	8008ee4 <_Balloc>
 8009ebe:	4681      	mov	r9, r0
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	f43f aef4 	beq.w	8009cae <_strtod_l+0x436>
 8009ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ec8:	300c      	adds	r0, #12
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	f103 010c 	add.w	r1, r3, #12
 8009ed0:	3202      	adds	r2, #2
 8009ed2:	0092      	lsls	r2, r2, #2
 8009ed4:	f000 ff3a 	bl	800ad4c <memcpy>
 8009ed8:	ab1c      	add	r3, sp, #112	@ 0x70
 8009eda:	9301      	str	r3, [sp, #4]
 8009edc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	4652      	mov	r2, sl
 8009ee2:	465b      	mov	r3, fp
 8009ee4:	9805      	ldr	r0, [sp, #20]
 8009ee6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009eea:	f7ff fbd5 	bl	8009698 <__d2b>
 8009eee:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f43f aedc 	beq.w	8009cae <_strtod_l+0x436>
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	9805      	ldr	r0, [sp, #20]
 8009efa:	f7ff f931 	bl	8009160 <__i2b>
 8009efe:	4680      	mov	r8, r0
 8009f00:	b948      	cbnz	r0, 8009f16 <_strtod_l+0x69e>
 8009f02:	f04f 0800 	mov.w	r8, #0
 8009f06:	e6d2      	b.n	8009cae <_strtod_l+0x436>
 8009f08:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f10:	ea03 0a0a 	and.w	sl, r3, sl
 8009f14:	e7ae      	b.n	8009e74 <_strtod_l+0x5fc>
 8009f16:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009f18:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	bfab      	itete	ge
 8009f1e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009f20:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009f22:	18ef      	addge	r7, r5, r3
 8009f24:	1b5e      	sublt	r6, r3, r5
 8009f26:	9b08      	ldr	r3, [sp, #32]
 8009f28:	bfa8      	it	ge
 8009f2a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009f2c:	eba5 0503 	sub.w	r5, r5, r3
 8009f30:	4415      	add	r5, r2
 8009f32:	4b67      	ldr	r3, [pc, #412]	@ (800a0d0 <_strtod_l+0x858>)
 8009f34:	f105 35ff 	add.w	r5, r5, #4294967295
 8009f38:	bfb8      	it	lt
 8009f3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009f42:	da50      	bge.n	8009fe6 <_strtod_l+0x76e>
 8009f44:	1b5b      	subs	r3, r3, r5
 8009f46:	2b1f      	cmp	r3, #31
 8009f48:	f04f 0101 	mov.w	r1, #1
 8009f4c:	eba2 0203 	sub.w	r2, r2, r3
 8009f50:	dc3d      	bgt.n	8009fce <_strtod_l+0x756>
 8009f52:	fa01 f303 	lsl.w	r3, r1, r3
 8009f56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f5c:	18bd      	adds	r5, r7, r2
 8009f5e:	9b08      	ldr	r3, [sp, #32]
 8009f60:	42af      	cmp	r7, r5
 8009f62:	4416      	add	r6, r2
 8009f64:	441e      	add	r6, r3
 8009f66:	463b      	mov	r3, r7
 8009f68:	bfa8      	it	ge
 8009f6a:	462b      	movge	r3, r5
 8009f6c:	42b3      	cmp	r3, r6
 8009f6e:	bfa8      	it	ge
 8009f70:	4633      	movge	r3, r6
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfc2      	ittt	gt
 8009f76:	1aed      	subgt	r5, r5, r3
 8009f78:	1af6      	subgt	r6, r6, r3
 8009f7a:	1aff      	subgt	r7, r7, r3
 8009f7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dd16      	ble.n	8009fb0 <_strtod_l+0x738>
 8009f82:	4641      	mov	r1, r8
 8009f84:	461a      	mov	r2, r3
 8009f86:	9805      	ldr	r0, [sp, #20]
 8009f88:	f7ff f9a8 	bl	80092dc <__pow5mult>
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d0b7      	beq.n	8009f02 <_strtod_l+0x68a>
 8009f92:	4601      	mov	r1, r0
 8009f94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f96:	9805      	ldr	r0, [sp, #20]
 8009f98:	f7ff f8f8 	bl	800918c <__multiply>
 8009f9c:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f43f ae85 	beq.w	8009cae <_strtod_l+0x436>
 8009fa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fa6:	9805      	ldr	r0, [sp, #20]
 8009fa8:	f7fe ffdc 	bl	8008f64 <_Bfree>
 8009fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fb0:	2d00      	cmp	r5, #0
 8009fb2:	dc1d      	bgt.n	8009ff0 <_strtod_l+0x778>
 8009fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dd23      	ble.n	800a002 <_strtod_l+0x78a>
 8009fba:	4649      	mov	r1, r9
 8009fbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009fbe:	9805      	ldr	r0, [sp, #20]
 8009fc0:	f7ff f98c 	bl	80092dc <__pow5mult>
 8009fc4:	4681      	mov	r9, r0
 8009fc6:	b9e0      	cbnz	r0, 800a002 <_strtod_l+0x78a>
 8009fc8:	f04f 0900 	mov.w	r9, #0
 8009fcc:	e66f      	b.n	8009cae <_strtod_l+0x436>
 8009fce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009fd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009fd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009fda:	35e2      	adds	r5, #226	@ 0xe2
 8009fdc:	fa01 f305 	lsl.w	r3, r1, r5
 8009fe0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fe2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009fe4:	e7ba      	b.n	8009f5c <_strtod_l+0x6e4>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fea:	2301      	movs	r3, #1
 8009fec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fee:	e7b5      	b.n	8009f5c <_strtod_l+0x6e4>
 8009ff0:	462a      	mov	r2, r5
 8009ff2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ff4:	9805      	ldr	r0, [sp, #20]
 8009ff6:	f7ff f9cb 	bl	8009390 <__lshift>
 8009ffa:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1d9      	bne.n	8009fb4 <_strtod_l+0x73c>
 800a000:	e655      	b.n	8009cae <_strtod_l+0x436>
 800a002:	2e00      	cmp	r6, #0
 800a004:	dd07      	ble.n	800a016 <_strtod_l+0x79e>
 800a006:	4649      	mov	r1, r9
 800a008:	4632      	mov	r2, r6
 800a00a:	9805      	ldr	r0, [sp, #20]
 800a00c:	f7ff f9c0 	bl	8009390 <__lshift>
 800a010:	4681      	mov	r9, r0
 800a012:	2800      	cmp	r0, #0
 800a014:	d0d8      	beq.n	8009fc8 <_strtod_l+0x750>
 800a016:	2f00      	cmp	r7, #0
 800a018:	dd08      	ble.n	800a02c <_strtod_l+0x7b4>
 800a01a:	4641      	mov	r1, r8
 800a01c:	463a      	mov	r2, r7
 800a01e:	9805      	ldr	r0, [sp, #20]
 800a020:	f7ff f9b6 	bl	8009390 <__lshift>
 800a024:	4680      	mov	r8, r0
 800a026:	2800      	cmp	r0, #0
 800a028:	f43f ae41 	beq.w	8009cae <_strtod_l+0x436>
 800a02c:	464a      	mov	r2, r9
 800a02e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a030:	9805      	ldr	r0, [sp, #20]
 800a032:	f7ff fa35 	bl	80094a0 <__mdiff>
 800a036:	4604      	mov	r4, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	f43f ae38 	beq.w	8009cae <_strtod_l+0x436>
 800a03e:	68c3      	ldr	r3, [r0, #12]
 800a040:	4641      	mov	r1, r8
 800a042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a044:	2300      	movs	r3, #0
 800a046:	60c3      	str	r3, [r0, #12]
 800a048:	f7ff fa0e 	bl	8009468 <__mcmp>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	da45      	bge.n	800a0dc <_strtod_l+0x864>
 800a050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a052:	ea53 030a 	orrs.w	r3, r3, sl
 800a056:	d16b      	bne.n	800a130 <_strtod_l+0x8b8>
 800a058:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d167      	bne.n	800a130 <_strtod_l+0x8b8>
 800a060:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a064:	0d1b      	lsrs	r3, r3, #20
 800a066:	051b      	lsls	r3, r3, #20
 800a068:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a06c:	d960      	bls.n	800a130 <_strtod_l+0x8b8>
 800a06e:	6963      	ldr	r3, [r4, #20]
 800a070:	b913      	cbnz	r3, 800a078 <_strtod_l+0x800>
 800a072:	6923      	ldr	r3, [r4, #16]
 800a074:	2b01      	cmp	r3, #1
 800a076:	dd5b      	ble.n	800a130 <_strtod_l+0x8b8>
 800a078:	4621      	mov	r1, r4
 800a07a:	2201      	movs	r2, #1
 800a07c:	9805      	ldr	r0, [sp, #20]
 800a07e:	f7ff f987 	bl	8009390 <__lshift>
 800a082:	4641      	mov	r1, r8
 800a084:	4604      	mov	r4, r0
 800a086:	f7ff f9ef 	bl	8009468 <__mcmp>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	dd50      	ble.n	800a130 <_strtod_l+0x8b8>
 800a08e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a092:	9a08      	ldr	r2, [sp, #32]
 800a094:	0d1b      	lsrs	r3, r3, #20
 800a096:	051b      	lsls	r3, r3, #20
 800a098:	2a00      	cmp	r2, #0
 800a09a:	d06a      	beq.n	800a172 <_strtod_l+0x8fa>
 800a09c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a0a0:	d867      	bhi.n	800a172 <_strtod_l+0x8fa>
 800a0a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a0a6:	f67f ae98 	bls.w	8009dda <_strtod_l+0x562>
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	4659      	mov	r1, fp
 800a0ae:	4b09      	ldr	r3, [pc, #36]	@ (800a0d4 <_strtod_l+0x85c>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f7f6 fa11 	bl	80004d8 <__aeabi_dmul>
 800a0b6:	4b08      	ldr	r3, [pc, #32]	@ (800a0d8 <_strtod_l+0x860>)
 800a0b8:	4682      	mov	sl, r0
 800a0ba:	400b      	ands	r3, r1
 800a0bc:	468b      	mov	fp, r1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f47f ae00 	bne.w	8009cc4 <_strtod_l+0x44c>
 800a0c4:	2322      	movs	r3, #34	@ 0x22
 800a0c6:	9a05      	ldr	r2, [sp, #20]
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	e5fb      	b.n	8009cc4 <_strtod_l+0x44c>
 800a0cc:	0800b9e0 	.word	0x0800b9e0
 800a0d0:	fffffc02 	.word	0xfffffc02
 800a0d4:	39500000 	.word	0x39500000
 800a0d8:	7ff00000 	.word	0x7ff00000
 800a0dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a0e0:	d165      	bne.n	800a1ae <_strtod_l+0x936>
 800a0e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0e8:	b35a      	cbz	r2, 800a142 <_strtod_l+0x8ca>
 800a0ea:	4a99      	ldr	r2, [pc, #612]	@ (800a350 <_strtod_l+0xad8>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d12b      	bne.n	800a148 <_strtod_l+0x8d0>
 800a0f0:	9b08      	ldr	r3, [sp, #32]
 800a0f2:	4651      	mov	r1, sl
 800a0f4:	b303      	cbz	r3, 800a138 <_strtod_l+0x8c0>
 800a0f6:	465a      	mov	r2, fp
 800a0f8:	4b96      	ldr	r3, [pc, #600]	@ (800a354 <_strtod_l+0xadc>)
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a100:	f04f 32ff 	mov.w	r2, #4294967295
 800a104:	d81b      	bhi.n	800a13e <_strtod_l+0x8c6>
 800a106:	0d1b      	lsrs	r3, r3, #20
 800a108:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a10c:	fa02 f303 	lsl.w	r3, r2, r3
 800a110:	4299      	cmp	r1, r3
 800a112:	d119      	bne.n	800a148 <_strtod_l+0x8d0>
 800a114:	4b90      	ldr	r3, [pc, #576]	@ (800a358 <_strtod_l+0xae0>)
 800a116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a118:	429a      	cmp	r2, r3
 800a11a:	d102      	bne.n	800a122 <_strtod_l+0x8aa>
 800a11c:	3101      	adds	r1, #1
 800a11e:	f43f adc6 	beq.w	8009cae <_strtod_l+0x436>
 800a122:	f04f 0a00 	mov.w	sl, #0
 800a126:	4b8b      	ldr	r3, [pc, #556]	@ (800a354 <_strtod_l+0xadc>)
 800a128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a12a:	401a      	ands	r2, r3
 800a12c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a130:	9b08      	ldr	r3, [sp, #32]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1b9      	bne.n	800a0aa <_strtod_l+0x832>
 800a136:	e5c5      	b.n	8009cc4 <_strtod_l+0x44c>
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	e7e8      	b.n	800a110 <_strtod_l+0x898>
 800a13e:	4613      	mov	r3, r2
 800a140:	e7e6      	b.n	800a110 <_strtod_l+0x898>
 800a142:	ea53 030a 	orrs.w	r3, r3, sl
 800a146:	d0a2      	beq.n	800a08e <_strtod_l+0x816>
 800a148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a14a:	b1db      	cbz	r3, 800a184 <_strtod_l+0x90c>
 800a14c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a14e:	4213      	tst	r3, r2
 800a150:	d0ee      	beq.n	800a130 <_strtod_l+0x8b8>
 800a152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a154:	4650      	mov	r0, sl
 800a156:	4659      	mov	r1, fp
 800a158:	9a08      	ldr	r2, [sp, #32]
 800a15a:	b1bb      	cbz	r3, 800a18c <_strtod_l+0x914>
 800a15c:	f7ff fb68 	bl	8009830 <sulp>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a168:	f7f6 f800 	bl	800016c <__adddf3>
 800a16c:	4682      	mov	sl, r0
 800a16e:	468b      	mov	fp, r1
 800a170:	e7de      	b.n	800a130 <_strtod_l+0x8b8>
 800a172:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a176:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a17a:	f04f 3aff 	mov.w	sl, #4294967295
 800a17e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a182:	e7d5      	b.n	800a130 <_strtod_l+0x8b8>
 800a184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a186:	ea13 0f0a 	tst.w	r3, sl
 800a18a:	e7e1      	b.n	800a150 <_strtod_l+0x8d8>
 800a18c:	f7ff fb50 	bl	8009830 <sulp>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a198:	f7f5 ffe6 	bl	8000168 <__aeabi_dsub>
 800a19c:	2200      	movs	r2, #0
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	468b      	mov	fp, r1
 800a1a4:	f7f6 fc00 	bl	80009a8 <__aeabi_dcmpeq>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d0c1      	beq.n	800a130 <_strtod_l+0x8b8>
 800a1ac:	e615      	b.n	8009dda <_strtod_l+0x562>
 800a1ae:	4641      	mov	r1, r8
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f7ff fac9 	bl	8009748 <__ratio>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a1bc:	4606      	mov	r6, r0
 800a1be:	460f      	mov	r7, r1
 800a1c0:	f7f6 fc06 	bl	80009d0 <__aeabi_dcmple>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d06d      	beq.n	800a2a4 <_strtod_l+0xa2c>
 800a1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d178      	bne.n	800a2c0 <_strtod_l+0xa48>
 800a1ce:	f1ba 0f00 	cmp.w	sl, #0
 800a1d2:	d156      	bne.n	800a282 <_strtod_l+0xa0a>
 800a1d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d158      	bne.n	800a290 <_strtod_l+0xa18>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	4b5d      	ldr	r3, [pc, #372]	@ (800a35c <_strtod_l+0xae4>)
 800a1e6:	f7f6 fbe9 	bl	80009bc <__aeabi_dcmplt>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d157      	bne.n	800a29e <_strtod_l+0xa26>
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4b5a      	ldr	r3, [pc, #360]	@ (800a360 <_strtod_l+0xae8>)
 800a1f6:	f7f6 f96f 	bl	80004d8 <__aeabi_dmul>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a202:	9606      	str	r6, [sp, #24]
 800a204:	9307      	str	r3, [sp, #28]
 800a206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a20a:	4d52      	ldr	r5, [pc, #328]	@ (800a354 <_strtod_l+0xadc>)
 800a20c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a212:	401d      	ands	r5, r3
 800a214:	4b53      	ldr	r3, [pc, #332]	@ (800a364 <_strtod_l+0xaec>)
 800a216:	429d      	cmp	r5, r3
 800a218:	f040 80aa 	bne.w	800a370 <_strtod_l+0xaf8>
 800a21c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a21e:	4650      	mov	r0, sl
 800a220:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a224:	4659      	mov	r1, fp
 800a226:	f7ff f9cf 	bl	80095c8 <__ulp>
 800a22a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a22e:	f7f6 f953 	bl	80004d8 <__aeabi_dmul>
 800a232:	4652      	mov	r2, sl
 800a234:	465b      	mov	r3, fp
 800a236:	f7f5 ff99 	bl	800016c <__adddf3>
 800a23a:	460b      	mov	r3, r1
 800a23c:	4945      	ldr	r1, [pc, #276]	@ (800a354 <_strtod_l+0xadc>)
 800a23e:	4a4a      	ldr	r2, [pc, #296]	@ (800a368 <_strtod_l+0xaf0>)
 800a240:	4019      	ands	r1, r3
 800a242:	4291      	cmp	r1, r2
 800a244:	4682      	mov	sl, r0
 800a246:	d942      	bls.n	800a2ce <_strtod_l+0xa56>
 800a248:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a24a:	4b43      	ldr	r3, [pc, #268]	@ (800a358 <_strtod_l+0xae0>)
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d103      	bne.n	800a258 <_strtod_l+0x9e0>
 800a250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a252:	3301      	adds	r3, #1
 800a254:	f43f ad2b 	beq.w	8009cae <_strtod_l+0x436>
 800a258:	f04f 3aff 	mov.w	sl, #4294967295
 800a25c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a358 <_strtod_l+0xae0>
 800a260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a262:	9805      	ldr	r0, [sp, #20]
 800a264:	f7fe fe7e 	bl	8008f64 <_Bfree>
 800a268:	4649      	mov	r1, r9
 800a26a:	9805      	ldr	r0, [sp, #20]
 800a26c:	f7fe fe7a 	bl	8008f64 <_Bfree>
 800a270:	4641      	mov	r1, r8
 800a272:	9805      	ldr	r0, [sp, #20]
 800a274:	f7fe fe76 	bl	8008f64 <_Bfree>
 800a278:	4621      	mov	r1, r4
 800a27a:	9805      	ldr	r0, [sp, #20]
 800a27c:	f7fe fe72 	bl	8008f64 <_Bfree>
 800a280:	e618      	b.n	8009eb4 <_strtod_l+0x63c>
 800a282:	f1ba 0f01 	cmp.w	sl, #1
 800a286:	d103      	bne.n	800a290 <_strtod_l+0xa18>
 800a288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f43f ada5 	beq.w	8009dda <_strtod_l+0x562>
 800a290:	2200      	movs	r2, #0
 800a292:	4b36      	ldr	r3, [pc, #216]	@ (800a36c <_strtod_l+0xaf4>)
 800a294:	2600      	movs	r6, #0
 800a296:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a29a:	4f30      	ldr	r7, [pc, #192]	@ (800a35c <_strtod_l+0xae4>)
 800a29c:	e7b3      	b.n	800a206 <_strtod_l+0x98e>
 800a29e:	2600      	movs	r6, #0
 800a2a0:	4f2f      	ldr	r7, [pc, #188]	@ (800a360 <_strtod_l+0xae8>)
 800a2a2:	e7ac      	b.n	800a1fe <_strtod_l+0x986>
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	4b2d      	ldr	r3, [pc, #180]	@ (800a360 <_strtod_l+0xae8>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f7f6 f914 	bl	80004d8 <__aeabi_dmul>
 800a2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	460f      	mov	r7, r1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0a1      	beq.n	800a1fe <_strtod_l+0x986>
 800a2ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a2be:	e7a2      	b.n	800a206 <_strtod_l+0x98e>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4b26      	ldr	r3, [pc, #152]	@ (800a35c <_strtod_l+0xae4>)
 800a2c4:	4616      	mov	r6, r2
 800a2c6:	461f      	mov	r7, r3
 800a2c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2cc:	e79b      	b.n	800a206 <_strtod_l+0x98e>
 800a2ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a2d2:	9b08      	ldr	r3, [sp, #32]
 800a2d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1c1      	bne.n	800a260 <_strtod_l+0x9e8>
 800a2dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2e0:	0d1b      	lsrs	r3, r3, #20
 800a2e2:	051b      	lsls	r3, r3, #20
 800a2e4:	429d      	cmp	r5, r3
 800a2e6:	d1bb      	bne.n	800a260 <_strtod_l+0x9e8>
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 fe9a 	bl	8001024 <__aeabi_d2lz>
 800a2f0:	f7f6 f8c4 	bl	800047c <__aeabi_l2d>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f5 ff34 	bl	8000168 <__aeabi_dsub>
 800a300:	460b      	mov	r3, r1
 800a302:	4602      	mov	r2, r0
 800a304:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a308:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a30e:	ea46 060a 	orr.w	r6, r6, sl
 800a312:	431e      	orrs	r6, r3
 800a314:	d069      	beq.n	800a3ea <_strtod_l+0xb72>
 800a316:	a30a      	add	r3, pc, #40	@ (adr r3, 800a340 <_strtod_l+0xac8>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f6 fb4e 	bl	80009bc <__aeabi_dcmplt>
 800a320:	2800      	cmp	r0, #0
 800a322:	f47f accf 	bne.w	8009cc4 <_strtod_l+0x44c>
 800a326:	a308      	add	r3, pc, #32	@ (adr r3, 800a348 <_strtod_l+0xad0>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a330:	f7f6 fb62 	bl	80009f8 <__aeabi_dcmpgt>
 800a334:	2800      	cmp	r0, #0
 800a336:	d093      	beq.n	800a260 <_strtod_l+0x9e8>
 800a338:	e4c4      	b.n	8009cc4 <_strtod_l+0x44c>
 800a33a:	bf00      	nop
 800a33c:	f3af 8000 	nop.w
 800a340:	94a03595 	.word	0x94a03595
 800a344:	3fdfffff 	.word	0x3fdfffff
 800a348:	35afe535 	.word	0x35afe535
 800a34c:	3fe00000 	.word	0x3fe00000
 800a350:	000fffff 	.word	0x000fffff
 800a354:	7ff00000 	.word	0x7ff00000
 800a358:	7fefffff 	.word	0x7fefffff
 800a35c:	3ff00000 	.word	0x3ff00000
 800a360:	3fe00000 	.word	0x3fe00000
 800a364:	7fe00000 	.word	0x7fe00000
 800a368:	7c9fffff 	.word	0x7c9fffff
 800a36c:	bff00000 	.word	0xbff00000
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	b323      	cbz	r3, 800a3be <_strtod_l+0xb46>
 800a374:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a378:	d821      	bhi.n	800a3be <_strtod_l+0xb46>
 800a37a:	a327      	add	r3, pc, #156	@ (adr r3, 800a418 <_strtod_l+0xba0>)
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	4630      	mov	r0, r6
 800a382:	4639      	mov	r1, r7
 800a384:	f7f6 fb24 	bl	80009d0 <__aeabi_dcmple>
 800a388:	b1a0      	cbz	r0, 800a3b4 <_strtod_l+0xb3c>
 800a38a:	4639      	mov	r1, r7
 800a38c:	4630      	mov	r0, r6
 800a38e:	f7f6 fb7b 	bl	8000a88 <__aeabi_d2uiz>
 800a392:	2801      	cmp	r0, #1
 800a394:	bf38      	it	cc
 800a396:	2001      	movcc	r0, #1
 800a398:	f7f6 f824 	bl	80003e4 <__aeabi_ui2d>
 800a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a39e:	4606      	mov	r6, r0
 800a3a0:	460f      	mov	r7, r1
 800a3a2:	b9fb      	cbnz	r3, 800a3e4 <_strtod_l+0xb6c>
 800a3a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3a8:	9014      	str	r0, [sp, #80]	@ 0x50
 800a3aa:	9315      	str	r3, [sp, #84]	@ 0x54
 800a3ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a3b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a3b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3b6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a3ba:	1b5b      	subs	r3, r3, r5
 800a3bc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a3be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3c2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a3c6:	f7ff f8ff 	bl	80095c8 <__ulp>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a3da:	f7f5 fec7 	bl	800016c <__adddf3>
 800a3de:	4682      	mov	sl, r0
 800a3e0:	468b      	mov	fp, r1
 800a3e2:	e776      	b.n	800a2d2 <_strtod_l+0xa5a>
 800a3e4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a3e8:	e7e0      	b.n	800a3ac <_strtod_l+0xb34>
 800a3ea:	a30d      	add	r3, pc, #52	@ (adr r3, 800a420 <_strtod_l+0xba8>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f6 fae4 	bl	80009bc <__aeabi_dcmplt>
 800a3f4:	e79e      	b.n	800a334 <_strtod_l+0xabc>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3fc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	f7ff ba77 	b.w	80098f2 <_strtod_l+0x7a>
 800a404:	2a65      	cmp	r2, #101	@ 0x65
 800a406:	f43f ab6e 	beq.w	8009ae6 <_strtod_l+0x26e>
 800a40a:	2a45      	cmp	r2, #69	@ 0x45
 800a40c:	f43f ab6b 	beq.w	8009ae6 <_strtod_l+0x26e>
 800a410:	2301      	movs	r3, #1
 800a412:	f7ff bba6 	b.w	8009b62 <_strtod_l+0x2ea>
 800a416:	bf00      	nop
 800a418:	ffc00000 	.word	0xffc00000
 800a41c:	41dfffff 	.word	0x41dfffff
 800a420:	94a03595 	.word	0x94a03595
 800a424:	3fcfffff 	.word	0x3fcfffff

0800a428 <_strtod_r>:
 800a428:	4b01      	ldr	r3, [pc, #4]	@ (800a430 <_strtod_r+0x8>)
 800a42a:	f7ff ba25 	b.w	8009878 <_strtod_l>
 800a42e:	bf00      	nop
 800a430:	20000068 	.word	0x20000068

0800a434 <_strtol_l.constprop.0>:
 800a434:	2b24      	cmp	r3, #36	@ 0x24
 800a436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a43a:	4686      	mov	lr, r0
 800a43c:	4690      	mov	r8, r2
 800a43e:	d801      	bhi.n	800a444 <_strtol_l.constprop.0+0x10>
 800a440:	2b01      	cmp	r3, #1
 800a442:	d106      	bne.n	800a452 <_strtol_l.constprop.0+0x1e>
 800a444:	f7fd fdc0 	bl	8007fc8 <__errno>
 800a448:	2316      	movs	r3, #22
 800a44a:	6003      	str	r3, [r0, #0]
 800a44c:	2000      	movs	r0, #0
 800a44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a452:	460d      	mov	r5, r1
 800a454:	4833      	ldr	r0, [pc, #204]	@ (800a524 <_strtol_l.constprop.0+0xf0>)
 800a456:	462a      	mov	r2, r5
 800a458:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a45c:	5d06      	ldrb	r6, [r0, r4]
 800a45e:	f016 0608 	ands.w	r6, r6, #8
 800a462:	d1f8      	bne.n	800a456 <_strtol_l.constprop.0+0x22>
 800a464:	2c2d      	cmp	r4, #45	@ 0x2d
 800a466:	d12d      	bne.n	800a4c4 <_strtol_l.constprop.0+0x90>
 800a468:	2601      	movs	r6, #1
 800a46a:	782c      	ldrb	r4, [r5, #0]
 800a46c:	1c95      	adds	r5, r2, #2
 800a46e:	f033 0210 	bics.w	r2, r3, #16
 800a472:	d109      	bne.n	800a488 <_strtol_l.constprop.0+0x54>
 800a474:	2c30      	cmp	r4, #48	@ 0x30
 800a476:	d12a      	bne.n	800a4ce <_strtol_l.constprop.0+0x9a>
 800a478:	782a      	ldrb	r2, [r5, #0]
 800a47a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a47e:	2a58      	cmp	r2, #88	@ 0x58
 800a480:	d125      	bne.n	800a4ce <_strtol_l.constprop.0+0x9a>
 800a482:	2310      	movs	r3, #16
 800a484:	786c      	ldrb	r4, [r5, #1]
 800a486:	3502      	adds	r5, #2
 800a488:	2200      	movs	r2, #0
 800a48a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a48e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a492:	fbbc f9f3 	udiv	r9, ip, r3
 800a496:	4610      	mov	r0, r2
 800a498:	fb03 ca19 	mls	sl, r3, r9, ip
 800a49c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a4a0:	2f09      	cmp	r7, #9
 800a4a2:	d81b      	bhi.n	800a4dc <_strtol_l.constprop.0+0xa8>
 800a4a4:	463c      	mov	r4, r7
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	dd27      	ble.n	800a4fa <_strtol_l.constprop.0+0xc6>
 800a4aa:	1c57      	adds	r7, r2, #1
 800a4ac:	d007      	beq.n	800a4be <_strtol_l.constprop.0+0x8a>
 800a4ae:	4581      	cmp	r9, r0
 800a4b0:	d320      	bcc.n	800a4f4 <_strtol_l.constprop.0+0xc0>
 800a4b2:	d101      	bne.n	800a4b8 <_strtol_l.constprop.0+0x84>
 800a4b4:	45a2      	cmp	sl, r4
 800a4b6:	db1d      	blt.n	800a4f4 <_strtol_l.constprop.0+0xc0>
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	fb00 4003 	mla	r0, r0, r3, r4
 800a4be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4c2:	e7eb      	b.n	800a49c <_strtol_l.constprop.0+0x68>
 800a4c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a4c6:	bf04      	itt	eq
 800a4c8:	782c      	ldrbeq	r4, [r5, #0]
 800a4ca:	1c95      	addeq	r5, r2, #2
 800a4cc:	e7cf      	b.n	800a46e <_strtol_l.constprop.0+0x3a>
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1da      	bne.n	800a488 <_strtol_l.constprop.0+0x54>
 800a4d2:	2c30      	cmp	r4, #48	@ 0x30
 800a4d4:	bf0c      	ite	eq
 800a4d6:	2308      	moveq	r3, #8
 800a4d8:	230a      	movne	r3, #10
 800a4da:	e7d5      	b.n	800a488 <_strtol_l.constprop.0+0x54>
 800a4dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a4e0:	2f19      	cmp	r7, #25
 800a4e2:	d801      	bhi.n	800a4e8 <_strtol_l.constprop.0+0xb4>
 800a4e4:	3c37      	subs	r4, #55	@ 0x37
 800a4e6:	e7de      	b.n	800a4a6 <_strtol_l.constprop.0+0x72>
 800a4e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a4ec:	2f19      	cmp	r7, #25
 800a4ee:	d804      	bhi.n	800a4fa <_strtol_l.constprop.0+0xc6>
 800a4f0:	3c57      	subs	r4, #87	@ 0x57
 800a4f2:	e7d8      	b.n	800a4a6 <_strtol_l.constprop.0+0x72>
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	e7e1      	b.n	800a4be <_strtol_l.constprop.0+0x8a>
 800a4fa:	1c53      	adds	r3, r2, #1
 800a4fc:	d108      	bne.n	800a510 <_strtol_l.constprop.0+0xdc>
 800a4fe:	2322      	movs	r3, #34	@ 0x22
 800a500:	4660      	mov	r0, ip
 800a502:	f8ce 3000 	str.w	r3, [lr]
 800a506:	f1b8 0f00 	cmp.w	r8, #0
 800a50a:	d0a0      	beq.n	800a44e <_strtol_l.constprop.0+0x1a>
 800a50c:	1e69      	subs	r1, r5, #1
 800a50e:	e006      	b.n	800a51e <_strtol_l.constprop.0+0xea>
 800a510:	b106      	cbz	r6, 800a514 <_strtol_l.constprop.0+0xe0>
 800a512:	4240      	negs	r0, r0
 800a514:	f1b8 0f00 	cmp.w	r8, #0
 800a518:	d099      	beq.n	800a44e <_strtol_l.constprop.0+0x1a>
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	d1f6      	bne.n	800a50c <_strtol_l.constprop.0+0xd8>
 800a51e:	f8c8 1000 	str.w	r1, [r8]
 800a522:	e794      	b.n	800a44e <_strtol_l.constprop.0+0x1a>
 800a524:	0800ba09 	.word	0x0800ba09

0800a528 <_strtol_r>:
 800a528:	f7ff bf84 	b.w	800a434 <_strtol_l.constprop.0>

0800a52c <__ssputs_r>:
 800a52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	461f      	mov	r7, r3
 800a532:	688e      	ldr	r6, [r1, #8]
 800a534:	4682      	mov	sl, r0
 800a536:	42be      	cmp	r6, r7
 800a538:	460c      	mov	r4, r1
 800a53a:	4690      	mov	r8, r2
 800a53c:	680b      	ldr	r3, [r1, #0]
 800a53e:	d82d      	bhi.n	800a59c <__ssputs_r+0x70>
 800a540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a544:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a548:	d026      	beq.n	800a598 <__ssputs_r+0x6c>
 800a54a:	6965      	ldr	r5, [r4, #20]
 800a54c:	6909      	ldr	r1, [r1, #16]
 800a54e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a552:	eba3 0901 	sub.w	r9, r3, r1
 800a556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a55a:	1c7b      	adds	r3, r7, #1
 800a55c:	444b      	add	r3, r9
 800a55e:	106d      	asrs	r5, r5, #1
 800a560:	429d      	cmp	r5, r3
 800a562:	bf38      	it	cc
 800a564:	461d      	movcc	r5, r3
 800a566:	0553      	lsls	r3, r2, #21
 800a568:	d527      	bpl.n	800a5ba <__ssputs_r+0x8e>
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7fe fc2e 	bl	8008dcc <_malloc_r>
 800a570:	4606      	mov	r6, r0
 800a572:	b360      	cbz	r0, 800a5ce <__ssputs_r+0xa2>
 800a574:	464a      	mov	r2, r9
 800a576:	6921      	ldr	r1, [r4, #16]
 800a578:	f000 fbe8 	bl	800ad4c <memcpy>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	6126      	str	r6, [r4, #16]
 800a58a:	444e      	add	r6, r9
 800a58c:	6026      	str	r6, [r4, #0]
 800a58e:	463e      	mov	r6, r7
 800a590:	6165      	str	r5, [r4, #20]
 800a592:	eba5 0509 	sub.w	r5, r5, r9
 800a596:	60a5      	str	r5, [r4, #8]
 800a598:	42be      	cmp	r6, r7
 800a59a:	d900      	bls.n	800a59e <__ssputs_r+0x72>
 800a59c:	463e      	mov	r6, r7
 800a59e:	4632      	mov	r2, r6
 800a5a0:	4641      	mov	r1, r8
 800a5a2:	6820      	ldr	r0, [r4, #0]
 800a5a4:	f000 fb96 	bl	800acd4 <memmove>
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	68a3      	ldr	r3, [r4, #8]
 800a5ac:	1b9b      	subs	r3, r3, r6
 800a5ae:	60a3      	str	r3, [r4, #8]
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	4433      	add	r3, r6
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	f000 ff57 	bl	800b46e <_realloc_r>
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d1e0      	bne.n	800a588 <__ssputs_r+0x5c>
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	6921      	ldr	r1, [r4, #16]
 800a5ca:	f7fe fb8d 	bl	8008ce8 <_free_r>
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	f8ca 3000 	str.w	r3, [sl]
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	e7e9      	b.n	800a5b6 <__ssputs_r+0x8a>
	...

0800a5e4 <_svfiprintf_r>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	4698      	mov	r8, r3
 800a5ea:	898b      	ldrh	r3, [r1, #12]
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	061b      	lsls	r3, r3, #24
 800a5f0:	460d      	mov	r5, r1
 800a5f2:	4614      	mov	r4, r2
 800a5f4:	b09d      	sub	sp, #116	@ 0x74
 800a5f6:	d510      	bpl.n	800a61a <_svfiprintf_r+0x36>
 800a5f8:	690b      	ldr	r3, [r1, #16]
 800a5fa:	b973      	cbnz	r3, 800a61a <_svfiprintf_r+0x36>
 800a5fc:	2140      	movs	r1, #64	@ 0x40
 800a5fe:	f7fe fbe5 	bl	8008dcc <_malloc_r>
 800a602:	6028      	str	r0, [r5, #0]
 800a604:	6128      	str	r0, [r5, #16]
 800a606:	b930      	cbnz	r0, 800a616 <_svfiprintf_r+0x32>
 800a608:	230c      	movs	r3, #12
 800a60a:	603b      	str	r3, [r7, #0]
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	b01d      	add	sp, #116	@ 0x74
 800a612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a616:	2340      	movs	r3, #64	@ 0x40
 800a618:	616b      	str	r3, [r5, #20]
 800a61a:	2300      	movs	r3, #0
 800a61c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a61e:	2320      	movs	r3, #32
 800a620:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a624:	2330      	movs	r3, #48	@ 0x30
 800a626:	f04f 0901 	mov.w	r9, #1
 800a62a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a7c8 <_svfiprintf_r+0x1e4>
 800a632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a636:	4623      	mov	r3, r4
 800a638:	469a      	mov	sl, r3
 800a63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a63e:	b10a      	cbz	r2, 800a644 <_svfiprintf_r+0x60>
 800a640:	2a25      	cmp	r2, #37	@ 0x25
 800a642:	d1f9      	bne.n	800a638 <_svfiprintf_r+0x54>
 800a644:	ebba 0b04 	subs.w	fp, sl, r4
 800a648:	d00b      	beq.n	800a662 <_svfiprintf_r+0x7e>
 800a64a:	465b      	mov	r3, fp
 800a64c:	4622      	mov	r2, r4
 800a64e:	4629      	mov	r1, r5
 800a650:	4638      	mov	r0, r7
 800a652:	f7ff ff6b 	bl	800a52c <__ssputs_r>
 800a656:	3001      	adds	r0, #1
 800a658:	f000 80a7 	beq.w	800a7aa <_svfiprintf_r+0x1c6>
 800a65c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a65e:	445a      	add	r2, fp
 800a660:	9209      	str	r2, [sp, #36]	@ 0x24
 800a662:	f89a 3000 	ldrb.w	r3, [sl]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 809f 	beq.w	800a7aa <_svfiprintf_r+0x1c6>
 800a66c:	2300      	movs	r3, #0
 800a66e:	f04f 32ff 	mov.w	r2, #4294967295
 800a672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a676:	f10a 0a01 	add.w	sl, sl, #1
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	9307      	str	r3, [sp, #28]
 800a67e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a682:	931a      	str	r3, [sp, #104]	@ 0x68
 800a684:	4654      	mov	r4, sl
 800a686:	2205      	movs	r2, #5
 800a688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68c:	484e      	ldr	r0, [pc, #312]	@ (800a7c8 <_svfiprintf_r+0x1e4>)
 800a68e:	f7fd fcc8 	bl	8008022 <memchr>
 800a692:	9a04      	ldr	r2, [sp, #16]
 800a694:	b9d8      	cbnz	r0, 800a6ce <_svfiprintf_r+0xea>
 800a696:	06d0      	lsls	r0, r2, #27
 800a698:	bf44      	itt	mi
 800a69a:	2320      	movmi	r3, #32
 800a69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6a0:	0711      	lsls	r1, r2, #28
 800a6a2:	bf44      	itt	mi
 800a6a4:	232b      	movmi	r3, #43	@ 0x2b
 800a6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6b0:	d015      	beq.n	800a6de <_svfiprintf_r+0xfa>
 800a6b2:	4654      	mov	r4, sl
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	f04f 0c0a 	mov.w	ip, #10
 800a6ba:	9a07      	ldr	r2, [sp, #28]
 800a6bc:	4621      	mov	r1, r4
 800a6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c2:	3b30      	subs	r3, #48	@ 0x30
 800a6c4:	2b09      	cmp	r3, #9
 800a6c6:	d94b      	bls.n	800a760 <_svfiprintf_r+0x17c>
 800a6c8:	b1b0      	cbz	r0, 800a6f8 <_svfiprintf_r+0x114>
 800a6ca:	9207      	str	r2, [sp, #28]
 800a6cc:	e014      	b.n	800a6f8 <_svfiprintf_r+0x114>
 800a6ce:	eba0 0308 	sub.w	r3, r0, r8
 800a6d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	46a2      	mov	sl, r4
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	e7d2      	b.n	800a684 <_svfiprintf_r+0xa0>
 800a6de:	9b03      	ldr	r3, [sp, #12]
 800a6e0:	1d19      	adds	r1, r3, #4
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	9103      	str	r1, [sp, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bfbb      	ittet	lt
 800a6ea:	425b      	neglt	r3, r3
 800a6ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f0:	9307      	strge	r3, [sp, #28]
 800a6f2:	9307      	strlt	r3, [sp, #28]
 800a6f4:	bfb8      	it	lt
 800a6f6:	9204      	strlt	r2, [sp, #16]
 800a6f8:	7823      	ldrb	r3, [r4, #0]
 800a6fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6fc:	d10a      	bne.n	800a714 <_svfiprintf_r+0x130>
 800a6fe:	7863      	ldrb	r3, [r4, #1]
 800a700:	2b2a      	cmp	r3, #42	@ 0x2a
 800a702:	d132      	bne.n	800a76a <_svfiprintf_r+0x186>
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	3402      	adds	r4, #2
 800a708:	1d1a      	adds	r2, r3, #4
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	9203      	str	r2, [sp, #12]
 800a70e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a712:	9305      	str	r3, [sp, #20]
 800a714:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a7cc <_svfiprintf_r+0x1e8>
 800a718:	2203      	movs	r2, #3
 800a71a:	4650      	mov	r0, sl
 800a71c:	7821      	ldrb	r1, [r4, #0]
 800a71e:	f7fd fc80 	bl	8008022 <memchr>
 800a722:	b138      	cbz	r0, 800a734 <_svfiprintf_r+0x150>
 800a724:	2240      	movs	r2, #64	@ 0x40
 800a726:	9b04      	ldr	r3, [sp, #16]
 800a728:	eba0 000a 	sub.w	r0, r0, sl
 800a72c:	4082      	lsls	r2, r0
 800a72e:	4313      	orrs	r3, r2
 800a730:	3401      	adds	r4, #1
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a738:	2206      	movs	r2, #6
 800a73a:	4825      	ldr	r0, [pc, #148]	@ (800a7d0 <_svfiprintf_r+0x1ec>)
 800a73c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a740:	f7fd fc6f 	bl	8008022 <memchr>
 800a744:	2800      	cmp	r0, #0
 800a746:	d036      	beq.n	800a7b6 <_svfiprintf_r+0x1d2>
 800a748:	4b22      	ldr	r3, [pc, #136]	@ (800a7d4 <_svfiprintf_r+0x1f0>)
 800a74a:	bb1b      	cbnz	r3, 800a794 <_svfiprintf_r+0x1b0>
 800a74c:	9b03      	ldr	r3, [sp, #12]
 800a74e:	3307      	adds	r3, #7
 800a750:	f023 0307 	bic.w	r3, r3, #7
 800a754:	3308      	adds	r3, #8
 800a756:	9303      	str	r3, [sp, #12]
 800a758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a75a:	4433      	add	r3, r6
 800a75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a75e:	e76a      	b.n	800a636 <_svfiprintf_r+0x52>
 800a760:	460c      	mov	r4, r1
 800a762:	2001      	movs	r0, #1
 800a764:	fb0c 3202 	mla	r2, ip, r2, r3
 800a768:	e7a8      	b.n	800a6bc <_svfiprintf_r+0xd8>
 800a76a:	2300      	movs	r3, #0
 800a76c:	f04f 0c0a 	mov.w	ip, #10
 800a770:	4619      	mov	r1, r3
 800a772:	3401      	adds	r4, #1
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	4620      	mov	r0, r4
 800a778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a77c:	3a30      	subs	r2, #48	@ 0x30
 800a77e:	2a09      	cmp	r2, #9
 800a780:	d903      	bls.n	800a78a <_svfiprintf_r+0x1a6>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0c6      	beq.n	800a714 <_svfiprintf_r+0x130>
 800a786:	9105      	str	r1, [sp, #20]
 800a788:	e7c4      	b.n	800a714 <_svfiprintf_r+0x130>
 800a78a:	4604      	mov	r4, r0
 800a78c:	2301      	movs	r3, #1
 800a78e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a792:	e7f0      	b.n	800a776 <_svfiprintf_r+0x192>
 800a794:	ab03      	add	r3, sp, #12
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	462a      	mov	r2, r5
 800a79a:	4638      	mov	r0, r7
 800a79c:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d8 <_svfiprintf_r+0x1f4>)
 800a79e:	a904      	add	r1, sp, #16
 800a7a0:	f7fc fcba 	bl	8007118 <_printf_float>
 800a7a4:	1c42      	adds	r2, r0, #1
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	d1d6      	bne.n	800a758 <_svfiprintf_r+0x174>
 800a7aa:	89ab      	ldrh	r3, [r5, #12]
 800a7ac:	065b      	lsls	r3, r3, #25
 800a7ae:	f53f af2d 	bmi.w	800a60c <_svfiprintf_r+0x28>
 800a7b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7b4:	e72c      	b.n	800a610 <_svfiprintf_r+0x2c>
 800a7b6:	ab03      	add	r3, sp, #12
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4638      	mov	r0, r7
 800a7be:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <_svfiprintf_r+0x1f4>)
 800a7c0:	a904      	add	r1, sp, #16
 800a7c2:	f7fc ff47 	bl	8007654 <_printf_i>
 800a7c6:	e7ed      	b.n	800a7a4 <_svfiprintf_r+0x1c0>
 800a7c8:	0800bb09 	.word	0x0800bb09
 800a7cc:	0800bb0f 	.word	0x0800bb0f
 800a7d0:	0800bb13 	.word	0x0800bb13
 800a7d4:	08007119 	.word	0x08007119
 800a7d8:	0800a52d 	.word	0x0800a52d

0800a7dc <__sfputc_r>:
 800a7dc:	6893      	ldr	r3, [r2, #8]
 800a7de:	b410      	push	{r4}
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	6093      	str	r3, [r2, #8]
 800a7e6:	da07      	bge.n	800a7f8 <__sfputc_r+0x1c>
 800a7e8:	6994      	ldr	r4, [r2, #24]
 800a7ea:	42a3      	cmp	r3, r4
 800a7ec:	db01      	blt.n	800a7f2 <__sfputc_r+0x16>
 800a7ee:	290a      	cmp	r1, #10
 800a7f0:	d102      	bne.n	800a7f8 <__sfputc_r+0x1c>
 800a7f2:	bc10      	pop	{r4}
 800a7f4:	f000 b9da 	b.w	800abac <__swbuf_r>
 800a7f8:	6813      	ldr	r3, [r2, #0]
 800a7fa:	1c58      	adds	r0, r3, #1
 800a7fc:	6010      	str	r0, [r2, #0]
 800a7fe:	7019      	strb	r1, [r3, #0]
 800a800:	4608      	mov	r0, r1
 800a802:	bc10      	pop	{r4}
 800a804:	4770      	bx	lr

0800a806 <__sfputs_r>:
 800a806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a808:	4606      	mov	r6, r0
 800a80a:	460f      	mov	r7, r1
 800a80c:	4614      	mov	r4, r2
 800a80e:	18d5      	adds	r5, r2, r3
 800a810:	42ac      	cmp	r4, r5
 800a812:	d101      	bne.n	800a818 <__sfputs_r+0x12>
 800a814:	2000      	movs	r0, #0
 800a816:	e007      	b.n	800a828 <__sfputs_r+0x22>
 800a818:	463a      	mov	r2, r7
 800a81a:	4630      	mov	r0, r6
 800a81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a820:	f7ff ffdc 	bl	800a7dc <__sfputc_r>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d1f3      	bne.n	800a810 <__sfputs_r+0xa>
 800a828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a82c <_vfiprintf_r>:
 800a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a830:	460d      	mov	r5, r1
 800a832:	4614      	mov	r4, r2
 800a834:	4698      	mov	r8, r3
 800a836:	4606      	mov	r6, r0
 800a838:	b09d      	sub	sp, #116	@ 0x74
 800a83a:	b118      	cbz	r0, 800a844 <_vfiprintf_r+0x18>
 800a83c:	6a03      	ldr	r3, [r0, #32]
 800a83e:	b90b      	cbnz	r3, 800a844 <_vfiprintf_r+0x18>
 800a840:	f7fd fac4 	bl	8007dcc <__sinit>
 800a844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a846:	07d9      	lsls	r1, r3, #31
 800a848:	d405      	bmi.n	800a856 <_vfiprintf_r+0x2a>
 800a84a:	89ab      	ldrh	r3, [r5, #12]
 800a84c:	059a      	lsls	r2, r3, #22
 800a84e:	d402      	bmi.n	800a856 <_vfiprintf_r+0x2a>
 800a850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a852:	f7fd fbe4 	bl	800801e <__retarget_lock_acquire_recursive>
 800a856:	89ab      	ldrh	r3, [r5, #12]
 800a858:	071b      	lsls	r3, r3, #28
 800a85a:	d501      	bpl.n	800a860 <_vfiprintf_r+0x34>
 800a85c:	692b      	ldr	r3, [r5, #16]
 800a85e:	b99b      	cbnz	r3, 800a888 <_vfiprintf_r+0x5c>
 800a860:	4629      	mov	r1, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f000 f9e0 	bl	800ac28 <__swsetup_r>
 800a868:	b170      	cbz	r0, 800a888 <_vfiprintf_r+0x5c>
 800a86a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a86c:	07dc      	lsls	r4, r3, #31
 800a86e:	d504      	bpl.n	800a87a <_vfiprintf_r+0x4e>
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	b01d      	add	sp, #116	@ 0x74
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	89ab      	ldrh	r3, [r5, #12]
 800a87c:	0598      	lsls	r0, r3, #22
 800a87e:	d4f7      	bmi.n	800a870 <_vfiprintf_r+0x44>
 800a880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a882:	f7fd fbcd 	bl	8008020 <__retarget_lock_release_recursive>
 800a886:	e7f3      	b.n	800a870 <_vfiprintf_r+0x44>
 800a888:	2300      	movs	r3, #0
 800a88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a88c:	2320      	movs	r3, #32
 800a88e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a892:	2330      	movs	r3, #48	@ 0x30
 800a894:	f04f 0901 	mov.w	r9, #1
 800a898:	f8cd 800c 	str.w	r8, [sp, #12]
 800a89c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800aa48 <_vfiprintf_r+0x21c>
 800a8a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	469a      	mov	sl, r3
 800a8a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ac:	b10a      	cbz	r2, 800a8b2 <_vfiprintf_r+0x86>
 800a8ae:	2a25      	cmp	r2, #37	@ 0x25
 800a8b0:	d1f9      	bne.n	800a8a6 <_vfiprintf_r+0x7a>
 800a8b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a8b6:	d00b      	beq.n	800a8d0 <_vfiprintf_r+0xa4>
 800a8b8:	465b      	mov	r3, fp
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f7ff ffa1 	bl	800a806 <__sfputs_r>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	f000 80a7 	beq.w	800aa18 <_vfiprintf_r+0x1ec>
 800a8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8cc:	445a      	add	r2, fp
 800a8ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 809f 	beq.w	800aa18 <_vfiprintf_r+0x1ec>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8e4:	f10a 0a01 	add.w	sl, sl, #1
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	9307      	str	r3, [sp, #28]
 800a8ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8f2:	4654      	mov	r4, sl
 800a8f4:	2205      	movs	r2, #5
 800a8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fa:	4853      	ldr	r0, [pc, #332]	@ (800aa48 <_vfiprintf_r+0x21c>)
 800a8fc:	f7fd fb91 	bl	8008022 <memchr>
 800a900:	9a04      	ldr	r2, [sp, #16]
 800a902:	b9d8      	cbnz	r0, 800a93c <_vfiprintf_r+0x110>
 800a904:	06d1      	lsls	r1, r2, #27
 800a906:	bf44      	itt	mi
 800a908:	2320      	movmi	r3, #32
 800a90a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a90e:	0713      	lsls	r3, r2, #28
 800a910:	bf44      	itt	mi
 800a912:	232b      	movmi	r3, #43	@ 0x2b
 800a914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a918:	f89a 3000 	ldrb.w	r3, [sl]
 800a91c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a91e:	d015      	beq.n	800a94c <_vfiprintf_r+0x120>
 800a920:	4654      	mov	r4, sl
 800a922:	2000      	movs	r0, #0
 800a924:	f04f 0c0a 	mov.w	ip, #10
 800a928:	9a07      	ldr	r2, [sp, #28]
 800a92a:	4621      	mov	r1, r4
 800a92c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a930:	3b30      	subs	r3, #48	@ 0x30
 800a932:	2b09      	cmp	r3, #9
 800a934:	d94b      	bls.n	800a9ce <_vfiprintf_r+0x1a2>
 800a936:	b1b0      	cbz	r0, 800a966 <_vfiprintf_r+0x13a>
 800a938:	9207      	str	r2, [sp, #28]
 800a93a:	e014      	b.n	800a966 <_vfiprintf_r+0x13a>
 800a93c:	eba0 0308 	sub.w	r3, r0, r8
 800a940:	fa09 f303 	lsl.w	r3, r9, r3
 800a944:	4313      	orrs	r3, r2
 800a946:	46a2      	mov	sl, r4
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	e7d2      	b.n	800a8f2 <_vfiprintf_r+0xc6>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	1d19      	adds	r1, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	9103      	str	r1, [sp, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfbb      	ittet	lt
 800a958:	425b      	neglt	r3, r3
 800a95a:	f042 0202 	orrlt.w	r2, r2, #2
 800a95e:	9307      	strge	r3, [sp, #28]
 800a960:	9307      	strlt	r3, [sp, #28]
 800a962:	bfb8      	it	lt
 800a964:	9204      	strlt	r2, [sp, #16]
 800a966:	7823      	ldrb	r3, [r4, #0]
 800a968:	2b2e      	cmp	r3, #46	@ 0x2e
 800a96a:	d10a      	bne.n	800a982 <_vfiprintf_r+0x156>
 800a96c:	7863      	ldrb	r3, [r4, #1]
 800a96e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a970:	d132      	bne.n	800a9d8 <_vfiprintf_r+0x1ac>
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	3402      	adds	r4, #2
 800a976:	1d1a      	adds	r2, r3, #4
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	9203      	str	r2, [sp, #12]
 800a97c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800aa4c <_vfiprintf_r+0x220>
 800a986:	2203      	movs	r2, #3
 800a988:	4650      	mov	r0, sl
 800a98a:	7821      	ldrb	r1, [r4, #0]
 800a98c:	f7fd fb49 	bl	8008022 <memchr>
 800a990:	b138      	cbz	r0, 800a9a2 <_vfiprintf_r+0x176>
 800a992:	2240      	movs	r2, #64	@ 0x40
 800a994:	9b04      	ldr	r3, [sp, #16]
 800a996:	eba0 000a 	sub.w	r0, r0, sl
 800a99a:	4082      	lsls	r2, r0
 800a99c:	4313      	orrs	r3, r2
 800a99e:	3401      	adds	r4, #1
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a6:	2206      	movs	r2, #6
 800a9a8:	4829      	ldr	r0, [pc, #164]	@ (800aa50 <_vfiprintf_r+0x224>)
 800a9aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9ae:	f7fd fb38 	bl	8008022 <memchr>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d03f      	beq.n	800aa36 <_vfiprintf_r+0x20a>
 800a9b6:	4b27      	ldr	r3, [pc, #156]	@ (800aa54 <_vfiprintf_r+0x228>)
 800a9b8:	bb1b      	cbnz	r3, 800aa02 <_vfiprintf_r+0x1d6>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	3307      	adds	r3, #7
 800a9be:	f023 0307 	bic.w	r3, r3, #7
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	9303      	str	r3, [sp, #12]
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	443b      	add	r3, r7
 800a9ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9cc:	e76a      	b.n	800a8a4 <_vfiprintf_r+0x78>
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9d6:	e7a8      	b.n	800a92a <_vfiprintf_r+0xfe>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f04f 0c0a 	mov.w	ip, #10
 800a9de:	4619      	mov	r1, r3
 800a9e0:	3401      	adds	r4, #1
 800a9e2:	9305      	str	r3, [sp, #20]
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ea:	3a30      	subs	r2, #48	@ 0x30
 800a9ec:	2a09      	cmp	r2, #9
 800a9ee:	d903      	bls.n	800a9f8 <_vfiprintf_r+0x1cc>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0c6      	beq.n	800a982 <_vfiprintf_r+0x156>
 800a9f4:	9105      	str	r1, [sp, #20]
 800a9f6:	e7c4      	b.n	800a982 <_vfiprintf_r+0x156>
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa00:	e7f0      	b.n	800a9e4 <_vfiprintf_r+0x1b8>
 800aa02:	ab03      	add	r3, sp, #12
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	462a      	mov	r2, r5
 800aa08:	4630      	mov	r0, r6
 800aa0a:	4b13      	ldr	r3, [pc, #76]	@ (800aa58 <_vfiprintf_r+0x22c>)
 800aa0c:	a904      	add	r1, sp, #16
 800aa0e:	f7fc fb83 	bl	8007118 <_printf_float>
 800aa12:	4607      	mov	r7, r0
 800aa14:	1c78      	adds	r0, r7, #1
 800aa16:	d1d6      	bne.n	800a9c6 <_vfiprintf_r+0x19a>
 800aa18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa1a:	07d9      	lsls	r1, r3, #31
 800aa1c:	d405      	bmi.n	800aa2a <_vfiprintf_r+0x1fe>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	059a      	lsls	r2, r3, #22
 800aa22:	d402      	bmi.n	800aa2a <_vfiprintf_r+0x1fe>
 800aa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa26:	f7fd fafb 	bl	8008020 <__retarget_lock_release_recursive>
 800aa2a:	89ab      	ldrh	r3, [r5, #12]
 800aa2c:	065b      	lsls	r3, r3, #25
 800aa2e:	f53f af1f 	bmi.w	800a870 <_vfiprintf_r+0x44>
 800aa32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa34:	e71e      	b.n	800a874 <_vfiprintf_r+0x48>
 800aa36:	ab03      	add	r3, sp, #12
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4b06      	ldr	r3, [pc, #24]	@ (800aa58 <_vfiprintf_r+0x22c>)
 800aa40:	a904      	add	r1, sp, #16
 800aa42:	f7fc fe07 	bl	8007654 <_printf_i>
 800aa46:	e7e4      	b.n	800aa12 <_vfiprintf_r+0x1e6>
 800aa48:	0800bb09 	.word	0x0800bb09
 800aa4c:	0800bb0f 	.word	0x0800bb0f
 800aa50:	0800bb13 	.word	0x0800bb13
 800aa54:	08007119 	.word	0x08007119
 800aa58:	0800a807 	.word	0x0800a807

0800aa5c <__sflush_r>:
 800aa5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	0716      	lsls	r6, r2, #28
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	d454      	bmi.n	800ab14 <__sflush_r+0xb8>
 800aa6a:	684b      	ldr	r3, [r1, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dc02      	bgt.n	800aa76 <__sflush_r+0x1a>
 800aa70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd48      	ble.n	800ab08 <__sflush_r+0xac>
 800aa76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	d045      	beq.n	800ab08 <__sflush_r+0xac>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa82:	682f      	ldr	r7, [r5, #0]
 800aa84:	6a21      	ldr	r1, [r4, #32]
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	d030      	beq.n	800aaec <__sflush_r+0x90>
 800aa8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	0759      	lsls	r1, r3, #29
 800aa90:	d505      	bpl.n	800aa9e <__sflush_r+0x42>
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	1ad2      	subs	r2, r2, r3
 800aa96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa98:	b10b      	cbz	r3, 800aa9e <__sflush_r+0x42>
 800aa9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa9c:	1ad2      	subs	r2, r2, r3
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaa4:	6a21      	ldr	r1, [r4, #32]
 800aaa6:	47b0      	blx	r6
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	d106      	bne.n	800aabc <__sflush_r+0x60>
 800aaae:	6829      	ldr	r1, [r5, #0]
 800aab0:	291d      	cmp	r1, #29
 800aab2:	d82b      	bhi.n	800ab0c <__sflush_r+0xb0>
 800aab4:	4a28      	ldr	r2, [pc, #160]	@ (800ab58 <__sflush_r+0xfc>)
 800aab6:	410a      	asrs	r2, r1
 800aab8:	07d6      	lsls	r6, r2, #31
 800aaba:	d427      	bmi.n	800ab0c <__sflush_r+0xb0>
 800aabc:	2200      	movs	r2, #0
 800aabe:	6062      	str	r2, [r4, #4]
 800aac0:	6922      	ldr	r2, [r4, #16]
 800aac2:	04d9      	lsls	r1, r3, #19
 800aac4:	6022      	str	r2, [r4, #0]
 800aac6:	d504      	bpl.n	800aad2 <__sflush_r+0x76>
 800aac8:	1c42      	adds	r2, r0, #1
 800aaca:	d101      	bne.n	800aad0 <__sflush_r+0x74>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b903      	cbnz	r3, 800aad2 <__sflush_r+0x76>
 800aad0:	6560      	str	r0, [r4, #84]	@ 0x54
 800aad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aad4:	602f      	str	r7, [r5, #0]
 800aad6:	b1b9      	cbz	r1, 800ab08 <__sflush_r+0xac>
 800aad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aadc:	4299      	cmp	r1, r3
 800aade:	d002      	beq.n	800aae6 <__sflush_r+0x8a>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f7fe f901 	bl	8008ce8 <_free_r>
 800aae6:	2300      	movs	r3, #0
 800aae8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaea:	e00d      	b.n	800ab08 <__sflush_r+0xac>
 800aaec:	2301      	movs	r3, #1
 800aaee:	4628      	mov	r0, r5
 800aaf0:	47b0      	blx	r6
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	1c50      	adds	r0, r2, #1
 800aaf6:	d1c9      	bne.n	800aa8c <__sflush_r+0x30>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0c6      	beq.n	800aa8c <__sflush_r+0x30>
 800aafe:	2b1d      	cmp	r3, #29
 800ab00:	d001      	beq.n	800ab06 <__sflush_r+0xaa>
 800ab02:	2b16      	cmp	r3, #22
 800ab04:	d11d      	bne.n	800ab42 <__sflush_r+0xe6>
 800ab06:	602f      	str	r7, [r5, #0]
 800ab08:	2000      	movs	r0, #0
 800ab0a:	e021      	b.n	800ab50 <__sflush_r+0xf4>
 800ab0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab10:	b21b      	sxth	r3, r3
 800ab12:	e01a      	b.n	800ab4a <__sflush_r+0xee>
 800ab14:	690f      	ldr	r7, [r1, #16]
 800ab16:	2f00      	cmp	r7, #0
 800ab18:	d0f6      	beq.n	800ab08 <__sflush_r+0xac>
 800ab1a:	0793      	lsls	r3, r2, #30
 800ab1c:	bf18      	it	ne
 800ab1e:	2300      	movne	r3, #0
 800ab20:	680e      	ldr	r6, [r1, #0]
 800ab22:	bf08      	it	eq
 800ab24:	694b      	ldreq	r3, [r1, #20]
 800ab26:	1bf6      	subs	r6, r6, r7
 800ab28:	600f      	str	r7, [r1, #0]
 800ab2a:	608b      	str	r3, [r1, #8]
 800ab2c:	2e00      	cmp	r6, #0
 800ab2e:	ddeb      	ble.n	800ab08 <__sflush_r+0xac>
 800ab30:	4633      	mov	r3, r6
 800ab32:	463a      	mov	r2, r7
 800ab34:	4628      	mov	r0, r5
 800ab36:	6a21      	ldr	r1, [r4, #32]
 800ab38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ab3c:	47e0      	blx	ip
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	dc07      	bgt.n	800ab52 <__sflush_r+0xf6>
 800ab42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4e:	81a3      	strh	r3, [r4, #12]
 800ab50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab52:	4407      	add	r7, r0
 800ab54:	1a36      	subs	r6, r6, r0
 800ab56:	e7e9      	b.n	800ab2c <__sflush_r+0xd0>
 800ab58:	dfbffffe 	.word	0xdfbffffe

0800ab5c <_fflush_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	690b      	ldr	r3, [r1, #16]
 800ab60:	4605      	mov	r5, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	b913      	cbnz	r3, 800ab6c <_fflush_r+0x10>
 800ab66:	2500      	movs	r5, #0
 800ab68:	4628      	mov	r0, r5
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	b118      	cbz	r0, 800ab76 <_fflush_r+0x1a>
 800ab6e:	6a03      	ldr	r3, [r0, #32]
 800ab70:	b90b      	cbnz	r3, 800ab76 <_fflush_r+0x1a>
 800ab72:	f7fd f92b 	bl	8007dcc <__sinit>
 800ab76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0f3      	beq.n	800ab66 <_fflush_r+0xa>
 800ab7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab80:	07d0      	lsls	r0, r2, #31
 800ab82:	d404      	bmi.n	800ab8e <_fflush_r+0x32>
 800ab84:	0599      	lsls	r1, r3, #22
 800ab86:	d402      	bmi.n	800ab8e <_fflush_r+0x32>
 800ab88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab8a:	f7fd fa48 	bl	800801e <__retarget_lock_acquire_recursive>
 800ab8e:	4628      	mov	r0, r5
 800ab90:	4621      	mov	r1, r4
 800ab92:	f7ff ff63 	bl	800aa5c <__sflush_r>
 800ab96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab98:	4605      	mov	r5, r0
 800ab9a:	07da      	lsls	r2, r3, #31
 800ab9c:	d4e4      	bmi.n	800ab68 <_fflush_r+0xc>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	059b      	lsls	r3, r3, #22
 800aba2:	d4e1      	bmi.n	800ab68 <_fflush_r+0xc>
 800aba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aba6:	f7fd fa3b 	bl	8008020 <__retarget_lock_release_recursive>
 800abaa:	e7dd      	b.n	800ab68 <_fflush_r+0xc>

0800abac <__swbuf_r>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	460e      	mov	r6, r1
 800abb0:	4614      	mov	r4, r2
 800abb2:	4605      	mov	r5, r0
 800abb4:	b118      	cbz	r0, 800abbe <__swbuf_r+0x12>
 800abb6:	6a03      	ldr	r3, [r0, #32]
 800abb8:	b90b      	cbnz	r3, 800abbe <__swbuf_r+0x12>
 800abba:	f7fd f907 	bl	8007dcc <__sinit>
 800abbe:	69a3      	ldr	r3, [r4, #24]
 800abc0:	60a3      	str	r3, [r4, #8]
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	071a      	lsls	r2, r3, #28
 800abc6:	d501      	bpl.n	800abcc <__swbuf_r+0x20>
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	b943      	cbnz	r3, 800abde <__swbuf_r+0x32>
 800abcc:	4621      	mov	r1, r4
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 f82a 	bl	800ac28 <__swsetup_r>
 800abd4:	b118      	cbz	r0, 800abde <__swbuf_r+0x32>
 800abd6:	f04f 37ff 	mov.w	r7, #4294967295
 800abda:	4638      	mov	r0, r7
 800abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	6922      	ldr	r2, [r4, #16]
 800abe2:	b2f6      	uxtb	r6, r6
 800abe4:	1a98      	subs	r0, r3, r2
 800abe6:	6963      	ldr	r3, [r4, #20]
 800abe8:	4637      	mov	r7, r6
 800abea:	4283      	cmp	r3, r0
 800abec:	dc05      	bgt.n	800abfa <__swbuf_r+0x4e>
 800abee:	4621      	mov	r1, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	f7ff ffb3 	bl	800ab5c <_fflush_r>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d1ed      	bne.n	800abd6 <__swbuf_r+0x2a>
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	60a3      	str	r3, [r4, #8]
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	6022      	str	r2, [r4, #0]
 800ac06:	701e      	strb	r6, [r3, #0]
 800ac08:	6962      	ldr	r2, [r4, #20]
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d004      	beq.n	800ac1a <__swbuf_r+0x6e>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	07db      	lsls	r3, r3, #31
 800ac14:	d5e1      	bpl.n	800abda <__swbuf_r+0x2e>
 800ac16:	2e0a      	cmp	r6, #10
 800ac18:	d1df      	bne.n	800abda <__swbuf_r+0x2e>
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	f7ff ff9d 	bl	800ab5c <_fflush_r>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d0d9      	beq.n	800abda <__swbuf_r+0x2e>
 800ac26:	e7d6      	b.n	800abd6 <__swbuf_r+0x2a>

0800ac28 <__swsetup_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4b29      	ldr	r3, [pc, #164]	@ (800acd0 <__swsetup_r+0xa8>)
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	460c      	mov	r4, r1
 800ac32:	b118      	cbz	r0, 800ac3c <__swsetup_r+0x14>
 800ac34:	6a03      	ldr	r3, [r0, #32]
 800ac36:	b90b      	cbnz	r3, 800ac3c <__swsetup_r+0x14>
 800ac38:	f7fd f8c8 	bl	8007dcc <__sinit>
 800ac3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac40:	0719      	lsls	r1, r3, #28
 800ac42:	d422      	bmi.n	800ac8a <__swsetup_r+0x62>
 800ac44:	06da      	lsls	r2, r3, #27
 800ac46:	d407      	bmi.n	800ac58 <__swsetup_r+0x30>
 800ac48:	2209      	movs	r2, #9
 800ac4a:	602a      	str	r2, [r5, #0]
 800ac4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	e033      	b.n	800acc0 <__swsetup_r+0x98>
 800ac58:	0758      	lsls	r0, r3, #29
 800ac5a:	d512      	bpl.n	800ac82 <__swsetup_r+0x5a>
 800ac5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac5e:	b141      	cbz	r1, 800ac72 <__swsetup_r+0x4a>
 800ac60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac64:	4299      	cmp	r1, r3
 800ac66:	d002      	beq.n	800ac6e <__swsetup_r+0x46>
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f7fe f83d 	bl	8008ce8 <_free_r>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6063      	str	r3, [r4, #4]
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f043 0308 	orr.w	r3, r3, #8
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	b94b      	cbnz	r3, 800aca2 <__swsetup_r+0x7a>
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac98:	d003      	beq.n	800aca2 <__swsetup_r+0x7a>
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f000 fc58 	bl	800b552 <__smakebuf_r>
 800aca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aca6:	f013 0201 	ands.w	r2, r3, #1
 800acaa:	d00a      	beq.n	800acc2 <__swsetup_r+0x9a>
 800acac:	2200      	movs	r2, #0
 800acae:	60a2      	str	r2, [r4, #8]
 800acb0:	6962      	ldr	r2, [r4, #20]
 800acb2:	4252      	negs	r2, r2
 800acb4:	61a2      	str	r2, [r4, #24]
 800acb6:	6922      	ldr	r2, [r4, #16]
 800acb8:	b942      	cbnz	r2, 800accc <__swsetup_r+0xa4>
 800acba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acbe:	d1c5      	bne.n	800ac4c <__swsetup_r+0x24>
 800acc0:	bd38      	pop	{r3, r4, r5, pc}
 800acc2:	0799      	lsls	r1, r3, #30
 800acc4:	bf58      	it	pl
 800acc6:	6962      	ldrpl	r2, [r4, #20]
 800acc8:	60a2      	str	r2, [r4, #8]
 800acca:	e7f4      	b.n	800acb6 <__swsetup_r+0x8e>
 800accc:	2000      	movs	r0, #0
 800acce:	e7f7      	b.n	800acc0 <__swsetup_r+0x98>
 800acd0:	20000018 	.word	0x20000018

0800acd4 <memmove>:
 800acd4:	4288      	cmp	r0, r1
 800acd6:	b510      	push	{r4, lr}
 800acd8:	eb01 0402 	add.w	r4, r1, r2
 800acdc:	d902      	bls.n	800ace4 <memmove+0x10>
 800acde:	4284      	cmp	r4, r0
 800ace0:	4623      	mov	r3, r4
 800ace2:	d807      	bhi.n	800acf4 <memmove+0x20>
 800ace4:	1e43      	subs	r3, r0, #1
 800ace6:	42a1      	cmp	r1, r4
 800ace8:	d008      	beq.n	800acfc <memmove+0x28>
 800acea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acf2:	e7f8      	b.n	800ace6 <memmove+0x12>
 800acf4:	4601      	mov	r1, r0
 800acf6:	4402      	add	r2, r0
 800acf8:	428a      	cmp	r2, r1
 800acfa:	d100      	bne.n	800acfe <memmove+0x2a>
 800acfc:	bd10      	pop	{r4, pc}
 800acfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad06:	e7f7      	b.n	800acf8 <memmove+0x24>

0800ad08 <strncmp>:
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	b16a      	cbz	r2, 800ad28 <strncmp+0x20>
 800ad0c:	3901      	subs	r1, #1
 800ad0e:	1884      	adds	r4, r0, r2
 800ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d103      	bne.n	800ad24 <strncmp+0x1c>
 800ad1c:	42a0      	cmp	r0, r4
 800ad1e:	d001      	beq.n	800ad24 <strncmp+0x1c>
 800ad20:	2a00      	cmp	r2, #0
 800ad22:	d1f5      	bne.n	800ad10 <strncmp+0x8>
 800ad24:	1ad0      	subs	r0, r2, r3
 800ad26:	bd10      	pop	{r4, pc}
 800ad28:	4610      	mov	r0, r2
 800ad2a:	e7fc      	b.n	800ad26 <strncmp+0x1e>

0800ad2c <_sbrk_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4d05      	ldr	r5, [pc, #20]	@ (800ad48 <_sbrk_r+0x1c>)
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	602b      	str	r3, [r5, #0]
 800ad38:	f7f6 ff62 	bl	8001c00 <_sbrk>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_sbrk_r+0x1a>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_sbrk_r+0x1a>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	20000468 	.word	0x20000468

0800ad4c <memcpy>:
 800ad4c:	440a      	add	r2, r1
 800ad4e:	4291      	cmp	r1, r2
 800ad50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad54:	d100      	bne.n	800ad58 <memcpy+0xc>
 800ad56:	4770      	bx	lr
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad5e:	4291      	cmp	r1, r2
 800ad60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad64:	d1f9      	bne.n	800ad5a <memcpy+0xe>
 800ad66:	bd10      	pop	{r4, pc}

0800ad68 <nan>:
 800ad68:	2000      	movs	r0, #0
 800ad6a:	4901      	ldr	r1, [pc, #4]	@ (800ad70 <nan+0x8>)
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	7ff80000 	.word	0x7ff80000

0800ad74 <__assert_func>:
 800ad74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad76:	4614      	mov	r4, r2
 800ad78:	461a      	mov	r2, r3
 800ad7a:	4b09      	ldr	r3, [pc, #36]	@ (800ada0 <__assert_func+0x2c>)
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68d8      	ldr	r0, [r3, #12]
 800ad82:	b954      	cbnz	r4, 800ad9a <__assert_func+0x26>
 800ad84:	4b07      	ldr	r3, [pc, #28]	@ (800ada4 <__assert_func+0x30>)
 800ad86:	461c      	mov	r4, r3
 800ad88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad8c:	9100      	str	r1, [sp, #0]
 800ad8e:	462b      	mov	r3, r5
 800ad90:	4905      	ldr	r1, [pc, #20]	@ (800ada8 <__assert_func+0x34>)
 800ad92:	f000 fba7 	bl	800b4e4 <fiprintf>
 800ad96:	f000 fc3b 	bl	800b610 <abort>
 800ad9a:	4b04      	ldr	r3, [pc, #16]	@ (800adac <__assert_func+0x38>)
 800ad9c:	e7f4      	b.n	800ad88 <__assert_func+0x14>
 800ad9e:	bf00      	nop
 800ada0:	20000018 	.word	0x20000018
 800ada4:	0800bb5d 	.word	0x0800bb5d
 800ada8:	0800bb2f 	.word	0x0800bb2f
 800adac:	0800bb22 	.word	0x0800bb22

0800adb0 <_calloc_r>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	fba1 5402 	umull	r5, r4, r1, r2
 800adb6:	b93c      	cbnz	r4, 800adc8 <_calloc_r+0x18>
 800adb8:	4629      	mov	r1, r5
 800adba:	f7fe f807 	bl	8008dcc <_malloc_r>
 800adbe:	4606      	mov	r6, r0
 800adc0:	b928      	cbnz	r0, 800adce <_calloc_r+0x1e>
 800adc2:	2600      	movs	r6, #0
 800adc4:	4630      	mov	r0, r6
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	220c      	movs	r2, #12
 800adca:	6002      	str	r2, [r0, #0]
 800adcc:	e7f9      	b.n	800adc2 <_calloc_r+0x12>
 800adce:	462a      	mov	r2, r5
 800add0:	4621      	mov	r1, r4
 800add2:	f7fd f8a6 	bl	8007f22 <memset>
 800add6:	e7f5      	b.n	800adc4 <_calloc_r+0x14>

0800add8 <rshift>:
 800add8:	6903      	ldr	r3, [r0, #16]
 800adda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ade2:	f100 0414 	add.w	r4, r0, #20
 800ade6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800adea:	dd46      	ble.n	800ae7a <rshift+0xa2>
 800adec:	f011 011f 	ands.w	r1, r1, #31
 800adf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800adf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800adf8:	d10c      	bne.n	800ae14 <rshift+0x3c>
 800adfa:	4629      	mov	r1, r5
 800adfc:	f100 0710 	add.w	r7, r0, #16
 800ae00:	42b1      	cmp	r1, r6
 800ae02:	d335      	bcc.n	800ae70 <rshift+0x98>
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	1eea      	subs	r2, r5, #3
 800ae0a:	4296      	cmp	r6, r2
 800ae0c:	bf38      	it	cc
 800ae0e:	2300      	movcc	r3, #0
 800ae10:	4423      	add	r3, r4
 800ae12:	e015      	b.n	800ae40 <rshift+0x68>
 800ae14:	46a1      	mov	r9, r4
 800ae16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae1a:	f1c1 0820 	rsb	r8, r1, #32
 800ae1e:	40cf      	lsrs	r7, r1
 800ae20:	f105 0e04 	add.w	lr, r5, #4
 800ae24:	4576      	cmp	r6, lr
 800ae26:	46f4      	mov	ip, lr
 800ae28:	d816      	bhi.n	800ae58 <rshift+0x80>
 800ae2a:	1a9a      	subs	r2, r3, r2
 800ae2c:	0092      	lsls	r2, r2, #2
 800ae2e:	3a04      	subs	r2, #4
 800ae30:	3501      	adds	r5, #1
 800ae32:	42ae      	cmp	r6, r5
 800ae34:	bf38      	it	cc
 800ae36:	2200      	movcc	r2, #0
 800ae38:	18a3      	adds	r3, r4, r2
 800ae3a:	50a7      	str	r7, [r4, r2]
 800ae3c:	b107      	cbz	r7, 800ae40 <rshift+0x68>
 800ae3e:	3304      	adds	r3, #4
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	eba3 0204 	sub.w	r2, r3, r4
 800ae46:	bf08      	it	eq
 800ae48:	2300      	moveq	r3, #0
 800ae4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae4e:	6102      	str	r2, [r0, #16]
 800ae50:	bf08      	it	eq
 800ae52:	6143      	streq	r3, [r0, #20]
 800ae54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae58:	f8dc c000 	ldr.w	ip, [ip]
 800ae5c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae60:	ea4c 0707 	orr.w	r7, ip, r7
 800ae64:	f849 7b04 	str.w	r7, [r9], #4
 800ae68:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae6c:	40cf      	lsrs	r7, r1
 800ae6e:	e7d9      	b.n	800ae24 <rshift+0x4c>
 800ae70:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae74:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae78:	e7c2      	b.n	800ae00 <rshift+0x28>
 800ae7a:	4623      	mov	r3, r4
 800ae7c:	e7e0      	b.n	800ae40 <rshift+0x68>

0800ae7e <__hexdig_fun>:
 800ae7e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ae82:	2b09      	cmp	r3, #9
 800ae84:	d802      	bhi.n	800ae8c <__hexdig_fun+0xe>
 800ae86:	3820      	subs	r0, #32
 800ae88:	b2c0      	uxtb	r0, r0
 800ae8a:	4770      	bx	lr
 800ae8c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ae90:	2b05      	cmp	r3, #5
 800ae92:	d801      	bhi.n	800ae98 <__hexdig_fun+0x1a>
 800ae94:	3847      	subs	r0, #71	@ 0x47
 800ae96:	e7f7      	b.n	800ae88 <__hexdig_fun+0xa>
 800ae98:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ae9c:	2b05      	cmp	r3, #5
 800ae9e:	d801      	bhi.n	800aea4 <__hexdig_fun+0x26>
 800aea0:	3827      	subs	r0, #39	@ 0x27
 800aea2:	e7f1      	b.n	800ae88 <__hexdig_fun+0xa>
 800aea4:	2000      	movs	r0, #0
 800aea6:	4770      	bx	lr

0800aea8 <__gethex>:
 800aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	468a      	mov	sl, r1
 800aeae:	4690      	mov	r8, r2
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	9302      	str	r3, [sp, #8]
 800aeb4:	680b      	ldr	r3, [r1, #0]
 800aeb6:	9001      	str	r0, [sp, #4]
 800aeb8:	1c9c      	adds	r4, r3, #2
 800aeba:	46a1      	mov	r9, r4
 800aebc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aec0:	2830      	cmp	r0, #48	@ 0x30
 800aec2:	d0fa      	beq.n	800aeba <__gethex+0x12>
 800aec4:	eba9 0303 	sub.w	r3, r9, r3
 800aec8:	f1a3 0b02 	sub.w	fp, r3, #2
 800aecc:	f7ff ffd7 	bl	800ae7e <__hexdig_fun>
 800aed0:	4605      	mov	r5, r0
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d168      	bne.n	800afa8 <__gethex+0x100>
 800aed6:	2201      	movs	r2, #1
 800aed8:	4648      	mov	r0, r9
 800aeda:	499f      	ldr	r1, [pc, #636]	@ (800b158 <__gethex+0x2b0>)
 800aedc:	f7ff ff14 	bl	800ad08 <strncmp>
 800aee0:	4607      	mov	r7, r0
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d167      	bne.n	800afb6 <__gethex+0x10e>
 800aee6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aeea:	4626      	mov	r6, r4
 800aeec:	f7ff ffc7 	bl	800ae7e <__hexdig_fun>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d062      	beq.n	800afba <__gethex+0x112>
 800aef4:	4623      	mov	r3, r4
 800aef6:	7818      	ldrb	r0, [r3, #0]
 800aef8:	4699      	mov	r9, r3
 800aefa:	2830      	cmp	r0, #48	@ 0x30
 800aefc:	f103 0301 	add.w	r3, r3, #1
 800af00:	d0f9      	beq.n	800aef6 <__gethex+0x4e>
 800af02:	f7ff ffbc 	bl	800ae7e <__hexdig_fun>
 800af06:	fab0 f580 	clz	r5, r0
 800af0a:	f04f 0b01 	mov.w	fp, #1
 800af0e:	096d      	lsrs	r5, r5, #5
 800af10:	464a      	mov	r2, r9
 800af12:	4616      	mov	r6, r2
 800af14:	7830      	ldrb	r0, [r6, #0]
 800af16:	3201      	adds	r2, #1
 800af18:	f7ff ffb1 	bl	800ae7e <__hexdig_fun>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d1f8      	bne.n	800af12 <__gethex+0x6a>
 800af20:	2201      	movs	r2, #1
 800af22:	4630      	mov	r0, r6
 800af24:	498c      	ldr	r1, [pc, #560]	@ (800b158 <__gethex+0x2b0>)
 800af26:	f7ff feef 	bl	800ad08 <strncmp>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d13f      	bne.n	800afae <__gethex+0x106>
 800af2e:	b944      	cbnz	r4, 800af42 <__gethex+0x9a>
 800af30:	1c74      	adds	r4, r6, #1
 800af32:	4622      	mov	r2, r4
 800af34:	4616      	mov	r6, r2
 800af36:	7830      	ldrb	r0, [r6, #0]
 800af38:	3201      	adds	r2, #1
 800af3a:	f7ff ffa0 	bl	800ae7e <__hexdig_fun>
 800af3e:	2800      	cmp	r0, #0
 800af40:	d1f8      	bne.n	800af34 <__gethex+0x8c>
 800af42:	1ba4      	subs	r4, r4, r6
 800af44:	00a7      	lsls	r7, r4, #2
 800af46:	7833      	ldrb	r3, [r6, #0]
 800af48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800af4c:	2b50      	cmp	r3, #80	@ 0x50
 800af4e:	d13e      	bne.n	800afce <__gethex+0x126>
 800af50:	7873      	ldrb	r3, [r6, #1]
 800af52:	2b2b      	cmp	r3, #43	@ 0x2b
 800af54:	d033      	beq.n	800afbe <__gethex+0x116>
 800af56:	2b2d      	cmp	r3, #45	@ 0x2d
 800af58:	d034      	beq.n	800afc4 <__gethex+0x11c>
 800af5a:	2400      	movs	r4, #0
 800af5c:	1c71      	adds	r1, r6, #1
 800af5e:	7808      	ldrb	r0, [r1, #0]
 800af60:	f7ff ff8d 	bl	800ae7e <__hexdig_fun>
 800af64:	1e43      	subs	r3, r0, #1
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b18      	cmp	r3, #24
 800af6a:	d830      	bhi.n	800afce <__gethex+0x126>
 800af6c:	f1a0 0210 	sub.w	r2, r0, #16
 800af70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af74:	f7ff ff83 	bl	800ae7e <__hexdig_fun>
 800af78:	f100 3cff 	add.w	ip, r0, #4294967295
 800af7c:	fa5f fc8c 	uxtb.w	ip, ip
 800af80:	f1bc 0f18 	cmp.w	ip, #24
 800af84:	f04f 030a 	mov.w	r3, #10
 800af88:	d91e      	bls.n	800afc8 <__gethex+0x120>
 800af8a:	b104      	cbz	r4, 800af8e <__gethex+0xe6>
 800af8c:	4252      	negs	r2, r2
 800af8e:	4417      	add	r7, r2
 800af90:	f8ca 1000 	str.w	r1, [sl]
 800af94:	b1ed      	cbz	r5, 800afd2 <__gethex+0x12a>
 800af96:	f1bb 0f00 	cmp.w	fp, #0
 800af9a:	bf0c      	ite	eq
 800af9c:	2506      	moveq	r5, #6
 800af9e:	2500      	movne	r5, #0
 800afa0:	4628      	mov	r0, r5
 800afa2:	b005      	add	sp, #20
 800afa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa8:	2500      	movs	r5, #0
 800afaa:	462c      	mov	r4, r5
 800afac:	e7b0      	b.n	800af10 <__gethex+0x68>
 800afae:	2c00      	cmp	r4, #0
 800afb0:	d1c7      	bne.n	800af42 <__gethex+0x9a>
 800afb2:	4627      	mov	r7, r4
 800afb4:	e7c7      	b.n	800af46 <__gethex+0x9e>
 800afb6:	464e      	mov	r6, r9
 800afb8:	462f      	mov	r7, r5
 800afba:	2501      	movs	r5, #1
 800afbc:	e7c3      	b.n	800af46 <__gethex+0x9e>
 800afbe:	2400      	movs	r4, #0
 800afc0:	1cb1      	adds	r1, r6, #2
 800afc2:	e7cc      	b.n	800af5e <__gethex+0xb6>
 800afc4:	2401      	movs	r4, #1
 800afc6:	e7fb      	b.n	800afc0 <__gethex+0x118>
 800afc8:	fb03 0002 	mla	r0, r3, r2, r0
 800afcc:	e7ce      	b.n	800af6c <__gethex+0xc4>
 800afce:	4631      	mov	r1, r6
 800afd0:	e7de      	b.n	800af90 <__gethex+0xe8>
 800afd2:	4629      	mov	r1, r5
 800afd4:	eba6 0309 	sub.w	r3, r6, r9
 800afd8:	3b01      	subs	r3, #1
 800afda:	2b07      	cmp	r3, #7
 800afdc:	dc0a      	bgt.n	800aff4 <__gethex+0x14c>
 800afde:	9801      	ldr	r0, [sp, #4]
 800afe0:	f7fd ff80 	bl	8008ee4 <_Balloc>
 800afe4:	4604      	mov	r4, r0
 800afe6:	b940      	cbnz	r0, 800affa <__gethex+0x152>
 800afe8:	4602      	mov	r2, r0
 800afea:	21e4      	movs	r1, #228	@ 0xe4
 800afec:	4b5b      	ldr	r3, [pc, #364]	@ (800b15c <__gethex+0x2b4>)
 800afee:	485c      	ldr	r0, [pc, #368]	@ (800b160 <__gethex+0x2b8>)
 800aff0:	f7ff fec0 	bl	800ad74 <__assert_func>
 800aff4:	3101      	adds	r1, #1
 800aff6:	105b      	asrs	r3, r3, #1
 800aff8:	e7ef      	b.n	800afda <__gethex+0x132>
 800affa:	2300      	movs	r3, #0
 800affc:	f100 0a14 	add.w	sl, r0, #20
 800b000:	4655      	mov	r5, sl
 800b002:	469b      	mov	fp, r3
 800b004:	45b1      	cmp	r9, r6
 800b006:	d337      	bcc.n	800b078 <__gethex+0x1d0>
 800b008:	f845 bb04 	str.w	fp, [r5], #4
 800b00c:	eba5 050a 	sub.w	r5, r5, sl
 800b010:	10ad      	asrs	r5, r5, #2
 800b012:	6125      	str	r5, [r4, #16]
 800b014:	4658      	mov	r0, fp
 800b016:	f7fe f857 	bl	80090c8 <__hi0bits>
 800b01a:	016d      	lsls	r5, r5, #5
 800b01c:	f8d8 6000 	ldr.w	r6, [r8]
 800b020:	1a2d      	subs	r5, r5, r0
 800b022:	42b5      	cmp	r5, r6
 800b024:	dd54      	ble.n	800b0d0 <__gethex+0x228>
 800b026:	1bad      	subs	r5, r5, r6
 800b028:	4629      	mov	r1, r5
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7fe fbdf 	bl	80097ee <__any_on>
 800b030:	4681      	mov	r9, r0
 800b032:	b178      	cbz	r0, 800b054 <__gethex+0x1ac>
 800b034:	f04f 0901 	mov.w	r9, #1
 800b038:	1e6b      	subs	r3, r5, #1
 800b03a:	1159      	asrs	r1, r3, #5
 800b03c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b040:	f003 021f 	and.w	r2, r3, #31
 800b044:	fa09 f202 	lsl.w	r2, r9, r2
 800b048:	420a      	tst	r2, r1
 800b04a:	d003      	beq.n	800b054 <__gethex+0x1ac>
 800b04c:	454b      	cmp	r3, r9
 800b04e:	dc36      	bgt.n	800b0be <__gethex+0x216>
 800b050:	f04f 0902 	mov.w	r9, #2
 800b054:	4629      	mov	r1, r5
 800b056:	4620      	mov	r0, r4
 800b058:	f7ff febe 	bl	800add8 <rshift>
 800b05c:	442f      	add	r7, r5
 800b05e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b062:	42bb      	cmp	r3, r7
 800b064:	da42      	bge.n	800b0ec <__gethex+0x244>
 800b066:	4621      	mov	r1, r4
 800b068:	9801      	ldr	r0, [sp, #4]
 800b06a:	f7fd ff7b 	bl	8008f64 <_Bfree>
 800b06e:	2300      	movs	r3, #0
 800b070:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b072:	25a3      	movs	r5, #163	@ 0xa3
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	e793      	b.n	800afa0 <__gethex+0xf8>
 800b078:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b07c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b07e:	d012      	beq.n	800b0a6 <__gethex+0x1fe>
 800b080:	2b20      	cmp	r3, #32
 800b082:	d104      	bne.n	800b08e <__gethex+0x1e6>
 800b084:	f845 bb04 	str.w	fp, [r5], #4
 800b088:	f04f 0b00 	mov.w	fp, #0
 800b08c:	465b      	mov	r3, fp
 800b08e:	7830      	ldrb	r0, [r6, #0]
 800b090:	9303      	str	r3, [sp, #12]
 800b092:	f7ff fef4 	bl	800ae7e <__hexdig_fun>
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	f000 000f 	and.w	r0, r0, #15
 800b09c:	4098      	lsls	r0, r3
 800b09e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	e7ae      	b.n	800b004 <__gethex+0x15c>
 800b0a6:	45b1      	cmp	r9, r6
 800b0a8:	d8ea      	bhi.n	800b080 <__gethex+0x1d8>
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	492a      	ldr	r1, [pc, #168]	@ (800b158 <__gethex+0x2b0>)
 800b0b0:	9303      	str	r3, [sp, #12]
 800b0b2:	f7ff fe29 	bl	800ad08 <strncmp>
 800b0b6:	9b03      	ldr	r3, [sp, #12]
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1e1      	bne.n	800b080 <__gethex+0x1d8>
 800b0bc:	e7a2      	b.n	800b004 <__gethex+0x15c>
 800b0be:	4620      	mov	r0, r4
 800b0c0:	1ea9      	subs	r1, r5, #2
 800b0c2:	f7fe fb94 	bl	80097ee <__any_on>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d0c2      	beq.n	800b050 <__gethex+0x1a8>
 800b0ca:	f04f 0903 	mov.w	r9, #3
 800b0ce:	e7c1      	b.n	800b054 <__gethex+0x1ac>
 800b0d0:	da09      	bge.n	800b0e6 <__gethex+0x23e>
 800b0d2:	1b75      	subs	r5, r6, r5
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	9801      	ldr	r0, [sp, #4]
 800b0da:	f7fe f959 	bl	8009390 <__lshift>
 800b0de:	4604      	mov	r4, r0
 800b0e0:	1b7f      	subs	r7, r7, r5
 800b0e2:	f100 0a14 	add.w	sl, r0, #20
 800b0e6:	f04f 0900 	mov.w	r9, #0
 800b0ea:	e7b8      	b.n	800b05e <__gethex+0x1b6>
 800b0ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b0f0:	42bd      	cmp	r5, r7
 800b0f2:	dd6f      	ble.n	800b1d4 <__gethex+0x32c>
 800b0f4:	1bed      	subs	r5, r5, r7
 800b0f6:	42ae      	cmp	r6, r5
 800b0f8:	dc34      	bgt.n	800b164 <__gethex+0x2bc>
 800b0fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d022      	beq.n	800b148 <__gethex+0x2a0>
 800b102:	2b03      	cmp	r3, #3
 800b104:	d024      	beq.n	800b150 <__gethex+0x2a8>
 800b106:	2b01      	cmp	r3, #1
 800b108:	d115      	bne.n	800b136 <__gethex+0x28e>
 800b10a:	42ae      	cmp	r6, r5
 800b10c:	d113      	bne.n	800b136 <__gethex+0x28e>
 800b10e:	2e01      	cmp	r6, #1
 800b110:	d10b      	bne.n	800b12a <__gethex+0x282>
 800b112:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b116:	9a02      	ldr	r2, [sp, #8]
 800b118:	2562      	movs	r5, #98	@ 0x62
 800b11a:	6013      	str	r3, [r2, #0]
 800b11c:	2301      	movs	r3, #1
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	f8ca 3000 	str.w	r3, [sl]
 800b124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b126:	601c      	str	r4, [r3, #0]
 800b128:	e73a      	b.n	800afa0 <__gethex+0xf8>
 800b12a:	4620      	mov	r0, r4
 800b12c:	1e71      	subs	r1, r6, #1
 800b12e:	f7fe fb5e 	bl	80097ee <__any_on>
 800b132:	2800      	cmp	r0, #0
 800b134:	d1ed      	bne.n	800b112 <__gethex+0x26a>
 800b136:	4621      	mov	r1, r4
 800b138:	9801      	ldr	r0, [sp, #4]
 800b13a:	f7fd ff13 	bl	8008f64 <_Bfree>
 800b13e:	2300      	movs	r3, #0
 800b140:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b142:	2550      	movs	r5, #80	@ 0x50
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	e72b      	b.n	800afa0 <__gethex+0xf8>
 800b148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1f3      	bne.n	800b136 <__gethex+0x28e>
 800b14e:	e7e0      	b.n	800b112 <__gethex+0x26a>
 800b150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1dd      	bne.n	800b112 <__gethex+0x26a>
 800b156:	e7ee      	b.n	800b136 <__gethex+0x28e>
 800b158:	0800b9b0 	.word	0x0800b9b0
 800b15c:	0800b847 	.word	0x0800b847
 800b160:	0800bb5e 	.word	0x0800bb5e
 800b164:	1e6f      	subs	r7, r5, #1
 800b166:	f1b9 0f00 	cmp.w	r9, #0
 800b16a:	d130      	bne.n	800b1ce <__gethex+0x326>
 800b16c:	b127      	cbz	r7, 800b178 <__gethex+0x2d0>
 800b16e:	4639      	mov	r1, r7
 800b170:	4620      	mov	r0, r4
 800b172:	f7fe fb3c 	bl	80097ee <__any_on>
 800b176:	4681      	mov	r9, r0
 800b178:	2301      	movs	r3, #1
 800b17a:	4629      	mov	r1, r5
 800b17c:	1b76      	subs	r6, r6, r5
 800b17e:	2502      	movs	r5, #2
 800b180:	117a      	asrs	r2, r7, #5
 800b182:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b186:	f007 071f 	and.w	r7, r7, #31
 800b18a:	40bb      	lsls	r3, r7
 800b18c:	4213      	tst	r3, r2
 800b18e:	4620      	mov	r0, r4
 800b190:	bf18      	it	ne
 800b192:	f049 0902 	orrne.w	r9, r9, #2
 800b196:	f7ff fe1f 	bl	800add8 <rshift>
 800b19a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b19e:	f1b9 0f00 	cmp.w	r9, #0
 800b1a2:	d047      	beq.n	800b234 <__gethex+0x38c>
 800b1a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d015      	beq.n	800b1d8 <__gethex+0x330>
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d017      	beq.n	800b1e0 <__gethex+0x338>
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d109      	bne.n	800b1c8 <__gethex+0x320>
 800b1b4:	f019 0f02 	tst.w	r9, #2
 800b1b8:	d006      	beq.n	800b1c8 <__gethex+0x320>
 800b1ba:	f8da 3000 	ldr.w	r3, [sl]
 800b1be:	ea49 0903 	orr.w	r9, r9, r3
 800b1c2:	f019 0f01 	tst.w	r9, #1
 800b1c6:	d10e      	bne.n	800b1e6 <__gethex+0x33e>
 800b1c8:	f045 0510 	orr.w	r5, r5, #16
 800b1cc:	e032      	b.n	800b234 <__gethex+0x38c>
 800b1ce:	f04f 0901 	mov.w	r9, #1
 800b1d2:	e7d1      	b.n	800b178 <__gethex+0x2d0>
 800b1d4:	2501      	movs	r5, #1
 800b1d6:	e7e2      	b.n	800b19e <__gethex+0x2f6>
 800b1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1da:	f1c3 0301 	rsb	r3, r3, #1
 800b1de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0f0      	beq.n	800b1c8 <__gethex+0x320>
 800b1e6:	f04f 0c00 	mov.w	ip, #0
 800b1ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b1ee:	f104 0314 	add.w	r3, r4, #20
 800b1f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b200:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b204:	d01b      	beq.n	800b23e <__gethex+0x396>
 800b206:	3201      	adds	r2, #1
 800b208:	6002      	str	r2, [r0, #0]
 800b20a:	2d02      	cmp	r5, #2
 800b20c:	f104 0314 	add.w	r3, r4, #20
 800b210:	d13c      	bne.n	800b28c <__gethex+0x3e4>
 800b212:	f8d8 2000 	ldr.w	r2, [r8]
 800b216:	3a01      	subs	r2, #1
 800b218:	42b2      	cmp	r2, r6
 800b21a:	d109      	bne.n	800b230 <__gethex+0x388>
 800b21c:	2201      	movs	r2, #1
 800b21e:	1171      	asrs	r1, r6, #5
 800b220:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b224:	f006 061f 	and.w	r6, r6, #31
 800b228:	fa02 f606 	lsl.w	r6, r2, r6
 800b22c:	421e      	tst	r6, r3
 800b22e:	d13a      	bne.n	800b2a6 <__gethex+0x3fe>
 800b230:	f045 0520 	orr.w	r5, r5, #32
 800b234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b236:	601c      	str	r4, [r3, #0]
 800b238:	9b02      	ldr	r3, [sp, #8]
 800b23a:	601f      	str	r7, [r3, #0]
 800b23c:	e6b0      	b.n	800afa0 <__gethex+0xf8>
 800b23e:	4299      	cmp	r1, r3
 800b240:	f843 cc04 	str.w	ip, [r3, #-4]
 800b244:	d8d9      	bhi.n	800b1fa <__gethex+0x352>
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	459b      	cmp	fp, r3
 800b24a:	db17      	blt.n	800b27c <__gethex+0x3d4>
 800b24c:	6861      	ldr	r1, [r4, #4]
 800b24e:	9801      	ldr	r0, [sp, #4]
 800b250:	3101      	adds	r1, #1
 800b252:	f7fd fe47 	bl	8008ee4 <_Balloc>
 800b256:	4681      	mov	r9, r0
 800b258:	b918      	cbnz	r0, 800b262 <__gethex+0x3ba>
 800b25a:	4602      	mov	r2, r0
 800b25c:	2184      	movs	r1, #132	@ 0x84
 800b25e:	4b19      	ldr	r3, [pc, #100]	@ (800b2c4 <__gethex+0x41c>)
 800b260:	e6c5      	b.n	800afee <__gethex+0x146>
 800b262:	6922      	ldr	r2, [r4, #16]
 800b264:	f104 010c 	add.w	r1, r4, #12
 800b268:	3202      	adds	r2, #2
 800b26a:	0092      	lsls	r2, r2, #2
 800b26c:	300c      	adds	r0, #12
 800b26e:	f7ff fd6d 	bl	800ad4c <memcpy>
 800b272:	4621      	mov	r1, r4
 800b274:	9801      	ldr	r0, [sp, #4]
 800b276:	f7fd fe75 	bl	8008f64 <_Bfree>
 800b27a:	464c      	mov	r4, r9
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	6122      	str	r2, [r4, #16]
 800b282:	2201      	movs	r2, #1
 800b284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b288:	615a      	str	r2, [r3, #20]
 800b28a:	e7be      	b.n	800b20a <__gethex+0x362>
 800b28c:	6922      	ldr	r2, [r4, #16]
 800b28e:	455a      	cmp	r2, fp
 800b290:	dd0b      	ble.n	800b2aa <__gethex+0x402>
 800b292:	2101      	movs	r1, #1
 800b294:	4620      	mov	r0, r4
 800b296:	f7ff fd9f 	bl	800add8 <rshift>
 800b29a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b29e:	3701      	adds	r7, #1
 800b2a0:	42bb      	cmp	r3, r7
 800b2a2:	f6ff aee0 	blt.w	800b066 <__gethex+0x1be>
 800b2a6:	2501      	movs	r5, #1
 800b2a8:	e7c2      	b.n	800b230 <__gethex+0x388>
 800b2aa:	f016 061f 	ands.w	r6, r6, #31
 800b2ae:	d0fa      	beq.n	800b2a6 <__gethex+0x3fe>
 800b2b0:	4453      	add	r3, sl
 800b2b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b2b6:	f7fd ff07 	bl	80090c8 <__hi0bits>
 800b2ba:	f1c6 0620 	rsb	r6, r6, #32
 800b2be:	42b0      	cmp	r0, r6
 800b2c0:	dbe7      	blt.n	800b292 <__gethex+0x3ea>
 800b2c2:	e7f0      	b.n	800b2a6 <__gethex+0x3fe>
 800b2c4:	0800b847 	.word	0x0800b847

0800b2c8 <L_shift>:
 800b2c8:	f1c2 0208 	rsb	r2, r2, #8
 800b2cc:	0092      	lsls	r2, r2, #2
 800b2ce:	b570      	push	{r4, r5, r6, lr}
 800b2d0:	f1c2 0620 	rsb	r6, r2, #32
 800b2d4:	6843      	ldr	r3, [r0, #4]
 800b2d6:	6804      	ldr	r4, [r0, #0]
 800b2d8:	fa03 f506 	lsl.w	r5, r3, r6
 800b2dc:	432c      	orrs	r4, r5
 800b2de:	40d3      	lsrs	r3, r2
 800b2e0:	6004      	str	r4, [r0, #0]
 800b2e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2e6:	4288      	cmp	r0, r1
 800b2e8:	d3f4      	bcc.n	800b2d4 <L_shift+0xc>
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}

0800b2ec <__match>:
 800b2ec:	b530      	push	{r4, r5, lr}
 800b2ee:	6803      	ldr	r3, [r0, #0]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f6:	b914      	cbnz	r4, 800b2fe <__match+0x12>
 800b2f8:	6003      	str	r3, [r0, #0]
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	bd30      	pop	{r4, r5, pc}
 800b2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b302:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b306:	2d19      	cmp	r5, #25
 800b308:	bf98      	it	ls
 800b30a:	3220      	addls	r2, #32
 800b30c:	42a2      	cmp	r2, r4
 800b30e:	d0f0      	beq.n	800b2f2 <__match+0x6>
 800b310:	2000      	movs	r0, #0
 800b312:	e7f3      	b.n	800b2fc <__match+0x10>

0800b314 <__hexnan>:
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	2500      	movs	r5, #0
 800b31a:	680b      	ldr	r3, [r1, #0]
 800b31c:	4682      	mov	sl, r0
 800b31e:	115e      	asrs	r6, r3, #5
 800b320:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b324:	f013 031f 	ands.w	r3, r3, #31
 800b328:	bf18      	it	ne
 800b32a:	3604      	addne	r6, #4
 800b32c:	1f37      	subs	r7, r6, #4
 800b32e:	4690      	mov	r8, r2
 800b330:	46b9      	mov	r9, r7
 800b332:	463c      	mov	r4, r7
 800b334:	46ab      	mov	fp, r5
 800b336:	b087      	sub	sp, #28
 800b338:	6801      	ldr	r1, [r0, #0]
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b340:	9502      	str	r5, [sp, #8]
 800b342:	784a      	ldrb	r2, [r1, #1]
 800b344:	1c4b      	adds	r3, r1, #1
 800b346:	9303      	str	r3, [sp, #12]
 800b348:	b342      	cbz	r2, 800b39c <__hexnan+0x88>
 800b34a:	4610      	mov	r0, r2
 800b34c:	9105      	str	r1, [sp, #20]
 800b34e:	9204      	str	r2, [sp, #16]
 800b350:	f7ff fd95 	bl	800ae7e <__hexdig_fun>
 800b354:	2800      	cmp	r0, #0
 800b356:	d151      	bne.n	800b3fc <__hexnan+0xe8>
 800b358:	9a04      	ldr	r2, [sp, #16]
 800b35a:	9905      	ldr	r1, [sp, #20]
 800b35c:	2a20      	cmp	r2, #32
 800b35e:	d818      	bhi.n	800b392 <__hexnan+0x7e>
 800b360:	9b02      	ldr	r3, [sp, #8]
 800b362:	459b      	cmp	fp, r3
 800b364:	dd13      	ble.n	800b38e <__hexnan+0x7a>
 800b366:	454c      	cmp	r4, r9
 800b368:	d206      	bcs.n	800b378 <__hexnan+0x64>
 800b36a:	2d07      	cmp	r5, #7
 800b36c:	dc04      	bgt.n	800b378 <__hexnan+0x64>
 800b36e:	462a      	mov	r2, r5
 800b370:	4649      	mov	r1, r9
 800b372:	4620      	mov	r0, r4
 800b374:	f7ff ffa8 	bl	800b2c8 <L_shift>
 800b378:	4544      	cmp	r4, r8
 800b37a:	d952      	bls.n	800b422 <__hexnan+0x10e>
 800b37c:	2300      	movs	r3, #0
 800b37e:	f1a4 0904 	sub.w	r9, r4, #4
 800b382:	f844 3c04 	str.w	r3, [r4, #-4]
 800b386:	461d      	mov	r5, r3
 800b388:	464c      	mov	r4, r9
 800b38a:	f8cd b008 	str.w	fp, [sp, #8]
 800b38e:	9903      	ldr	r1, [sp, #12]
 800b390:	e7d7      	b.n	800b342 <__hexnan+0x2e>
 800b392:	2a29      	cmp	r2, #41	@ 0x29
 800b394:	d157      	bne.n	800b446 <__hexnan+0x132>
 800b396:	3102      	adds	r1, #2
 800b398:	f8ca 1000 	str.w	r1, [sl]
 800b39c:	f1bb 0f00 	cmp.w	fp, #0
 800b3a0:	d051      	beq.n	800b446 <__hexnan+0x132>
 800b3a2:	454c      	cmp	r4, r9
 800b3a4:	d206      	bcs.n	800b3b4 <__hexnan+0xa0>
 800b3a6:	2d07      	cmp	r5, #7
 800b3a8:	dc04      	bgt.n	800b3b4 <__hexnan+0xa0>
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff ff8a 	bl	800b2c8 <L_shift>
 800b3b4:	4544      	cmp	r4, r8
 800b3b6:	d936      	bls.n	800b426 <__hexnan+0x112>
 800b3b8:	4623      	mov	r3, r4
 800b3ba:	f1a8 0204 	sub.w	r2, r8, #4
 800b3be:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3c2:	429f      	cmp	r7, r3
 800b3c4:	f842 1f04 	str.w	r1, [r2, #4]!
 800b3c8:	d2f9      	bcs.n	800b3be <__hexnan+0xaa>
 800b3ca:	1b3b      	subs	r3, r7, r4
 800b3cc:	f023 0303 	bic.w	r3, r3, #3
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	3401      	adds	r4, #1
 800b3d4:	3e03      	subs	r6, #3
 800b3d6:	42b4      	cmp	r4, r6
 800b3d8:	bf88      	it	hi
 800b3da:	2304      	movhi	r3, #4
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4443      	add	r3, r8
 800b3e0:	f843 2b04 	str.w	r2, [r3], #4
 800b3e4:	429f      	cmp	r7, r3
 800b3e6:	d2fb      	bcs.n	800b3e0 <__hexnan+0xcc>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	b91b      	cbnz	r3, 800b3f4 <__hexnan+0xe0>
 800b3ec:	4547      	cmp	r7, r8
 800b3ee:	d128      	bne.n	800b442 <__hexnan+0x12e>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	2005      	movs	r0, #5
 800b3f6:	b007      	add	sp, #28
 800b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	2d08      	cmp	r5, #8
 800b400:	f10b 0b01 	add.w	fp, fp, #1
 800b404:	dd06      	ble.n	800b414 <__hexnan+0x100>
 800b406:	4544      	cmp	r4, r8
 800b408:	d9c1      	bls.n	800b38e <__hexnan+0x7a>
 800b40a:	2300      	movs	r3, #0
 800b40c:	2501      	movs	r5, #1
 800b40e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b412:	3c04      	subs	r4, #4
 800b414:	6822      	ldr	r2, [r4, #0]
 800b416:	f000 000f 	and.w	r0, r0, #15
 800b41a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b41e:	6020      	str	r0, [r4, #0]
 800b420:	e7b5      	b.n	800b38e <__hexnan+0x7a>
 800b422:	2508      	movs	r5, #8
 800b424:	e7b3      	b.n	800b38e <__hexnan+0x7a>
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0dd      	beq.n	800b3e8 <__hexnan+0xd4>
 800b42c:	f04f 32ff 	mov.w	r2, #4294967295
 800b430:	f1c3 0320 	rsb	r3, r3, #32
 800b434:	40da      	lsrs	r2, r3
 800b436:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b43a:	4013      	ands	r3, r2
 800b43c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b440:	e7d2      	b.n	800b3e8 <__hexnan+0xd4>
 800b442:	3f04      	subs	r7, #4
 800b444:	e7d0      	b.n	800b3e8 <__hexnan+0xd4>
 800b446:	2004      	movs	r0, #4
 800b448:	e7d5      	b.n	800b3f6 <__hexnan+0xe2>

0800b44a <__ascii_mbtowc>:
 800b44a:	b082      	sub	sp, #8
 800b44c:	b901      	cbnz	r1, 800b450 <__ascii_mbtowc+0x6>
 800b44e:	a901      	add	r1, sp, #4
 800b450:	b142      	cbz	r2, 800b464 <__ascii_mbtowc+0x1a>
 800b452:	b14b      	cbz	r3, 800b468 <__ascii_mbtowc+0x1e>
 800b454:	7813      	ldrb	r3, [r2, #0]
 800b456:	600b      	str	r3, [r1, #0]
 800b458:	7812      	ldrb	r2, [r2, #0]
 800b45a:	1e10      	subs	r0, r2, #0
 800b45c:	bf18      	it	ne
 800b45e:	2001      	movne	r0, #1
 800b460:	b002      	add	sp, #8
 800b462:	4770      	bx	lr
 800b464:	4610      	mov	r0, r2
 800b466:	e7fb      	b.n	800b460 <__ascii_mbtowc+0x16>
 800b468:	f06f 0001 	mvn.w	r0, #1
 800b46c:	e7f8      	b.n	800b460 <__ascii_mbtowc+0x16>

0800b46e <_realloc_r>:
 800b46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b472:	4680      	mov	r8, r0
 800b474:	4615      	mov	r5, r2
 800b476:	460c      	mov	r4, r1
 800b478:	b921      	cbnz	r1, 800b484 <_realloc_r+0x16>
 800b47a:	4611      	mov	r1, r2
 800b47c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b480:	f7fd bca4 	b.w	8008dcc <_malloc_r>
 800b484:	b92a      	cbnz	r2, 800b492 <_realloc_r+0x24>
 800b486:	f7fd fc2f 	bl	8008ce8 <_free_r>
 800b48a:	2400      	movs	r4, #0
 800b48c:	4620      	mov	r0, r4
 800b48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b492:	f000 f8c4 	bl	800b61e <_malloc_usable_size_r>
 800b496:	4285      	cmp	r5, r0
 800b498:	4606      	mov	r6, r0
 800b49a:	d802      	bhi.n	800b4a2 <_realloc_r+0x34>
 800b49c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b4a0:	d8f4      	bhi.n	800b48c <_realloc_r+0x1e>
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	f7fd fc91 	bl	8008dcc <_malloc_r>
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d0ec      	beq.n	800b48a <_realloc_r+0x1c>
 800b4b0:	42b5      	cmp	r5, r6
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	bf28      	it	cs
 800b4b8:	4632      	movcs	r2, r6
 800b4ba:	f7ff fc47 	bl	800ad4c <memcpy>
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	f7fd fc11 	bl	8008ce8 <_free_r>
 800b4c6:	463c      	mov	r4, r7
 800b4c8:	e7e0      	b.n	800b48c <_realloc_r+0x1e>

0800b4ca <__ascii_wctomb>:
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	b141      	cbz	r1, 800b4e2 <__ascii_wctomb+0x18>
 800b4d0:	2aff      	cmp	r2, #255	@ 0xff
 800b4d2:	d904      	bls.n	800b4de <__ascii_wctomb+0x14>
 800b4d4:	228a      	movs	r2, #138	@ 0x8a
 800b4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	4770      	bx	lr
 800b4de:	2001      	movs	r0, #1
 800b4e0:	700a      	strb	r2, [r1, #0]
 800b4e2:	4770      	bx	lr

0800b4e4 <fiprintf>:
 800b4e4:	b40e      	push	{r1, r2, r3}
 800b4e6:	b503      	push	{r0, r1, lr}
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	ab03      	add	r3, sp, #12
 800b4ec:	4805      	ldr	r0, [pc, #20]	@ (800b504 <fiprintf+0x20>)
 800b4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f2:	6800      	ldr	r0, [r0, #0]
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	f7ff f999 	bl	800a82c <_vfiprintf_r>
 800b4fa:	b002      	add	sp, #8
 800b4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b500:	b003      	add	sp, #12
 800b502:	4770      	bx	lr
 800b504:	20000018 	.word	0x20000018

0800b508 <__swhatbuf_r>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	460c      	mov	r4, r1
 800b50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b510:	4615      	mov	r5, r2
 800b512:	2900      	cmp	r1, #0
 800b514:	461e      	mov	r6, r3
 800b516:	b096      	sub	sp, #88	@ 0x58
 800b518:	da0c      	bge.n	800b534 <__swhatbuf_r+0x2c>
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	2100      	movs	r1, #0
 800b51e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b522:	bf14      	ite	ne
 800b524:	2340      	movne	r3, #64	@ 0x40
 800b526:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b52a:	2000      	movs	r0, #0
 800b52c:	6031      	str	r1, [r6, #0]
 800b52e:	602b      	str	r3, [r5, #0]
 800b530:	b016      	add	sp, #88	@ 0x58
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	466a      	mov	r2, sp
 800b536:	f000 f849 	bl	800b5cc <_fstat_r>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	dbed      	blt.n	800b51a <__swhatbuf_r+0x12>
 800b53e:	9901      	ldr	r1, [sp, #4]
 800b540:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b544:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b548:	4259      	negs	r1, r3
 800b54a:	4159      	adcs	r1, r3
 800b54c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b550:	e7eb      	b.n	800b52a <__swhatbuf_r+0x22>

0800b552 <__smakebuf_r>:
 800b552:	898b      	ldrh	r3, [r1, #12]
 800b554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b556:	079d      	lsls	r5, r3, #30
 800b558:	4606      	mov	r6, r0
 800b55a:	460c      	mov	r4, r1
 800b55c:	d507      	bpl.n	800b56e <__smakebuf_r+0x1c>
 800b55e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	6123      	str	r3, [r4, #16]
 800b566:	2301      	movs	r3, #1
 800b568:	6163      	str	r3, [r4, #20]
 800b56a:	b003      	add	sp, #12
 800b56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b56e:	466a      	mov	r2, sp
 800b570:	ab01      	add	r3, sp, #4
 800b572:	f7ff ffc9 	bl	800b508 <__swhatbuf_r>
 800b576:	9f00      	ldr	r7, [sp, #0]
 800b578:	4605      	mov	r5, r0
 800b57a:	4639      	mov	r1, r7
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7fd fc25 	bl	8008dcc <_malloc_r>
 800b582:	b948      	cbnz	r0, 800b598 <__smakebuf_r+0x46>
 800b584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b588:	059a      	lsls	r2, r3, #22
 800b58a:	d4ee      	bmi.n	800b56a <__smakebuf_r+0x18>
 800b58c:	f023 0303 	bic.w	r3, r3, #3
 800b590:	f043 0302 	orr.w	r3, r3, #2
 800b594:	81a3      	strh	r3, [r4, #12]
 800b596:	e7e2      	b.n	800b55e <__smakebuf_r+0xc>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	6020      	str	r0, [r4, #0]
 800b5a8:	b15b      	cbz	r3, 800b5c2 <__smakebuf_r+0x70>
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5b0:	f000 f81e 	bl	800b5f0 <_isatty_r>
 800b5b4:	b128      	cbz	r0, 800b5c2 <__smakebuf_r+0x70>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	f023 0303 	bic.w	r3, r3, #3
 800b5bc:	f043 0301 	orr.w	r3, r3, #1
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	431d      	orrs	r5, r3
 800b5c6:	81a5      	strh	r5, [r4, #12]
 800b5c8:	e7cf      	b.n	800b56a <__smakebuf_r+0x18>
	...

0800b5cc <_fstat_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	4d06      	ldr	r5, [pc, #24]	@ (800b5ec <_fstat_r+0x20>)
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	f7f6 faeb 	bl	8001bb4 <_fstat>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	d102      	bne.n	800b5e8 <_fstat_r+0x1c>
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	b103      	cbz	r3, 800b5e8 <_fstat_r+0x1c>
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20000468 	.word	0x20000468

0800b5f0 <_isatty_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4d05      	ldr	r5, [pc, #20]	@ (800b60c <_isatty_r+0x1c>)
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	f7f6 fae9 	bl	8001bd2 <_isatty>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_isatty_r+0x1a>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_isatty_r+0x1a>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	20000468 	.word	0x20000468

0800b610 <abort>:
 800b610:	2006      	movs	r0, #6
 800b612:	b508      	push	{r3, lr}
 800b614:	f000 f834 	bl	800b680 <raise>
 800b618:	2001      	movs	r0, #1
 800b61a:	f7f6 fa98 	bl	8001b4e <_exit>

0800b61e <_malloc_usable_size_r>:
 800b61e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b622:	1f18      	subs	r0, r3, #4
 800b624:	2b00      	cmp	r3, #0
 800b626:	bfbc      	itt	lt
 800b628:	580b      	ldrlt	r3, [r1, r0]
 800b62a:	18c0      	addlt	r0, r0, r3
 800b62c:	4770      	bx	lr

0800b62e <_raise_r>:
 800b62e:	291f      	cmp	r1, #31
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4605      	mov	r5, r0
 800b634:	460c      	mov	r4, r1
 800b636:	d904      	bls.n	800b642 <_raise_r+0x14>
 800b638:	2316      	movs	r3, #22
 800b63a:	6003      	str	r3, [r0, #0]
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	bd38      	pop	{r3, r4, r5, pc}
 800b642:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b644:	b112      	cbz	r2, 800b64c <_raise_r+0x1e>
 800b646:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b64a:	b94b      	cbnz	r3, 800b660 <_raise_r+0x32>
 800b64c:	4628      	mov	r0, r5
 800b64e:	f000 f831 	bl	800b6b4 <_getpid_r>
 800b652:	4622      	mov	r2, r4
 800b654:	4601      	mov	r1, r0
 800b656:	4628      	mov	r0, r5
 800b658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65c:	f000 b818 	b.w	800b690 <_kill_r>
 800b660:	2b01      	cmp	r3, #1
 800b662:	d00a      	beq.n	800b67a <_raise_r+0x4c>
 800b664:	1c59      	adds	r1, r3, #1
 800b666:	d103      	bne.n	800b670 <_raise_r+0x42>
 800b668:	2316      	movs	r3, #22
 800b66a:	6003      	str	r3, [r0, #0]
 800b66c:	2001      	movs	r0, #1
 800b66e:	e7e7      	b.n	800b640 <_raise_r+0x12>
 800b670:	2100      	movs	r1, #0
 800b672:	4620      	mov	r0, r4
 800b674:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b678:	4798      	blx	r3
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7e0      	b.n	800b640 <_raise_r+0x12>
	...

0800b680 <raise>:
 800b680:	4b02      	ldr	r3, [pc, #8]	@ (800b68c <raise+0xc>)
 800b682:	4601      	mov	r1, r0
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	f7ff bfd2 	b.w	800b62e <_raise_r>
 800b68a:	bf00      	nop
 800b68c:	20000018 	.word	0x20000018

0800b690 <_kill_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	2300      	movs	r3, #0
 800b694:	4d06      	ldr	r5, [pc, #24]	@ (800b6b0 <_kill_r+0x20>)
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	4611      	mov	r1, r2
 800b69c:	602b      	str	r3, [r5, #0]
 800b69e:	f7f6 fa46 	bl	8001b2e <_kill>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d102      	bne.n	800b6ac <_kill_r+0x1c>
 800b6a6:	682b      	ldr	r3, [r5, #0]
 800b6a8:	b103      	cbz	r3, 800b6ac <_kill_r+0x1c>
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	bd38      	pop	{r3, r4, r5, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000468 	.word	0x20000468

0800b6b4 <_getpid_r>:
 800b6b4:	f7f6 ba34 	b.w	8001b20 <_getpid>

0800b6b8 <_init>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	bf00      	nop
 800b6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6be:	bc08      	pop	{r3}
 800b6c0:	469e      	mov	lr, r3
 800b6c2:	4770      	bx	lr

0800b6c4 <_fini>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	bf00      	nop
 800b6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ca:	bc08      	pop	{r3}
 800b6cc:	469e      	mov	lr, r3
 800b6ce:	4770      	bx	lr
